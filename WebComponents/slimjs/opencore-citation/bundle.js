/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzBmODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(3);
__webpack_require__(4);
__webpack_require__(5);
__webpack_require__(6);
__webpack_require__(7);
__webpack_require__(8);
__webpack_require__(9);
__webpack_require__(10);
module.exports = __webpack_require__(13);


/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("(function(){/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';(function(a){function b(a,b){if(\"function\"===typeof window.CustomEvent)return new CustomEvent(a,b);var d=document.createEvent(\"CustomEvent\");d.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return d}function c(a){if(n)return a.ownerDocument!==document?a.ownerDocument:null;var b=a.__importDoc;if(!b&&a.parentNode){b=a.parentNode;if(\"function\"===typeof b.closest)b=b.closest(\"link[rel=import]\");else for(;!k(b)&&(b=b.parentNode););a.__importDoc=b}return b}function d(a){var b=document.querySelectorAll(\"link[rel=import]:not([import-dependency])\"),\nd=b.length;d?h(b,function(b){return l(b,function(){0===--d&&a()})}):a()}function e(a){function b(){\"loading\"!==document.readyState&&document.body&&(document.removeEventListener(\"readystatechange\",b),a())}document.addEventListener(\"readystatechange\",b);b()}function f(a){e(function(){return d(function(){return a&&a()})})}function l(a,b){if(a.__loaded)b&&b();else if(\"script\"===a.localName&&!a.src||\"style\"===a.localName&&!a.firstChild)a.__loaded=!0,b&&b();else{var d=function(c){a.removeEventListener(c.type,\nd);a.__loaded=!0;b&&b()};a.addEventListener(\"load\",d);H&&\"style\"===a.localName||a.addEventListener(\"error\",d)}}function k(a){return a.nodeType===Node.ELEMENT_NODE&&\"link\"===a.localName&&\"import\"===a.rel}function g(){var a=this;this.a={};this.b=0;this.g=new MutationObserver(function(b){return a.L(b)});this.g.observe(document.head,{childList:!0,subtree:!0});this.c(document)}function h(a,b,d){var c=a?a.length:0,e=d?-1:1;for(d=d?c-1:0;d<c&&0<=d;d+=e)b(a[d],d)}var n=\"import\"in document.createElement(\"link\"),\nI=null;!1===\"currentScript\"in document&&Object.defineProperty(document,\"currentScript\",{get:function(){return I||(\"complete\"!==document.readyState?document.scripts[document.scripts.length-1]:null)},configurable:!0});var ua=/(url\\()([^)]*)(\\))/g,va=/(@import[\\s]+(?!url\\())([^;]*)(;)/g,wa=/(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g,r={J:function(a,b){a.href&&a.setAttribute(\"href\",r.j(a.getAttribute(\"href\"),b));a.src&&a.setAttribute(\"src\",r.j(a.getAttribute(\"src\"),b));if(\"style\"===a.localName){var d=\nr.D(a.textContent,b,ua);a.textContent=r.D(d,b,va)}},D:function(a,b,d){return a.replace(d,function(a,d,c,e){a=c.replace(/[\"']/g,\"\");b&&(a=r.j(a,b));return d+\"'\"+a+\"'\"+e})},j:function(a,b){if(void 0===r.l){r.l=!1;try{var d=new URL(\"b\",\"http://a\");d.pathname=\"c%20d\";r.l=\"http://a/c%20d\"===d.href}catch(Qa){}}if(r.l)return(new URL(a,b)).href;d=r.G;d||(d=document.implementation.createHTMLDocument(\"temp\"),r.G=d,d.w=d.createElement(\"base\"),d.head.appendChild(d.w),d.v=d.createElement(\"a\"));d.w.href=b;d.v.href=\na;return d.v.href||a}},U={async:!0,load:function(a,b,d){if(a)if(a.match(/^data:/)){a=a.split(\",\");var c=a[1];c=-1<a[0].indexOf(\";base64\")?atob(c):decodeURIComponent(c);b(c)}else{var e=new XMLHttpRequest;e.open(\"GET\",a,U.async);e.onload=function(){var a=e.responseURL||e.getResponseHeader(\"Location\");a&&0===a.indexOf(\"/\")&&(a=(location.origin||location.protocol+\"//\"+location.host)+a);var c=e.response||e.responseText;304===e.status||0===e.status||200<=e.status&&300>e.status?b(c,a):d(c)};e.send()}else d(\"error: href must be specified\")}},\nH=/Trident/.test(navigator.userAgent)||/Edge\\/\\d./i.test(navigator.userAgent);g.prototype.c=function(a){var b=this;h(a.querySelectorAll(\"link[rel=import]\"),function(a){return b.B(a)})};g.prototype.B=function(a){var b=this,d=a.href;if(void 0!==this.a[d]){var c=this.a[d];c&&c.__loaded&&(a.import=c,this.A(a))}else this.b++,this.a[d]=\"pending\",U.load(d,function(a,c){a=b.M(a,c||d);b.a[d]=a;b.b--;b.c(a);b.C()},function(){b.a[d]=null;b.b--;b.C()})};g.prototype.M=function(a,b){if(!a)return document.createDocumentFragment();\nH&&(a=a.replace(wa,function(a,b,d){return-1===a.indexOf(\"type=\")?b+\" type=import-disable \"+d:a}));var d=document.createElement(\"template\");d.innerHTML=a;if(d.content)a=d.content;else for(a=document.createDocumentFragment();d.firstChild;)a.appendChild(d.firstChild);if(d=a.querySelector(\"base\"))b=r.j(d.getAttribute(\"href\"),b),d.removeAttribute(\"href\");var c=0;h(a.querySelectorAll('link[rel=import], link[rel=stylesheet][href][type=import-disable],\\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\\n    script:not([type]), script[type=\"application/javascript\"],\\n    script[type=\"text/javascript\"]'),\nfunction(a){l(a);r.J(a,b);a.setAttribute(\"import-dependency\",\"\");\"script\"===a.localName&&!a.src&&a.textContent&&(a.setAttribute(\"src\",\"data:text/javascript;charset=utf-8,\"+encodeURIComponent(a.textContent+(\"\\n//# sourceURL=\"+b+(c?\"-\"+c:\"\")+\".js\\n\"))),a.textContent=\"\",c++)});return a};g.prototype.C=function(){var a=this;if(!this.b){this.g.disconnect();this.flatten(document);var b=!1,d=!1,c=function(){d&&b&&(a.c(document),a.b||(a.g.observe(document.head,{childList:!0,subtree:!0}),a.K()))};this.P(function(){d=\n!0;c()});this.N(function(){b=!0;c()})}};g.prototype.flatten=function(a){var b=this;h(a.querySelectorAll(\"link[rel=import]\"),function(a){var d=b.a[a.href];(a.import=d)&&d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&(b.a[a.href]=a,a.readyState=\"loading\",a.import=a,b.flatten(d),a.appendChild(d))})};g.prototype.N=function(a){function b(e){if(e<c){var f=d[e],k=document.createElement(\"script\");f.removeAttribute(\"import-dependency\");h(f.attributes,function(a){return k.setAttribute(a.name,a.value)});I=k;f.parentNode.replaceChild(k,\nf);l(k,function(){I=null;b(e+1)})}else a()}var d=document.querySelectorAll(\"script[import-dependency]\"),c=d.length;b(0)};g.prototype.P=function(a){var b=document.querySelectorAll(\"style[import-dependency],\\n    link[rel=stylesheet][import-dependency]\"),d=b.length;if(d){var e=H&&!!document.querySelector(\"link[rel=stylesheet][href][type=import-disable]\");h(b,function(b){l(b,function(){b.removeAttribute(\"import-dependency\");0===--d&&a()});if(e&&b.parentNode!==document.head){var f=document.createElement(b.localName);\nf.__appliedElement=b;f.setAttribute(\"type\",\"import-placeholder\");b.parentNode.insertBefore(f,b.nextSibling);for(f=c(b);f&&c(f);)f=c(f);f.parentNode!==document.head&&(f=null);document.head.insertBefore(b,f);b.removeAttribute(\"type\")}})}else a()};g.prototype.K=function(){var a=this;h(document.querySelectorAll(\"link[rel=import]\"),function(b){return a.A(b)},!0)};g.prototype.A=function(a){a.__loaded||(a.__loaded=!0,a.import&&(a.import.readyState=\"complete\"),a.dispatchEvent(b(a.import?\"load\":\"error\",{bubbles:!1,\ncancelable:!1,detail:void 0})))};g.prototype.L=function(a){var b=this;h(a,function(a){return h(a.addedNodes,function(a){a&&a.nodeType===Node.ELEMENT_NODE&&(k(a)?b.B(a):b.c(a))})})};if(n){h(document.querySelectorAll(\"link[rel=import]\"),function(a){a.import&&\"loading\"===a.import.readyState||(a.__loaded=!0)});var V=function(a){a=a.target;k(a)&&(a.__loaded=!0)};document.addEventListener(\"load\",V,!0);document.addEventListener(\"error\",V,!0)}else{var z=Object.getOwnPropertyDescriptor(Node.prototype,\"baseURI\");\nObject.defineProperty((!z||z.configurable?Node:Element).prototype,\"baseURI\",{get:function(){var a=k(this)?this:c(this);return a?a.href:z&&z.get?z.get.call(this):(document.querySelector(\"base\")||window.location).href},configurable:!0,enumerable:!0});e(function(){return new g})}f(function(){return document.dispatchEvent(b(\"HTMLImportsLoaded\",{cancelable:!0,bubbles:!0,detail:void 0}))});a.useNative=n;a.whenReady=f;a.importForElement=c})(window.HTMLImports=window.HTMLImports||{});var aa=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function m(a){var b=aa.has(a);a=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(a);return!b&&a}function p(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return!(!a||!(a.__CE_isImportDocument||a instanceof Document))}\nfunction q(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}\nfunction t(a,b,c){c=void 0===c?new Set:c;for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)t(d,b,c);d=q(a,e);continue}else if(\"template\"===f){d=q(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)t(e,b,c)}d=d.firstChild?d.firstChild:q(a,d)}}function u(a,b,c){a[b]=c};function v(){this.a=new Map;this.g=new Map;this.c=[];this.b=!1}function ba(a,b,c){a.a.set(b,c);a.g.set(c.constructor,c)}function w(a,b){a.b=!0;a.c.push(b)}function x(a,b){a.b&&t(b,function(b){return y(a,b)})}function y(a,b){if(a.b&&!b.__CE_patched){b.__CE_patched=!0;for(var c=0;c<a.c.length;c++)a.c[c](b)}}function A(a,b){var c=[];t(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):B(a,d)}}\nfunction C(a,b){var c=[];t(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d)}}\nfunction D(a,b,c){c=void 0===c?{}:c;var d=c.R||new Set,e=c.F||function(b){return B(a,b)},f=[];t(b,function(b){if(\"link\"===b.localName&&\"import\"===b.getAttribute(\"rel\")){var c=b.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:b.addEventListener(\"load\",function(){var c=b.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);D(a,c,{R:f,F:e})}})}else f.push(b)},d);if(a.b)for(b=\n0;b<f.length;b++)y(a,f[b]);for(b=0;b<f.length;b++)e(f[b])}\nfunction B(a,b){if(void 0===b.__CE_state){var c=b.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=a.a.get(b.localName)){c.constructionStack.push(b);var d=c.constructor;try{try{if(new d!==b)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(l){throw b.__CE_state=2,l;}b.__CE_state=1;b.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\nf=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null)}p(b)&&a.connectedCallback(b)}}}v.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a)};v.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a)};\nv.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,c,d,e)};function E(a){var b=document;this.f=a;this.a=b;this.b=void 0;D(this.f,this.a);\"loading\"===this.a.readyState&&(this.b=new MutationObserver(this.c.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function F(a){a.b&&a.b.disconnect()}E.prototype.c=function(a){var b=this.a.readyState;\"interactive\"!==b&&\"complete\"!==b||F(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)D(this.f,c[d])};function ca(){var a=this;this.b=this.a=void 0;this.c=new Promise(function(b){a.b=b;a.a&&b(a.a)})}function da(a){if(a.a)throw Error(\"Already resolved.\");a.a=void 0;a.b&&a.b(void 0)};function G(a){this.m=!1;this.f=a;this.u=new Map;this.o=function(a){return a()};this.h=!1;this.s=[];this.H=new E(a)}\nG.prototype.define=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!m(a))throw new SyntaxError(\"The element name '\"+a+\"' is not valid.\");if(this.f.a.get(a))throw Error(\"A custom element with name '\"+a+\"' has already been defined.\");if(this.m)throw Error(\"A custom element is already being defined.\");this.m=!0;try{var d=function(a){var b=e[a];if(void 0!==b&&!(b instanceof Function))throw Error(\"The '\"+a+\"' callback must be a function.\");\nreturn b},e=b.prototype;if(!(e instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");var f=d(\"connectedCallback\");var l=d(\"disconnectedCallback\");var k=d(\"adoptedCallback\");var g=d(\"attributeChangedCallback\");var h=b.observedAttributes||[]}catch(n){return}finally{this.m=!1}b={localName:a,constructor:b,connectedCallback:f,disconnectedCallback:l,adoptedCallback:k,attributeChangedCallback:g,observedAttributes:h,constructionStack:[]};ba(this.f,a,b);this.s.push(b);\nthis.h||(this.h=!0,this.o(function(){return ea(c)}))};function ea(a){if(!1!==a.h){a.h=!1;for(var b=a.s,c=[],d=new Map,e=0;e<b.length;e++)d.set(b[e].localName,[]);D(a.f,document,{F:function(b){if(void 0===b.__CE_state){var e=b.localName,f=d.get(e);f?f.push(b):a.f.a.get(e)&&c.push(b)}}});for(e=0;e<c.length;e++)B(a.f,c[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=d.get(f.localName);for(var l=0;l<f.length;l++)B(a.f,f[l]);(e=a.u.get(e))&&da(e)}}}G.prototype.get=function(a){if(a=this.f.a.get(a))return a.constructor};\nG.prototype.whenDefined=function(a){if(!m(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.u.get(a);if(b)return b.c;b=new ca;this.u.set(a,b);this.f.a.get(a)&&!this.s.some(function(b){return b.localName===a})&&da(b);return b.c};G.prototype.O=function(a){F(this.H);var b=this.o;this.o=function(c){return a(function(){return b(c)})}};window.CustomElementRegistry=G;G.prototype.define=G.prototype.define;G.prototype.get=G.prototype.get;\nG.prototype.whenDefined=G.prototype.whenDefined;G.prototype.polyfillWrapFlushCallback=G.prototype.O;var J=window.Document.prototype.createElement,fa=window.Document.prototype.createElementNS,ha=window.Document.prototype.importNode,ia=window.Document.prototype.prepend,ja=window.Document.prototype.append,ka=window.DocumentFragment.prototype.prepend,la=window.DocumentFragment.prototype.append,ma=window.Node.prototype.cloneNode,K=window.Node.prototype.appendChild,na=window.Node.prototype.insertBefore,L=window.Node.prototype.removeChild,oa=window.Node.prototype.replaceChild,M=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),pa=window.Element.prototype.attachShadow,N=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),O=window.Element.prototype.getAttribute,qa=window.Element.prototype.setAttribute,ra=window.Element.prototype.removeAttribute,P=window.Element.prototype.getAttributeNS,sa=window.Element.prototype.setAttributeNS,ta=window.Element.prototype.removeAttributeNS,xa=window.Element.prototype.insertAdjacentElement,ya=window.Element.prototype.prepend,za=window.Element.prototype.append,\nQ=window.Element.prototype.before,Aa=window.Element.prototype.after,Ba=window.Element.prototype.replaceWith,Ca=window.Element.prototype.remove,Da=window.HTMLElement,R=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),Ea=window.HTMLElement.prototype.insertAdjacentElement;var Fa=new function(){};function Ga(){var a=S;window.HTMLElement=function(){function b(){var b=this.constructor,d=a.g.get(b);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=J.call(document,d.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=d,y(a,e),e;d=e.length-1;var f=e[d];if(f===Fa)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=Fa;Object.setPrototypeOf(f,b.prototype);y(a,f);return f}b.prototype=Da.prototype;return b}()};function T(a,b,c){function d(b){return function(d){for(var c=[],e=0;e<arguments.length;++e)c[e-0]=arguments[e];e=[];for(var f=[],h=0;h<c.length;h++){var n=c[h];n instanceof Element&&p(n)&&f.push(n);if(n instanceof DocumentFragment)for(n=n.firstChild;n;n=n.nextSibling)e.push(n);else e.push(n)}b.apply(this,c);for(c=0;c<f.length;c++)C(a,f[c]);if(p(this))for(c=0;c<e.length;c++)f=e[c],f instanceof Element&&A(a,f)}}void 0!==c.i&&(b.prepend=d(c.i));void 0!==c.append&&(b.append=d(c.append))};function Ha(){var a=S;u(Document.prototype,\"createElement\",function(b){if(this.__CE_hasRegistry){var c=a.a.get(b);if(c)return new c.constructor}b=J.call(this,b);y(a,b);return b});u(Document.prototype,\"importNode\",function(b,c){b=ha.call(this,b,c);this.__CE_hasRegistry?D(a,b):x(a,b);return b});u(Document.prototype,\"createElementNS\",function(b,c){if(this.__CE_hasRegistry&&(null===b||\"http://www.w3.org/1999/xhtml\"===b)){var d=a.a.get(c);if(d)return new d.constructor}b=fa.call(this,b,c);y(a,b);return b});\nT(a,Document.prototype,{i:ia,append:ja})};function Ia(){var a=S;function b(b,d){Object.defineProperty(b,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(b){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,b);else{var c=void 0;if(this.firstChild){var e=this.childNodes,k=e.length;if(0<k&&p(this)){c=Array(k);for(var g=0;g<k;g++)c[g]=e[g]}}d.set.call(this,b);if(c)for(b=0;b<c.length;b++)C(a,c[b])}}})}u(Node.prototype,\"insertBefore\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);\nb=na.call(this,b,d);if(p(this))for(d=0;d<c.length;d++)A(a,c[d]);return b}c=p(b);d=na.call(this,b,d);c&&C(a,b);p(this)&&A(a,b);return d});u(Node.prototype,\"appendChild\",function(b){if(b instanceof DocumentFragment){var d=Array.prototype.slice.apply(b.childNodes);b=K.call(this,b);if(p(this))for(var c=0;c<d.length;c++)A(a,d[c]);return b}d=p(b);c=K.call(this,b);d&&C(a,b);p(this)&&A(a,b);return c});u(Node.prototype,\"cloneNode\",function(b){b=ma.call(this,b);this.ownerDocument.__CE_hasRegistry?D(a,b):x(a,\nb);return b});u(Node.prototype,\"removeChild\",function(b){var d=p(b),c=L.call(this,b);d&&C(a,b);return c});u(Node.prototype,\"replaceChild\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=oa.call(this,b,d);if(p(this))for(C(a,d),d=0;d<c.length;d++)A(a,c[d]);return b}c=p(b);var f=oa.call(this,b,d),l=p(this);l&&C(a,d);c&&C(a,b);l&&A(a,b);return f});M&&M.get?b(Node.prototype,M):w(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){for(var a=\n[],b=0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)L.call(this,this.firstChild);K.call(this,document.createTextNode(a))}})})};function Ja(a){var b=Element.prototype;function c(b){return function(d){for(var c=[],e=0;e<arguments.length;++e)c[e-0]=arguments[e];e=[];for(var k=[],g=0;g<c.length;g++){var h=c[g];h instanceof Element&&p(h)&&k.push(h);if(h instanceof DocumentFragment)for(h=h.firstChild;h;h=h.nextSibling)e.push(h);else e.push(h)}b.apply(this,c);for(c=0;c<k.length;c++)C(a,k[c]);if(p(this))for(c=0;c<e.length;c++)k=e[c],k instanceof Element&&A(a,k)}}void 0!==Q&&(b.before=c(Q));void 0!==Q&&(b.after=c(Aa));void 0!==Ba&&\nu(b,\"replaceWith\",function(b){for(var d=[],c=0;c<arguments.length;++c)d[c-0]=arguments[c];c=[];for(var l=[],k=0;k<d.length;k++){var g=d[k];g instanceof Element&&p(g)&&l.push(g);if(g instanceof DocumentFragment)for(g=g.firstChild;g;g=g.nextSibling)c.push(g);else c.push(g)}k=p(this);Ba.apply(this,d);for(d=0;d<l.length;d++)C(a,l[d]);if(k)for(C(a,this),d=0;d<c.length;d++)l=c[d],l instanceof Element&&A(a,l)});void 0!==Ca&&u(b,\"remove\",function(){var b=p(this);Ca.call(this);b&&C(a,this)})};function Ka(){var a=S;function b(b,c){Object.defineProperty(b,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(b){var d=this,e=void 0;p(this)&&(e=[],t(this,function(a){a!==d&&e.push(a)}));c.set.call(this,b);if(e)for(var f=0;f<e.length;f++){var h=e[f];1===h.__CE_state&&a.disconnectedCallback(h)}this.ownerDocument.__CE_hasRegistry?D(a,this):x(a,this);return b}})}function c(b,c){u(b,\"insertAdjacentElement\",function(b,d){var e=p(d);b=c.call(this,b,d);e&&C(a,d);p(b)&&A(a,d);\nreturn b})}pa&&u(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=pa.call(this,a)});N&&N.get?b(Element.prototype,N):R&&R.get?b(HTMLElement.prototype,R):w(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){return ma.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,d=b?this.content:this,c=J.call(document,this.localName);for(c.innerHTML=a;0<d.childNodes.length;)L.call(d,d.childNodes[0]);for(a=b?c.content:c;0<a.childNodes.length;)K.call(d,\na.childNodes[0])}})});u(Element.prototype,\"setAttribute\",function(b,c){if(1!==this.__CE_state)return qa.call(this,b,c);var d=O.call(this,b);qa.call(this,b,c);c=O.call(this,b);a.attributeChangedCallback(this,b,d,c,null)});u(Element.prototype,\"setAttributeNS\",function(b,c,f){if(1!==this.__CE_state)return sa.call(this,b,c,f);var d=P.call(this,b,c);sa.call(this,b,c,f);f=P.call(this,b,c);a.attributeChangedCallback(this,c,d,f,b)});u(Element.prototype,\"removeAttribute\",function(b){if(1!==this.__CE_state)return ra.call(this,\nb);var d=O.call(this,b);ra.call(this,b);null!==d&&a.attributeChangedCallback(this,b,d,null,null)});u(Element.prototype,\"removeAttributeNS\",function(b,c){if(1!==this.__CE_state)return ta.call(this,b,c);var d=P.call(this,b,c);ta.call(this,b,c);var e=P.call(this,b,c);d!==e&&a.attributeChangedCallback(this,c,d,e,b)});Ea?c(HTMLElement.prototype,Ea):xa?c(Element.prototype,xa):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");T(a,Element.prototype,{i:ya,append:za});Ja(a)}\n;var W=window.customElements;if(!W||W.forcePolyfill||\"function\"!=typeof W.define||\"function\"!=typeof W.get){var S=new v;Ga();Ha();T(S,DocumentFragment.prototype,{i:ka,append:la});Ia();Ka();document.__CE_hasRegistry=!0;var customElements=new G(S);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};/*\n\n Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar X=window.customElements,Y=window.HTMLImports,La=window.HTMLTemplateElement;window.WebComponents=window.WebComponents||{};if(X&&X.polyfillWrapFlushCallback){var Z,Ma=function(){if(Z){La.I&&La.I(window.document);var a=Z;Z=null;a();return!0}},Na=Y.whenReady;X.polyfillWrapFlushCallback(function(a){Z=a;Na(Ma)});Y.whenReady=function(a){Na(function(){Ma()?Y.whenReady(a):a()})}}\nY.whenReady(function(){requestAnimationFrame(function(){window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent(\"WebComponentsReady\",{bubbles:!0}))})});var Oa=document.createElement(\"style\");Oa.textContent=\"body {transition: opacity ease-in 0.2s; } \\nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \\n\";var Pa=document.querySelector(\"head\");Pa.insertBefore(Oa,Pa.firstChild);/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n}).call(this);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(){/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';var n,p=\"undefined\"!=typeof window&&window===this?this:\"undefined\"!=typeof global&&null!=global?global:this,aa=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function ba(){ba=function(){};p.Symbol||(p.Symbol=da)}var da=function(){var a=0;return function(b){return\"jscomp_symbol_\"+(b||\"\")+a++}}();\nfunction ea(){ba();var a=p.Symbol.iterator;a||(a=p.Symbol.iterator=p.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[a]&&aa(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return fa(this)}});ea=function(){}}function fa(a){var b=0;return ha(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function ha(a){ea();a={next:a};a[p.Symbol.iterator]=function(){return this};return a}function ia(a){ea();var b=a[Symbol.iterator];return b?b.call(a):fa(a)}\nfunction ja(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c}\n(function(a){function b(a,b){if(\"function\"===typeof window.CustomEvent)return new CustomEvent(a,b);var c=document.createEvent(\"CustomEvent\");c.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return c}function c(a){if(m)return a.ownerDocument!==document?a.ownerDocument:null;var b=a.__importDoc;if(!b&&a.parentNode){b=a.parentNode;if(\"function\"===typeof b.closest)b=b.closest(\"link[rel=import]\");else for(;!g(b)&&(b=b.parentNode););a.__importDoc=b}return b}function d(a){var b=document.querySelectorAll(\"link[rel=import]:not([import-dependency])\"),\nc=b.length;c?l(b,function(b){return h(b,function(){0===--c&&a()})}):a()}function e(a){function b(){\"loading\"!==document.readyState&&document.body&&(document.removeEventListener(\"readystatechange\",b),a())}document.addEventListener(\"readystatechange\",b);b()}function f(a){e(function(){return d(function(){return a&&a()})})}function h(a,b){if(a.__loaded)b&&b();else if(\"script\"===a.localName&&!a.src||\"style\"===a.localName&&!a.firstChild)a.__loaded=!0,b&&b();else{var c=function(d){a.removeEventListener(d.type,\nc);a.__loaded=!0;b&&b()};a.addEventListener(\"load\",c);Ja&&\"style\"===a.localName||a.addEventListener(\"error\",c)}}function g(a){return a.nodeType===Node.ELEMENT_NODE&&\"link\"===a.localName&&\"import\"===a.rel}function k(){var a=this;this.a={};this.b=0;this.f=new MutationObserver(function(b){return a.Ia(b)});this.f.observe(document.head,{childList:!0,subtree:!0});this.c(document)}function l(a,b,c){var d=a?a.length:0,e=c?-1:1;for(c=c?d-1:0;c<d&&0<=c;c+=e)b(a[c],c)}var m=\"import\"in document.createElement(\"link\"),\nq=null;!1===\"currentScript\"in document&&Object.defineProperty(document,\"currentScript\",{get:function(){return q||(\"complete\"!==document.readyState?document.scripts[document.scripts.length-1]:null)},configurable:!0});var E=/(url\\()([^)]*)(\\))/g,J=/(@import[\\s]+(?!url\\())([^;]*)(;)/g,Ld=/(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g,z={Ca:function(a,b){a.href&&a.setAttribute(\"href\",z.R(a.getAttribute(\"href\"),b));a.src&&a.setAttribute(\"src\",z.R(a.getAttribute(\"src\"),b));if(\"style\"===a.localName){var c=\nz.ma(a.textContent,b,E);a.textContent=z.ma(c,b,J)}},ma:function(a,b,c){return a.replace(c,function(a,c,d,e){a=d.replace(/[\"']/g,\"\");b&&(a=z.R(a,b));return c+\"'\"+a+\"'\"+e})},R:function(a,b){if(void 0===z.W){z.W=!1;try{var c=new URL(\"b\",\"http://a\");c.pathname=\"c%20d\";z.W=\"http://a/c%20d\"===c.href}catch(Bf){}}if(z.W)return(new URL(a,b)).href;c=z.va;c||(c=document.implementation.createHTMLDocument(\"temp\"),z.va=c,c.fa=c.createElement(\"base\"),c.head.appendChild(c.fa),c.ea=c.createElement(\"a\"));c.fa.href=\nb;c.ea.href=a;return c.ea.href||a}},Kb={async:!0,load:function(a,b,c){if(a)if(a.match(/^data:/)){a=a.split(\",\");var d=a[1];d=-1<a[0].indexOf(\";base64\")?atob(d):decodeURIComponent(d);b(d)}else{var e=new XMLHttpRequest;e.open(\"GET\",a,Kb.async);e.onload=function(){var a=e.responseURL||e.getResponseHeader(\"Location\");a&&0===a.indexOf(\"/\")&&(a=(location.origin||location.protocol+\"//\"+location.host)+a);var d=e.response||e.responseText;304===e.status||0===e.status||200<=e.status&&300>e.status?b(d,a):c(d)};\ne.send()}else c(\"error: href must be specified\")}},Ja=/Trident/.test(navigator.userAgent)||/Edge\\/\\d./i.test(navigator.userAgent);k.prototype.c=function(a){var b=this;a=a.querySelectorAll(\"link[rel=import]\");l(a,function(a){return b.F(a)})};k.prototype.F=function(a){var b=this,c=a.href;if(void 0!==this.a[c]){var d=this.a[c];d&&d.__loaded&&(a.import=d,this.l(a))}else this.b++,this.a[c]=\"pending\",Kb.load(c,function(a,d){a=b.Ja(a,d||c);b.a[c]=a;b.b--;b.c(a);b.ka()},function(){b.a[c]=null;b.b--;b.ka()})};\nk.prototype.Ja=function(a,b){if(!a)return document.createDocumentFragment();Ja&&(a=a.replace(Ld,function(a,b,c){return-1===a.indexOf(\"type=\")?b+\" type=import-disable \"+c:a}));var c=document.createElement(\"template\");c.innerHTML=a;if(c.content)a=c.content;else for(a=document.createDocumentFragment();c.firstChild;)a.appendChild(c.firstChild);if(c=a.querySelector(\"base\"))b=z.R(c.getAttribute(\"href\"),b),c.removeAttribute(\"href\");c=a.querySelectorAll('link[rel=import], link[rel=stylesheet][href][type=import-disable],\\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\\n    script:not([type]), script[type=\"application/javascript\"],\\n    script[type=\"text/javascript\"]');\nvar d=0;l(c,function(a){h(a);z.Ca(a,b);a.setAttribute(\"import-dependency\",\"\");\"script\"===a.localName&&!a.src&&a.textContent&&(a.setAttribute(\"src\",\"data:text/javascript;charset=utf-8,\"+encodeURIComponent(a.textContent+(\"\\n//# sourceURL=\"+b+(d?\"-\"+d:\"\")+\".js\\n\"))),a.textContent=\"\",d++)});return a};k.prototype.ka=function(){var a=this;if(!this.b){this.f.disconnect();this.flatten(document);var b=!1,c=!1,d=function(){c&&b&&(a.c(document),a.b||(a.f.observe(document.head,{childList:!0,subtree:!0}),a.Ha()))};\nthis.Oa(function(){c=!0;d()});this.Ka(function(){b=!0;d()})}};k.prototype.flatten=function(a){var b=this;a=a.querySelectorAll(\"link[rel=import]\");l(a,function(a){var c=b.a[a.href];(a.import=c)&&c.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&(b.a[a.href]=a,a.readyState=\"loading\",a.import=a,b.flatten(c),a.appendChild(c))})};k.prototype.Ka=function(a){function b(e){if(e<d){var f=c[e],g=document.createElement(\"script\");f.removeAttribute(\"import-dependency\");l(f.attributes,function(a){return g.setAttribute(a.name,\na.value)});q=g;f.parentNode.replaceChild(g,f);h(g,function(){q=null;b(e+1)})}else a()}var c=document.querySelectorAll(\"script[import-dependency]\"),d=c.length;b(0)};k.prototype.Oa=function(a){var b=document.querySelectorAll(\"style[import-dependency],\\n    link[rel=stylesheet][import-dependency]\"),d=b.length;if(d){var e=Ja&&!!document.querySelector(\"link[rel=stylesheet][href][type=import-disable]\");l(b,function(b){h(b,function(){b.removeAttribute(\"import-dependency\");0===--d&&a()});if(e&&b.parentNode!==\ndocument.head){var f=document.createElement(b.localName);f.__appliedElement=b;f.setAttribute(\"type\",\"import-placeholder\");b.parentNode.insertBefore(f,b.nextSibling);for(f=c(b);f&&c(f);)f=c(f);f.parentNode!==document.head&&(f=null);document.head.insertBefore(b,f);b.removeAttribute(\"type\")}})}else a()};k.prototype.Ha=function(){var a=this,b=document.querySelectorAll(\"link[rel=import]\");l(b,function(b){return a.l(b)},!0)};k.prototype.l=function(a){a.__loaded||(a.__loaded=!0,a.import&&(a.import.readyState=\n\"complete\"),a.dispatchEvent(b(a.import?\"load\":\"error\",{bubbles:!1,cancelable:!1,detail:void 0})))};k.prototype.Ia=function(a){var b=this;l(a,function(a){return l(a.addedNodes,function(a){a&&a.nodeType===Node.ELEMENT_NODE&&(g(a)?b.F(a):b.c(a))})})};if(m){var la=document.querySelectorAll(\"link[rel=import]\");l(la,function(a){a.import&&\"loading\"===a.import.readyState||(a.__loaded=!0)});la=function(a){a=a.target;g(a)&&(a.__loaded=!0)};document.addEventListener(\"load\",la,!0);document.addEventListener(\"error\",\nla,!0)}else{var ca=Object.getOwnPropertyDescriptor(Node.prototype,\"baseURI\");Object.defineProperty((!ca||ca.configurable?Node:Element).prototype,\"baseURI\",{get:function(){var a=g(this)?this:c(this);return a?a.href:ca&&ca.get?ca.get.call(this):(document.querySelector(\"base\")||window.location).href},configurable:!0,enumerable:!0});e(function(){return new k})}f(function(){return document.dispatchEvent(b(\"HTMLImportsLoaded\",{cancelable:!0,bubbles:!0,detail:void 0}))});a.useNative=m;a.whenReady=f;a.importForElement=\nc})(window.HTMLImports=window.HTMLImports||{});/*\n\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar r=window.ShadyDOM||{};r.Ea=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ka=Object.getOwnPropertyDescriptor(Node.prototype,\"firstChild\");r.G=!!(ka&&ka.configurable&&ka.get);r.la=r.force||!r.Ea;function t(a){return a.__shady&&void 0!==a.__shady.firstChild}function u(a){return\"ShadyRoot\"===a.sa}function ma(a){a=a.getRootNode();if(u(a))return a}var v=Element.prototype,na=v.matches||v.matchesSelector||v.mozMatchesSelector||v.msMatchesSelector||v.oMatchesSelector||v.webkitMatchesSelector;\nfunction oa(a,b){if(a&&b)for(var c=Object.getOwnPropertyNames(b),d=0,e;d<c.length&&(e=c[d]);d++){var f=Object.getOwnPropertyDescriptor(b,e);f&&Object.defineProperty(a,e,f)}}function pa(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];for(d=0;d<c.length;d++)oa(a,c[d]);return a}function qa(a,b){for(var c in b)a[c]=b[c]}var ra=document.createTextNode(\"\"),sa=0,ta=[];(new MutationObserver(function(){for(;ta.length;)try{ta.shift()()}catch(a){throw ra.textContent=sa++,a;}})).observe(ra,{characterData:!0});\nfunction ua(a){ta.push(a);ra.textContent=sa++}var va=!!document.contains;function wa(a,b){for(;b;){if(b==a)return!0;b=b.parentNode}return!1};var xa=[],ya;function za(a){ya||(ya=!0,ua(Aa));xa.push(a)}function Aa(){ya=!1;for(var a=!!xa.length;xa.length;)xa.shift()();return a}Aa.list=xa;function Ba(){this.a=!1;this.addedNodes=[];this.removedNodes=[];this.N=new Set}function Ca(a){a.a||(a.a=!0,ua(function(){Da(a)}))}function Da(a){if(a.a){a.a=!1;var b=a.takeRecords();b.length&&a.N.forEach(function(a){a(b)})}}Ba.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var a=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];this.addedNodes=[];this.removedNodes=[];return a}return[]};\nfunction Ea(a,b){a.__shady=a.__shady||{};a.__shady.H||(a.__shady.H=new Ba);a.__shady.H.N.add(b);var c=a.__shady.H;return{wa:b,w:c,ya:a,takeRecords:function(){return c.takeRecords()}}}function Fa(a){var b=a&&a.w;b&&(b.N.delete(a.wa),b.N.size||(a.ya.__shady.H=null))}\nfunction Ga(a,b){var c=b.getRootNode();return a.map(function(a){var b=c===a.target.getRootNode();if(b&&a.addedNodes){if(b=Array.from(a.addedNodes).filter(function(a){return c===a.getRootNode()}),b.length)return a=Object.create(a),Object.defineProperty(a,\"addedNodes\",{value:b,configurable:!0}),a}else if(b)return a}).filter(function(a){return a})};var w={},Ha=Element.prototype.insertBefore,Ia=Element.prototype.removeChild,Ka=Element.prototype.setAttribute,La=Element.prototype.removeAttribute,Ma=Element.prototype.cloneNode,Na=Document.prototype.importNode,Oa=Element.prototype.addEventListener,Pa=Element.prototype.removeEventListener,Qa=Window.prototype.addEventListener,Ra=Window.prototype.removeEventListener,Sa=Element.prototype.dispatchEvent,Ta=Element.prototype.querySelector,Ua=Element.prototype.querySelectorAll,Va=Node.prototype.contains||\nHTMLElement.prototype.contains;w.appendChild=Element.prototype.appendChild;w.insertBefore=Ha;w.removeChild=Ia;w.setAttribute=Ka;w.removeAttribute=La;w.cloneNode=Ma;w.importNode=Na;w.addEventListener=Oa;w.removeEventListener=Pa;w.Ta=Qa;w.Ua=Ra;w.dispatchEvent=Sa;w.querySelector=Ta;w.querySelectorAll=Ua;w.contains=Va;var Wa=/[&\\u00A0\"]/g,Xa=/[&\\u00A0<>]/g;function Ya(a){switch(a){case \"&\":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Za(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var $a=Za(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),ab=Za(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction bb(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,h;e<f&&(h=d[e]);e++){a:{var g=h;var k=a;var l=b;switch(g.nodeType){case Node.ELEMENT_NODE:for(var m=g.localName,q=\"<\"+m,E=g.attributes,J=0;k=E[J];J++)q+=\" \"+k.name+'=\"'+k.value.replace(Wa,Ya)+'\"';q+=\">\";g=$a[m]?q:q+bb(g,l)+\"</\"+m+\">\";break a;case Node.TEXT_NODE:g=g.data;g=k&&ab[k.localName]?g:g.replace(Xa,Ya);break a;case Node.COMMENT_NODE:g=\"\\x3c!--\"+g.data+\"--\\x3e\";break a;default:throw window.console.error(g),\nError(\"not implemented\");}}c+=g}return c};var x={},y=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),A=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1);function cb(a){var b=[];y.currentNode=a;for(a=y.firstChild();a;)b.push(a),a=y.nextSibling();return b}x.parentNode=function(a){y.currentNode=a;return y.parentNode()};x.firstChild=function(a){y.currentNode=a;return y.firstChild()};x.lastChild=function(a){y.currentNode=a;return y.lastChild()};x.previousSibling=function(a){y.currentNode=a;return y.previousSibling()};\nx.nextSibling=function(a){y.currentNode=a;return y.nextSibling()};x.childNodes=cb;x.parentElement=function(a){A.currentNode=a;return A.parentNode()};x.firstElementChild=function(a){A.currentNode=a;return A.firstChild()};x.lastElementChild=function(a){A.currentNode=a;return A.lastChild()};x.previousElementSibling=function(a){A.currentNode=a;return A.previousSibling()};x.nextElementSibling=function(a){A.currentNode=a;return A.nextSibling()};\nx.children=function(a){var b=[];A.currentNode=a;for(a=A.firstChild();a;)b.push(a),a=A.nextSibling();return b};x.innerHTML=function(a){return bb(a,function(a){return cb(a)})};x.textContent=function(a){switch(a.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:a=document.createTreeWalker(a,NodeFilter.SHOW_TEXT,null,!1);for(var b=\"\",c;c=a.nextNode();)b+=c.nodeValue;return b;default:return a.nodeValue}};var db=Object.getOwnPropertyDescriptor(Element.prototype,\"innerHTML\")||Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"innerHTML\"),eb=document.implementation.createHTMLDocument(\"inert\"),fb=Object.getOwnPropertyDescriptor(Document.prototype,\"activeElement\"),gb={parentElement:{get:function(){var a=this.__shady&&this.__shady.parentNode;a&&a.nodeType!==Node.ELEMENT_NODE&&(a=null);return void 0!==a?a:x.parentElement(this)},configurable:!0},parentNode:{get:function(){var a=this.__shady&&this.__shady.parentNode;\nreturn void 0!==a?a:x.parentNode(this)},configurable:!0},nextSibling:{get:function(){var a=this.__shady&&this.__shady.nextSibling;return void 0!==a?a:x.nextSibling(this)},configurable:!0},previousSibling:{get:function(){var a=this.__shady&&this.__shady.previousSibling;return void 0!==a?a:x.previousSibling(this)},configurable:!0},className:{get:function(){return this.getAttribute(\"class\")||\"\"},set:function(a){this.setAttribute(\"class\",a)},configurable:!0},nextElementSibling:{get:function(){if(this.__shady&&\nvoid 0!==this.__shady.nextSibling){for(var a=this.nextSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return x.nextElementSibling(this)},configurable:!0},previousElementSibling:{get:function(){if(this.__shady&&void 0!==this.__shady.previousSibling){for(var a=this.previousSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return x.previousElementSibling(this)},configurable:!0}},hb={childNodes:{get:function(){if(t(this)){if(!this.__shady.childNodes){this.__shady.childNodes=\n[];for(var a=this.firstChild;a;a=a.nextSibling)this.__shady.childNodes.push(a)}var b=this.__shady.childNodes}else b=x.childNodes(this);b.item=function(a){return b[a]};return b},configurable:!0},childElementCount:{get:function(){return this.children.length},configurable:!0},firstChild:{get:function(){var a=this.__shady&&this.__shady.firstChild;return void 0!==a?a:x.firstChild(this)},configurable:!0},lastChild:{get:function(){var a=this.__shady&&this.__shady.lastChild;return void 0!==a?a:x.lastChild(this)},\nconfigurable:!0},textContent:{get:function(){if(t(this)){for(var a=[],b=0,c=this.childNodes,d;d=c[b];b++)d.nodeType!==Node.COMMENT_NODE&&a.push(d.textContent);return a.join(\"\")}return x.textContent(this)},set:function(a){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(;this.firstChild;)this.removeChild(this.firstChild);(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.appendChild(document.createTextNode(a));break;default:this.nodeValue=a}},configurable:!0},firstElementChild:{get:function(){if(this.__shady&&\nvoid 0!==this.__shady.firstChild){for(var a=this.firstChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return x.firstElementChild(this)},configurable:!0},lastElementChild:{get:function(){if(this.__shady&&void 0!==this.__shady.lastChild){for(var a=this.lastChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return x.lastElementChild(this)},configurable:!0},children:{get:function(){var a;t(this)?a=Array.prototype.filter.call(this.childNodes,function(a){return a.nodeType===\nNode.ELEMENT_NODE}):a=x.children(this);a.item=function(b){return a[b]};return a},configurable:!0},innerHTML:{get:function(){var a=\"template\"===this.localName?this.content:this;return t(this)?bb(a):x.innerHTML(a)},set:function(a){for(var b=\"template\"===this.localName?this.content:this;b.firstChild;)b.removeChild(b.firstChild);var c=this.localName;c&&\"template\"!==c||(c=\"div\");c=eb.createElement(c);for(db&&db.set?db.set.call(c,a):c.innerHTML=a;c.firstChild;)b.appendChild(c.firstChild)},configurable:!0}},\nib={shadowRoot:{get:function(){return this.__shady&&this.__shady.Ma||null},configurable:!0}},jb={activeElement:{get:function(){var a=fb&&fb.get?fb.get.call(document):r.G?void 0:document.activeElement;if(a&&a.nodeType){var b=!!u(this);if(this===document||b&&this.host!==a&&w.contains.call(this.host,a)){for(b=ma(a);b&&b!==this;)a=b.host,b=ma(a);a=this===document?b?null:a:b===this?a:null}else a=null}else a=null;return a},set:function(){},configurable:!0}};\nfunction B(a,b,c){for(var d in b){var e=Object.getOwnPropertyDescriptor(a,d);e&&e.configurable||!e&&c?Object.defineProperty(a,d,b[d]):c&&console.warn(\"Could not define\",d,\"on\",a)}}function C(a){B(a,gb);B(a,hb);B(a,jb)}var kb=r.G?function(){}:function(a){a.__shady&&a.__shady.ta||(a.__shady=a.__shady||{},a.__shady.ta=!0,B(a,gb,!0))},lb=r.G?function(){}:function(a){a.__shady&&a.__shady.ra||(a.__shady=a.__shady||{},a.__shady.ra=!0,B(a,hb,!0),B(a,ib,!0))};function mb(a,b,c){kb(a);c=c||null;a.__shady=a.__shady||{};b.__shady=b.__shady||{};c&&(c.__shady=c.__shady||{});a.__shady.previousSibling=c?c.__shady.previousSibling:b.lastChild;var d=a.__shady.previousSibling;d&&d.__shady&&(d.__shady.nextSibling=a);(d=a.__shady.nextSibling=c)&&d.__shady&&(d.__shady.previousSibling=a);a.__shady.parentNode=b;c?c===b.__shady.firstChild&&(b.__shady.firstChild=a):(b.__shady.lastChild=a,b.__shady.firstChild||(b.__shady.firstChild=a));b.__shady.childNodes=null}\nfunction nb(a){if(!a.__shady||void 0===a.__shady.firstChild){a.__shady=a.__shady||{};a.__shady.firstChild=x.firstChild(a);a.__shady.lastChild=x.lastChild(a);lb(a);for(var b=a.__shady.childNodes=x.childNodes(a),c=0,d;c<b.length&&(d=b[c]);c++)d.__shady=d.__shady||{},d.__shady.parentNode=a,d.__shady.nextSibling=b[c+1]||null,d.__shady.previousSibling=b[c-1]||null,kb(d)}};function ob(a,b,c){if(b===a)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");if(c){var d=c.__shady&&c.__shady.parentNode;if(void 0!==d&&d!==a||void 0===d&&x.parentNode(c)!==a)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(c===b)return b;b.parentNode&&pb(b.parentNode,b);d=ma(a);var e;if(e=d)a:{if(!b.__noInsertionPoint){var f;\"slot\"===b.localName?f=[b]:\nb.querySelectorAll&&(f=b.querySelectorAll(\"slot\"));if(f&&f.length){e=f;break a}}e=void 0}(f=e)&&d.C.push.apply(d.C,[].concat(f instanceof Array?f:ja(ia(f))));d&&(\"slot\"===a.localName||f)&&D(d);if(t(a)){d=c;lb(a);a.__shady=a.__shady||{};void 0!==a.__shady.firstChild&&(a.__shady.childNodes=null);if(b.nodeType===Node.DOCUMENT_FRAGMENT_NODE){f=b.childNodes;for(e=0;e<f.length;e++)mb(f[e],a,d);b.__shady=b.__shady||{};d=void 0!==b.__shady.firstChild?null:void 0;b.__shady.firstChild=b.__shady.lastChild=d;\nb.__shady.childNodes=d}else mb(b,a,d);if(qb(a)){D(a.__shady.root);var h=!0}else a.__shady.root&&(h=!0)}h||(h=u(a)?a.host:a,c?(c=rb(c),w.insertBefore.call(h,b,c)):w.appendChild.call(h,b));sb(a,b);return b}\nfunction pb(a,b){if(b.parentNode!==a)throw Error(\"The node to be removed is not a child of this node: \"+b);var c=ma(b);if(t(a)){b.__shady=b.__shady||{};a.__shady=a.__shady||{};b===a.__shady.firstChild&&(a.__shady.firstChild=b.__shady.nextSibling);b===a.__shady.lastChild&&(a.__shady.lastChild=b.__shady.previousSibling);var d=b.__shady.previousSibling,e=b.__shady.nextSibling;d&&(d.__shady=d.__shady||{},d.__shady.nextSibling=e);e&&(e.__shady=e.__shady||{},e.__shady.previousSibling=d);b.__shady.parentNode=\nb.__shady.previousSibling=b.__shady.nextSibling=void 0;void 0!==a.__shady.childNodes&&(a.__shady.childNodes=null);if(qb(a)){D(a.__shady.root);var f=!0}}tb(b);if(c){(d=a&&\"slot\"===a.localName)&&(f=!0);ub(c);e=c.i;for(var h in e)for(var g=e[h],k=0;k<g.length;k++){var l=g[k];if(wa(b,l)){g.splice(k,1);var m=c.m.indexOf(l);0<=m&&c.m.splice(m,1);k--;if(m=l.__shady.D)for(l=0;l<m.length;l++){var q=m[l],E=x.parentNode(q);E&&w.removeChild.call(E,q)}m=!0}}(m||d)&&D(c)}f||(f=u(a)?a.host:a,(!a.__shady.root&&\"slot\"!==\nb.localName||f===x.parentNode(b))&&w.removeChild.call(f,b));sb(a,null,b);return b}function tb(a){if(a.__shady&&void 0!==a.__shady.da)for(var b=a.childNodes,c=0,d=b.length,e;c<d&&(e=b[c]);c++)tb(e);a.__shady&&(a.__shady.da=void 0)}function rb(a){var b=a;a&&\"slot\"===a.localName&&(b=(b=a.__shady&&a.__shady.D)&&b.length?b[0]:rb(a.nextSibling));return b}function qb(a){return(a=a&&a.__shady&&a.__shady.root)&&vb(a)}\nfunction wb(a,b){if(\"slot\"===b)a=a.parentNode,qb(a)&&D(a.__shady.root);else if(\"slot\"===a.localName&&\"name\"===b&&(b=ma(a))){var c=a.ua,d=xb(a);if(d!==c){c=b.i[c];var e=c.indexOf(a);0<=e&&c.splice(e,1);c=b.i[d]||(b.i[d]=[]);c.push(a);1<c.length&&(b.i[d]=yb(c))}D(b)}}function sb(a,b,c){if(a=a.__shady&&a.__shady.H)b&&a.addedNodes.push(b),c&&a.removedNodes.push(c),Ca(a)}\nfunction zb(a){if(a&&a.nodeType){a.__shady=a.__shady||{};var b=a.__shady.da;void 0===b&&(u(a)?b=a:b=(b=a.parentNode)?zb(b):a,w.contains.call(document.documentElement,a)&&(a.__shady.da=b));return b}}function Ab(a,b,c){var d=[];Bb(a.childNodes,b,c,d);return d}function Bb(a,b,c,d){for(var e=0,f=a.length,h;e<f&&(h=a[e]);e++){var g;if(g=h.nodeType===Node.ELEMENT_NODE){g=h;var k=b,l=c,m=d,q=k(g);q&&m.push(g);l&&l(q)?g=q:(Bb(g.childNodes,k,l,m),g=void 0)}if(g)break}}var Cb=null;\nfunction Db(a,b,c){Cb||(Cb=window.ShadyCSS&&window.ShadyCSS.ScopingShim);Cb&&\"class\"===b?Cb.setElementClass(a,c):(w.setAttribute.call(a,b,c),wb(a,b))}function Eb(a,b){if(a.ownerDocument!==document)return w.importNode.call(document,a,b);var c=w.importNode.call(document,a,!1);if(b){a=a.childNodes;b=0;for(var d;b<a.length;b++)d=Eb(a[b],!0),c.appendChild(d)}return c};var Fb=\"__eventWrappers\"+Date.now(),Gb={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,\ndragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0};function Hb(a,b){var c=[],d=a;for(a=a===window?window:a.getRootNode();d;)c.push(d),d=d.assignedSlot?d.assignedSlot:d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&d.host&&(b||d!==a)?d.host:d.parentNode;c[c.length-1]===document&&c.push(window);return c}\nfunction Ib(a,b){if(!u)return a;a=Hb(a,!0);for(var c=0,d,e,f,h;c<b.length;c++)if(d=b[c],f=d===window?window:d.getRootNode(),f!==e&&(h=a.indexOf(f),e=f),!u(f)||-1<h)return d}\nvar Jb={get composed(){!1!==this.isTrusted&&void 0===this.S&&(this.S=Gb[this.type]);return this.S||!1},composedPath:function(){this.ga||(this.ga=Hb(this.__target,this.composed));return this.ga},get target(){return Ib(this.currentTarget,this.composedPath())},get relatedTarget(){if(!this.U)return null;this.ha||(this.ha=Hb(this.U,!0));return Ib(this.currentTarget,this.ha)},stopPropagation:function(){Event.prototype.stopPropagation.call(this);this.T=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this);\nthis.T=this.qa=!0}};function Lb(a){function b(b,d){b=new a(b,d);b.S=d&&!!d.composed;return b}qa(b,a);b.prototype=a.prototype;return b}var Mb={focus:!0,blur:!0};function Nb(a){return a.__target!==a.target||a.U!==a.relatedTarget}function Ob(a,b,c){if(c=b.__handlers&&b.__handlers[a.type]&&b.__handlers[a.type][c])for(var d=0,e;(e=c[d])&&(!Nb(a)||a.target!==a.relatedTarget)&&(e.call(b,a),!a.qa);d++);}\nfunction Pb(a){var b=a.composedPath();Object.defineProperty(a,\"currentTarget\",{get:function(){return d},configurable:!0});for(var c=b.length-1;0<=c;c--){var d=b[c];Ob(a,d,\"capture\");if(a.T)return}Object.defineProperty(a,\"eventPhase\",{get:function(){return Event.AT_TARGET}});var e;for(c=0;c<b.length;c++){d=b[c];var f=d.__shady&&d.__shady.root;if(0===c||f&&f===e)if(Ob(a,d,\"bubble\"),d!==window&&(e=d.getRootNode()),a.T)break}}\nfunction Qb(a,b,c,d,e,f){for(var h=0;h<a.length;h++){var g=a[h],k=g.type,l=g.capture,m=g.once,q=g.passive;if(b===g.node&&c===k&&d===l&&e===m&&f===q)return h}return-1}\nfunction Rb(a,b,c){if(b){if(c&&\"object\"===typeof c){var d=!!c.capture;var e=!!c.once;var f=!!c.passive}else d=!!c,f=e=!1;var h=c&&c.V||this,g=b[Fb];if(g){if(-1<Qb(g,h,a,d,e,f))return}else b[Fb]=[];g=function(d){e&&this.removeEventListener(a,b,c);d.__target||Sb(d);if(h!==this){var f=Object.getOwnPropertyDescriptor(d,\"currentTarget\");Object.defineProperty(d,\"currentTarget\",{get:function(){return h},configurable:!0})}if(d.composed||-1<d.composedPath().indexOf(h))if(Nb(d)&&d.target===d.relatedTarget)d.eventPhase===\nEvent.BUBBLING_PHASE&&d.stopImmediatePropagation();else if(d.eventPhase===Event.CAPTURING_PHASE||d.bubbles||d.target===h||h instanceof Window){var g=\"object\"===typeof b&&b.handleEvent?b.handleEvent(d):b.call(h,d);h!==this&&(f?(Object.defineProperty(d,\"currentTarget\",f),f=null):delete d.currentTarget);return g}};b[Fb].push({node:this,type:a,capture:d,once:e,passive:f,Va:g});Mb[a]?(this.__handlers=this.__handlers||{},this.__handlers[a]=this.__handlers[a]||{capture:[],bubble:[]},this.__handlers[a][d?\n\"capture\":\"bubble\"].push(g)):(this instanceof Window?w.Ta:w.addEventListener).call(this,a,g,c)}}\nfunction Tb(a,b,c){if(b){if(c&&\"object\"===typeof c){var d=!!c.capture;var e=!!c.once;var f=!!c.passive}else d=!!c,f=e=!1;var h=c&&c.V||this,g=void 0;var k=null;try{k=b[Fb]}catch(l){}k&&(e=Qb(k,h,a,d,e,f),-1<e&&(g=k.splice(e,1)[0].Va,k.length||(b[Fb]=void 0)));(this instanceof Window?w.Ua:w.removeEventListener).call(this,a,g||b,c);g&&Mb[a]&&this.__handlers&&this.__handlers[a]&&(a=this.__handlers[a][d?\"capture\":\"bubble\"],g=a.indexOf(g),-1<g&&a.splice(g,1))}}\nfunction Ub(){for(var a in Mb)window.addEventListener(a,function(a){a.__target||(Sb(a),Pb(a))},!0)}function Sb(a){a.__target=a.target;a.U=a.relatedTarget;if(r.G){var b=Object.getPrototypeOf(a);if(!b.hasOwnProperty(\"__patchProto\")){var c=Object.create(b);c.Xa=b;oa(c,Jb);b.__patchProto=c}a.__proto__=b.__patchProto}else oa(a,Jb)}var Vb=Lb(window.Event),Wb=Lb(window.CustomEvent),Xb=Lb(window.MouseEvent);function Yb(a,b){return{index:a,I:[],M:b}}\nfunction Zb(a,b,c,d){var e=0,f=0,h=0,g=0,k=Math.min(b-e,d-f);if(0==e&&0==f)a:{for(h=0;h<k;h++)if(a[h]!==c[h])break a;h=k}if(b==a.length&&d==c.length){g=a.length;for(var l=c.length,m=0;m<k-h&&$b(a[--g],c[--l]);)m++;g=m}e+=h;f+=h;b-=g;d-=g;if(0==b-e&&0==d-f)return[];if(e==b){for(b=Yb(e,0);f<d;)b.I.push(c[f++]);return[b]}if(f==d)return[Yb(e,b-e)];k=e;h=f;d=d-h+1;g=b-k+1;b=Array(d);for(l=0;l<d;l++)b[l]=Array(g),b[l][0]=l;for(l=0;l<g;l++)b[0][l]=l;for(l=1;l<d;l++)for(m=1;m<g;m++)if(a[k+m-1]===c[h+l-1])b[l][m]=\nb[l-1][m-1];else{var q=b[l-1][m]+1,E=b[l][m-1]+1;b[l][m]=q<E?q:E}k=b.length-1;h=b[0].length-1;d=b[k][h];for(a=[];0<k||0<h;)0==k?(a.push(2),h--):0==h?(a.push(3),k--):(g=b[k-1][h-1],l=b[k-1][h],m=b[k][h-1],q=l<m?l<g?l:g:m<g?m:g,q==g?(g==d?a.push(0):(a.push(1),d=g),k--,h--):q==l?(a.push(3),k--,d=l):(a.push(2),h--,d=m));a.reverse();b=void 0;k=[];for(h=0;h<a.length;h++)switch(a[h]){case 0:b&&(k.push(b),b=void 0);e++;f++;break;case 1:b||(b=Yb(e,0));b.M++;e++;b.I.push(c[f]);f++;break;case 2:b||(b=Yb(e,0));\nb.M++;e++;break;case 3:b||(b=Yb(e,0)),b.I.push(c[f]),f++}b&&k.push(b);return k}function $b(a,b){return a===b};var ac={};function F(a,b,c){if(a!==ac)throw new TypeError(\"Illegal constructor\");a=document.createDocumentFragment();a.__proto__=F.prototype;a.sa=\"ShadyRoot\";nb(b);nb(a);a.host=b;a.a=c&&c.mode;b.__shady=b.__shady||{};b.__shady.root=a;b.__shady.Ma=\"closed\"!==a.a?a:null;a.L=!1;a.m=[];a.i={};a.C=[];c=x.childNodes(b);for(var d=0,e=c.length;d<e;d++)w.removeChild.call(b,c[d]);return a}F.prototype=Object.create(DocumentFragment.prototype);function D(a){a.L||(a.L=!0,za(function(){return bc(a)}))}\nfunction bc(a){for(var b;a;){a.L&&(b=a);a:{var c=a;a=c.host.getRootNode();if(u(a))for(var d=c.host.childNodes,e=0;e<d.length;e++)if(c=d[e],\"slot\"==c.localName)break a;a=void 0}}b&&b._renderRoot()}\nF.prototype._renderRoot=function(){this.L=!1;ub(this);for(var a=0,b;a<this.m.length;a++){b=this.m[a];var c=b.__shady.assignedNodes;b.__shady.assignedNodes=[];b.__shady.D=[];if(b.__shady.ia=c)for(var d=0;d<c.length;d++){var e=c[d];e.__shady.$=e.__shady.assignedSlot;e.__shady.assignedSlot===b&&(e.__shady.assignedSlot=null)}}for(b=this.host.firstChild;b;b=b.nextSibling)cc(this,b);for(a=0;a<this.m.length;a++){b=this.m[a];if(!b.__shady.assignedNodes.length)for(c=b.firstChild;c;c=c.nextSibling)cc(this,\nc,b);c=b.parentNode;(c=c.__shady&&c.__shady.root)&&vb(c)&&c._renderRoot();dc(this,b.__shady.D,b.__shady.assignedNodes);if(c=b.__shady.ia){for(d=0;d<c.length;d++)c[d].__shady.$=null;b.__shady.ia=null;c.length>b.__shady.assignedNodes.length&&(b.__shady.ba=!0)}b.__shady.ba&&(b.__shady.ba=!1,ec(this,b))}a=this.m;b=[];for(c=0;c<a.length;c++)d=a[c].parentNode,d.__shady&&d.__shady.root||!(0>b.indexOf(d))||b.push(d);for(a=0;a<b.length;a++){c=b[a];d=c===this?this.host:c;e=[];c=c.childNodes;for(var f=0;f<c.length;f++){var h=\nc[f];if(\"slot\"==h.localName){h=h.__shady.D;for(var g=0;g<h.length;g++)e.push(h[g])}else e.push(h)}c=void 0;f=x.childNodes(d);h=Zb(e,e.length,f,f.length);for(var k=g=0;g<h.length&&(c=h[g]);g++){for(var l=0,m;l<c.I.length&&(m=c.I[l]);l++)x.parentNode(m)===d&&w.removeChild.call(d,m),f.splice(c.index+k,1);k-=c.M}for(k=0;k<h.length&&(c=h[k]);k++)for(g=f[c.index],l=c.index;l<c.index+c.M;l++)m=e[l],w.insertBefore.call(d,m,g),f.splice(l,0,m)}};\nfunction cc(a,b,c){b.__shady=b.__shady||{};var d=b.__shady.$;b.__shady.$=null;c||(c=(a=a.i[b.slot||\"__catchall\"])&&a[0]);c?(c.__shady.assignedNodes.push(b),b.__shady.assignedSlot=c):b.__shady.assignedSlot=void 0;d!==b.__shady.assignedSlot&&b.__shady.assignedSlot&&(b.__shady.assignedSlot.__shady.ba=!0)}function dc(a,b,c){for(var d=0,e;d<c.length&&(e=c[d]);d++)if(\"slot\"==e.localName){var f=e.__shady.assignedNodes;f&&f.length&&dc(a,b,f)}else b.push(c[d])}\nfunction ec(a,b){w.dispatchEvent.call(b,new Event(\"slotchange\"));b.__shady.assignedSlot&&ec(a,b.__shady.assignedSlot)}function ub(a){if(a.C.length){for(var b=a.C,c,d=0;d<b.length;d++){var e=b[d];e.__shady=e.__shady||{};nb(e);nb(e.parentNode);var f=xb(e);a.i[f]?(c=c||{},c[f]=!0,a.i[f].push(e)):a.i[f]=[e];a.m.push(e)}if(c)for(var h in c)a.i[h]=yb(a.i[h]);a.C=[]}}function xb(a){var b=a.name||a.getAttribute(\"name\")||\"__catchall\";return a.ua=b}\nfunction yb(a){return a.sort(function(a,c){a=fc(a);for(var b=fc(c),e=0;e<a.length;e++){c=a[e];var f=b[e];if(c!==f)return a=Array.from(c.parentNode.childNodes),a.indexOf(c)-a.indexOf(f)}})}function fc(a){var b=[];do b.unshift(a);while(a=a.parentNode);return b}function vb(a){ub(a);return!!a.m.length}F.prototype.addEventListener=function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.V=this;this.host.addEventListener(a,b,c)};\nF.prototype.removeEventListener=function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.V=this;this.host.removeEventListener(a,b,c)};F.prototype.getElementById=function(a){return Ab(this,function(b){return b.id==a},function(a){return!!a})[0]||null};var gc=F.prototype;B(gc,hb,!0);B(gc,jb,!0);function hc(a){var b=a.getRootNode();u(b)&&bc(b);return a.__shady&&a.__shady.assignedSlot||null}\nvar ic={addEventListener:Rb.bind(window),removeEventListener:Tb.bind(window)},jc={addEventListener:Rb,removeEventListener:Tb,appendChild:function(a){return ob(this,a)},insertBefore:function(a,b){return ob(this,a,b)},removeChild:function(a){return pb(this,a)},replaceChild:function(a,b){ob(this,a,b);pb(this,b);return a},cloneNode:function(a){if(\"template\"==this.localName)var b=w.cloneNode.call(this,a);else if(b=w.cloneNode.call(this,!1),a){a=this.childNodes;for(var c=0,d;c<a.length;c++)d=a[c].cloneNode(!0),\nb.appendChild(d)}return b},getRootNode:function(){return zb(this)},contains:function(a){return wa(this,a)},get isConnected(){var a=this.ownerDocument;if(va&&w.contains.call(a,this)||a.documentElement&&w.contains.call(a.documentElement,this))return!0;for(a=this;a&&!(a instanceof Document);)a=a.parentNode||(a instanceof F?a.host:void 0);return!!(a&&a instanceof Document)},dispatchEvent:function(a){Aa();return w.dispatchEvent.call(this,a)}},kc={get assignedSlot(){return hc(this)}},lc={querySelector:function(a){return Ab(this,\nfunction(b){return na.call(b,a)},function(a){return!!a})[0]||null},querySelectorAll:function(a){return Ab(this,function(b){return na.call(b,a)})}},mc={assignedNodes:function(a){if(\"slot\"===this.localName){var b=this.getRootNode();u(b)&&bc(b);return this.__shady?(a&&a.flatten?this.__shady.D:this.__shady.assignedNodes)||[]:[]}}},nc=pa({setAttribute:function(a,b){Db(this,a,b)},removeAttribute:function(a){w.removeAttribute.call(this,a);wb(this,a)},attachShadow:function(a){if(!this)throw\"Must provide a host.\";\nif(!a)throw\"Not enough arguments.\";return new F(ac,this,a)},get slot(){return this.getAttribute(\"slot\")},set slot(a){Db(this,\"slot\",a)},get assignedSlot(){return hc(this)}},lc,mc);Object.defineProperties(nc,ib);var oc=pa({importNode:function(a,b){return Eb(a,b)},getElementById:function(a){return Ab(this,function(b){return b.id==a},function(a){return!!a})[0]||null}},lc);Object.defineProperties(oc,{_activeElement:jb.activeElement});\nvar pc=HTMLElement.prototype.blur,qc=pa({blur:function(){var a=this.__shady&&this.__shady.root;(a=a&&a.activeElement)?a.blur():pc.call(this)}});function G(a,b){for(var c=Object.getOwnPropertyNames(b),d=0;d<c.length;d++){var e=c[d],f=Object.getOwnPropertyDescriptor(b,e);f.value?a[e]=f.value:Object.defineProperty(a,e,f)}};if(r.la){var ShadyDOM={inUse:r.la,patch:function(a){return a},isShadyRoot:u,enqueue:za,flush:Aa,settings:r,filterMutations:Ga,observeChildren:Ea,unobserveChildren:Fa,nativeMethods:w,nativeTree:x};window.ShadyDOM=ShadyDOM;window.Event=Vb;window.CustomEvent=Wb;window.MouseEvent=Xb;Ub();var rc=window.customElements&&window.customElements.nativeHTMLElement||HTMLElement;G(window.Node.prototype,jc);G(window.Window.prototype,ic);G(window.Text.prototype,kc);G(window.DocumentFragment.prototype,lc);G(window.Element.prototype,\nnc);G(window.Document.prototype,oc);window.HTMLSlotElement&&G(window.HTMLSlotElement.prototype,mc);G(rc.prototype,qc);r.G&&(C(window.Node.prototype),C(window.Text.prototype),C(window.DocumentFragment.prototype),C(window.Element.prototype),C(rc.prototype),C(window.Document.prototype),window.HTMLSlotElement&&C(window.HTMLSlotElement.prototype));window.ShadowRoot=F};var sc=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function tc(a){var b=sc.has(a);a=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(a);return!b&&a}function H(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return!(!a||!(a.__CE_isImportDocument||a instanceof Document))}\nfunction uc(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}\nfunction I(a,b,c){c=void 0===c?new Set:c;for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)I(d,b,c);d=uc(a,e);continue}else if(\"template\"===f){d=uc(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)I(e,b,c)}d=d.firstChild?d.firstChild:uc(a,d)}}function K(a,b,c){a[b]=c};function vc(){this.a=new Map;this.l=new Map;this.f=[];this.c=!1}function wc(a,b,c){a.a.set(b,c);a.l.set(c.constructor,c)}function xc(a,b){a.c=!0;a.f.push(b)}function yc(a,b){a.c&&I(b,function(b){return a.b(b)})}vc.prototype.b=function(a){if(this.c&&!a.__CE_patched){a.__CE_patched=!0;for(var b=0;b<this.f.length;b++)this.f[b](a)}};function L(a,b){var c=[];I(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):zc(a,d)}}\nfunction M(a,b){var c=[];I(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d)}}\nfunction N(a,b,c){c=void 0===c?{}:c;var d=c.Sa||new Set,e=c.oa||function(b){return zc(a,b)},f=[];I(b,function(b){if(\"link\"===b.localName&&\"import\"===b.getAttribute(\"rel\")){var c=b.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:b.addEventListener(\"load\",function(){var c=b.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);N(a,c,{Sa:f,oa:e})}})}else f.push(b)},d);if(a.c)for(b=\n0;b<f.length;b++)a.b(f[b]);for(b=0;b<f.length;b++)e(f[b])}\nfunction zc(a,b){if(void 0===b.__CE_state){var c=b.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=a.a.get(b.localName)){c.constructionStack.push(b);var d=c.constructor;try{try{if(new d!==b)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(h){throw b.__CE_state=2,h;}b.__CE_state=1;b.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\nf=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null)}H(b)&&a.connectedCallback(b)}}}vc.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a)};vc.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a)};\nvc.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,c,d,e)};function Ac(a){var b=document;this.h=a;this.a=b;this.w=void 0;N(this.h,this.a);\"loading\"===this.a.readyState&&(this.w=new MutationObserver(this.b.bind(this)),this.w.observe(this.a,{childList:!0,subtree:!0}))}function Bc(a){a.w&&a.w.disconnect()}Ac.prototype.b=function(a){var b=this.a.readyState;\"interactive\"!==b&&\"complete\"!==b||Bc(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)N(this.h,c[d])};function Cc(){var a=this;this.b=this.a=void 0;this.c=new Promise(function(b){a.b=b;a.a&&b(a.a)})}function Dc(a){if(a.a)throw Error(\"Already resolved.\");a.a=void 0;a.b&&a.b(void 0)};function O(a){this.X=!1;this.h=a;this.aa=new Map;this.Y=function(a){return a()};this.K=!1;this.Z=[];this.xa=new Ac(a)}\nO.prototype.define=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!tc(a))throw new SyntaxError(\"The element name '\"+a+\"' is not valid.\");if(this.h.a.get(a))throw Error(\"A custom element with name '\"+a+\"' has already been defined.\");if(this.X)throw Error(\"A custom element is already being defined.\");this.X=!0;try{var d=function(a){var b=e[a];if(void 0!==b&&!(b instanceof Function))throw Error(\"The '\"+a+\"' callback must be a function.\");\nreturn b},e=b.prototype;if(!(e instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");var f=d(\"connectedCallback\");var h=d(\"disconnectedCallback\");var g=d(\"adoptedCallback\");var k=d(\"attributeChangedCallback\");var l=b.observedAttributes||[]}catch(m){return}finally{this.X=!1}b={localName:a,constructor:b,connectedCallback:f,disconnectedCallback:h,adoptedCallback:g,attributeChangedCallback:k,observedAttributes:l,constructionStack:[]};wc(this.h,a,b);this.Z.push(b);\nthis.K||(this.K=!0,this.Y(function(){return Ec(c)}))};function Ec(a){if(!1!==a.K){a.K=!1;for(var b=a.Z,c=[],d=new Map,e=0;e<b.length;e++)d.set(b[e].localName,[]);N(a.h,document,{oa:function(b){if(void 0===b.__CE_state){var e=b.localName,f=d.get(e);f?f.push(b):a.h.a.get(e)&&c.push(b)}}});for(e=0;e<c.length;e++)zc(a.h,c[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=d.get(f.localName);for(var h=0;h<f.length;h++)zc(a.h,f[h]);(e=a.aa.get(e))&&Dc(e)}}}O.prototype.get=function(a){if(a=this.h.a.get(a))return a.constructor};\nO.prototype.whenDefined=function(a){if(!tc(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.aa.get(a);if(b)return b.c;b=new Cc;this.aa.set(a,b);this.h.a.get(a)&&!this.Z.some(function(b){return b.localName===a})&&Dc(b);return b.c};O.prototype.La=function(a){Bc(this.xa);var b=this.Y;this.Y=function(c){return a(function(){return b(c)})}};window.CustomElementRegistry=O;O.prototype.define=O.prototype.define;O.prototype.get=O.prototype.get;\nO.prototype.whenDefined=O.prototype.whenDefined;O.prototype.polyfillWrapFlushCallback=O.prototype.La;var Fc=window.Document.prototype.createElement,Gc=window.Document.prototype.createElementNS,Hc=window.Document.prototype.importNode,Ic=window.Document.prototype.prepend,Jc=window.Document.prototype.append,Kc=window.DocumentFragment.prototype.prepend,Lc=window.DocumentFragment.prototype.append,Mc=window.Node.prototype.cloneNode,Nc=window.Node.prototype.appendChild,Oc=window.Node.prototype.insertBefore,Pc=window.Node.prototype.removeChild,Qc=window.Node.prototype.replaceChild,Rc=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),Sc=window.Element.prototype.attachShadow,Tc=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),Uc=window.Element.prototype.getAttribute,Vc=window.Element.prototype.setAttribute,Wc=window.Element.prototype.removeAttribute,Xc=window.Element.prototype.getAttributeNS,Yc=window.Element.prototype.setAttributeNS,Zc=window.Element.prototype.removeAttributeNS,$c=window.Element.prototype.insertAdjacentElement,ad=window.Element.prototype.prepend,bd=window.Element.prototype.append,\ncd=window.Element.prototype.before,dd=window.Element.prototype.after,ed=window.Element.prototype.replaceWith,fd=window.Element.prototype.remove,gd=window.HTMLElement,hd=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),id=window.HTMLElement.prototype.insertAdjacentElement;var jd=new function(){};function kd(){var a=P;window.HTMLElement=function(){function b(){var b=this.constructor,d=a.l.get(b);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=Fc.call(document,d.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=d,a.b(e),e;d=e.length-1;var f=e[d];if(f===jd)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=jd;Object.setPrototypeOf(f,b.prototype);a.b(f);return f}b.prototype=gd.prototype;return b}()};function ld(a,b,c){function d(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];e=[];for(var f=[],l=0;l<d.length;l++){var m=d[l];m instanceof Element&&H(m)&&f.push(m);if(m instanceof DocumentFragment)for(m=m.firstChild;m;m=m.nextSibling)e.push(m);else e.push(m)}b.apply(this,d);for(d=0;d<f.length;d++)M(a,f[d]);if(H(this))for(d=0;d<e.length;d++)f=e[d],f instanceof Element&&L(a,f)}}void 0!==c.P&&(b.prepend=d(c.P));void 0!==c.append&&(b.append=d(c.append))};function md(){var a=P;K(Document.prototype,\"createElement\",function(b){if(this.__CE_hasRegistry){var c=a.a.get(b);if(c)return new c.constructor}b=Fc.call(this,b);a.b(b);return b});K(Document.prototype,\"importNode\",function(b,c){b=Hc.call(this,b,c);this.__CE_hasRegistry?N(a,b):yc(a,b);return b});K(Document.prototype,\"createElementNS\",function(b,c){if(this.__CE_hasRegistry&&(null===b||\"http://www.w3.org/1999/xhtml\"===b)){var d=a.a.get(c);if(d)return new d.constructor}b=Gc.call(this,b,c);a.b(b);return b});\nld(a,Document.prototype,{P:Ic,append:Jc})};function nd(){var a=P;function b(b,d){Object.defineProperty(b,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(b){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,b);else{var c=void 0;if(this.firstChild){var e=this.childNodes,g=e.length;if(0<g&&H(this)){c=Array(g);for(var k=0;k<g;k++)c[k]=e[k]}}d.set.call(this,b);if(c)for(b=0;b<c.length;b++)M(a,c[b])}}})}K(Node.prototype,\"insertBefore\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);\nb=Oc.call(this,b,d);if(H(this))for(d=0;d<c.length;d++)L(a,c[d]);return b}c=H(b);d=Oc.call(this,b,d);c&&M(a,b);H(this)&&L(a,b);return d});K(Node.prototype,\"appendChild\",function(b){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=Nc.call(this,b);if(H(this))for(var e=0;e<c.length;e++)L(a,c[e]);return b}c=H(b);e=Nc.call(this,b);c&&M(a,b);H(this)&&L(a,b);return e});K(Node.prototype,\"cloneNode\",function(b){b=Mc.call(this,b);this.ownerDocument.__CE_hasRegistry?N(a,b):\nyc(a,b);return b});K(Node.prototype,\"removeChild\",function(b){var c=H(b),e=Pc.call(this,b);c&&M(a,b);return e});K(Node.prototype,\"replaceChild\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=Qc.call(this,b,d);if(H(this))for(M(a,d),d=0;d<c.length;d++)L(a,c[d]);return b}c=H(b);var f=Qc.call(this,b,d),h=H(this);h&&M(a,d);c&&M(a,b);h&&L(a,b);return f});Rc&&Rc.get?b(Node.prototype,Rc):xc(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){for(var a=\n[],b=0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)Pc.call(this,this.firstChild);Nc.call(this,document.createTextNode(a))}})})};function od(a){var b=Element.prototype;function c(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];e=[];for(var g=[],k=0;k<d.length;k++){var l=d[k];l instanceof Element&&H(l)&&g.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)e.push(l);else e.push(l)}b.apply(this,d);for(d=0;d<g.length;d++)M(a,g[d]);if(H(this))for(d=0;d<e.length;d++)g=e[d],g instanceof Element&&L(a,g)}}void 0!==cd&&(b.before=c(cd));void 0!==cd&&(b.after=c(dd));void 0!==\ned&&K(b,\"replaceWith\",function(b){for(var c=[],d=0;d<arguments.length;++d)c[d-0]=arguments[d];d=[];for(var h=[],g=0;g<c.length;g++){var k=c[g];k instanceof Element&&H(k)&&h.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)d.push(k);else d.push(k)}g=H(this);ed.apply(this,c);for(c=0;c<h.length;c++)M(a,h[c]);if(g)for(M(a,this),c=0;c<d.length;c++)h=d[c],h instanceof Element&&L(a,h)});void 0!==fd&&K(b,\"remove\",function(){var b=H(this);fd.call(this);b&&M(a,this)})};function pd(){var a=P;function b(b,c){Object.defineProperty(b,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(b){var d=this,e=void 0;H(this)&&(e=[],I(this,function(a){a!==d&&e.push(a)}));c.set.call(this,b);if(e)for(var f=0;f<e.length;f++){var l=e[f];1===l.__CE_state&&a.disconnectedCallback(l)}this.ownerDocument.__CE_hasRegistry?N(a,this):yc(a,this);return b}})}function c(b,c){K(b,\"insertAdjacentElement\",function(b,d){var e=H(d);b=c.call(this,b,d);e&&M(a,d);H(b)&&L(a,d);\nreturn b})}Sc&&K(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=Sc.call(this,a)});Tc&&Tc.get?b(Element.prototype,Tc):hd&&hd.get?b(HTMLElement.prototype,hd):xc(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){return Mc.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,c=b?this.content:this,d=Fc.call(document,this.localName);for(d.innerHTML=a;0<c.childNodes.length;)Pc.call(c,c.childNodes[0]);for(a=b?d.content:d;0<a.childNodes.length;)Nc.call(c,\na.childNodes[0])}})});K(Element.prototype,\"setAttribute\",function(b,c){if(1!==this.__CE_state)return Vc.call(this,b,c);var d=Uc.call(this,b);Vc.call(this,b,c);c=Uc.call(this,b);a.attributeChangedCallback(this,b,d,c,null)});K(Element.prototype,\"setAttributeNS\",function(b,c,f){if(1!==this.__CE_state)return Yc.call(this,b,c,f);var d=Xc.call(this,b,c);Yc.call(this,b,c,f);f=Xc.call(this,b,c);a.attributeChangedCallback(this,c,d,f,b)});K(Element.prototype,\"removeAttribute\",function(b){if(1!==this.__CE_state)return Wc.call(this,\nb);var c=Uc.call(this,b);Wc.call(this,b);null!==c&&a.attributeChangedCallback(this,b,c,null,null)});K(Element.prototype,\"removeAttributeNS\",function(b,c){if(1!==this.__CE_state)return Zc.call(this,b,c);var d=Xc.call(this,b,c);Zc.call(this,b,c);var e=Xc.call(this,b,c);d!==e&&a.attributeChangedCallback(this,c,d,e,b)});id?c(HTMLElement.prototype,id):$c?c(Element.prototype,$c):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");ld(a,Element.prototype,{P:ad,append:bd});od(a)}\n;var qd=window.customElements;if(!qd||qd.forcePolyfill||\"function\"!=typeof qd.define||\"function\"!=typeof qd.get){var P=new vc;kd();md();ld(P,DocumentFragment.prototype,{P:Kc,append:Lc});nd();pd();document.__CE_hasRegistry=!0;var customElements=new O(P);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nfunction rd(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText=\"\";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName=\"\"}\nfunction sd(a){a=a.replace(td,\"\").replace(ud,\"\");var b=vd,c=a,d=new rd;d.start=0;d.end=c.length;for(var e=d,f=0,h=c.length;f<h;f++)if(\"{\"===c[f]){e.rules||(e.rules=[]);var g=e,k=g.rules[g.rules.length-1]||null;e=new rd;e.start=f+1;e.parent=g;e.previous=k;g.rules.push(e)}else\"}\"===c[f]&&(e.end=f+1,e=e.parent||d);return b(d,a)}\nfunction vd(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&(c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=wd(c),c=c.replace(xd,\" \"),c=c.substring(c.lastIndexOf(\";\")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=0===c.indexOf(\"@\"),a.atRule?0===c.indexOf(\"@media\")?a.type=yd:c.match(zd)&&(a.type=Ad,a.keyframesName=a.selector.split(xd).pop()):a.type=0===c.indexOf(\"--\")?Bd:Cd);if(c=a.rules)for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)vd(f,\nb);return a}function wd(a){return a.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(a,c){a=c;for(c=6-a.length;c--;)a=\"0\"+a;return\"\\\\\"+a})}\nfunction Dd(a,b,c){c=void 0===c?\"\":c;var d=\"\";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf(\"--\"));if(f){f=0;for(var h=e.length,g;f<h&&(g=e[f]);f++)d=Dd(g,b,d)}else b?b=a.cssText:(b=a.cssText,b=b.replace(Ed,\"\").replace(Fd,\"\"),b=b.replace(Gd,\"\").replace(Hd,\"\")),(d=b.trim())&&(d=\"  \"+d+\"\\n\")}d&&(a.selector&&(c+=a.selector+\" {\\n\"),c+=d,a.selector&&(c+=\"}\\n\\n\"));return c}\nvar Cd=1,Ad=7,yd=4,Bd=1E3,td=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,ud=/@import[^;]*;/gim,Ed=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,Fd=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,Gd=/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,Hd=/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,zd=/^@[^\\s]*keyframes/,xd=/\\s+/g;var Q=!(window.ShadyDOM&&window.ShadyDOM.inUse),Id;function Jd(a){Id=a&&a.shimcssproperties?!1:Q||!(navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/)||!window.CSS||!CSS.supports||!CSS.supports(\"box-shadow\",\"0 0 0 var(--foo)\"))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Id=window.ShadyCSS.nativeCss:window.ShadyCSS?(Jd(window.ShadyCSS),window.ShadyCSS=void 0):Jd(window.WebComponents&&window.WebComponents.flags);var R=Id;var Kd=/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi,Md=/(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,Nd=/(--[\\w-]+)\\s*([:,;)]|$)/gi,Od=/(animation\\s*:)|(animation-name\\s*:)/,Pd=/@media\\s(.*)/,Qd=/\\{[^}]*\\}/g;var Rd=new Set;function S(a,b){if(!a)return\"\";\"string\"===typeof a&&(a=sd(a));b&&T(a,b);return Dd(a,R)}function Sd(a){!a.__cssRules&&a.textContent&&(a.__cssRules=sd(a.textContent));return a.__cssRules||null}function Td(a){return!!a.parent&&a.parent.type===Ad}function T(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===yd){var h=a.selector.match(Pd);h&&(window.matchMedia(h[1]).matches||(e=!0))}f===Cd?b(a):c&&f===Ad?c(a):f===Bd&&(e=!0);if((a=a.rules)&&!e){e=0;f=a.length;for(var g;e<f&&(g=a[e]);e++)T(g,b,c,d)}}}\nfunction Ud(a,b,c,d){var e=document.createElement(\"style\");b&&e.setAttribute(\"scope\",b);e.textContent=a;Vd(e,c,d);return e}var U=null;function Vd(a,b,c){b=b||document.head;b.insertBefore(a,c&&c.nextSibling||b.firstChild);U?a.compareDocumentPosition(U)===Node.DOCUMENT_POSITION_PRECEDING&&(U=a):U=a}\nfunction Wd(a,b){var c=a.indexOf(\"var(\");if(-1===c)return b(a,\"\",\"\",\"\");a:{var d=0;var e=c+3;for(var f=a.length;e<f;e++)if(\"(\"===a[e])d++;else if(\")\"===a[e]&&0===--d)break a;e=-1}d=a.substring(c+4,e);c=a.substring(0,c);a=Wd(a.substring(e+1),b);e=d.indexOf(\",\");return-1===e?b(c,d.trim(),\"\",a):b(c,d.substring(0,e).trim(),d.substring(e+1).trim(),a)}function Xd(a,b){Q?a.setAttribute(\"class\",b):window.ShadyDOM.nativeMethods.setAttribute.call(a,\"class\",b)}\nfunction V(a){var b=a.localName,c=\"\";b?-1<b.indexOf(\"-\")||(c=b,b=a.getAttribute&&a.getAttribute(\"is\")||\"\"):(b=a.is,c=a.extends);return{is:b,J:c}};function Yd(){}function Zd(a,b,c){var d=W;a.__styleScoped?a.__styleScoped=null:$d(d,a,b||\"\",c)}function $d(a,b,c,d){b.nodeType===Node.ELEMENT_NODE&&ae(b,c,d);if(b=\"template\"===b.localName?(b.content||b.Ya).childNodes:b.children||b.childNodes)for(var e=0;e<b.length;e++)$d(a,b[e],c,d)}\nfunction ae(a,b,c){if(b)if(a.classList)c?(a.classList.remove(\"style-scope\"),a.classList.remove(b)):(a.classList.add(\"style-scope\"),a.classList.add(b));else if(a.getAttribute){var d=a.getAttribute(be);c?d&&(b=d.replace(\"style-scope\",\"\").replace(b,\"\"),Xd(a,b)):Xd(a,(d?d+\" \":\"\")+\"style-scope \"+b)}}function ce(a,b,c){var d=W,e=a.__cssBuild;Q||\"shady\"===e?b=S(b,c):(a=V(a),b=de(d,b,a.is,a.J,c)+\"\\n\\n\");return b.trim()}\nfunction de(a,b,c,d,e){var f=ee(c,d);c=c?fe+c:\"\";return S(b,function(b){b.c||(b.selector=b.j=ge(a,b,a.b,c,f),b.c=!0);e&&e(b,c,f)})}function ee(a,b){return b?\"[is=\"+a+\"]\":a}function ge(a,b,c,d,e){var f=b.selector.split(he);if(!Td(b)){b=0;for(var h=f.length,g;b<h&&(g=f[b]);b++)f[b]=c.call(a,g,d,e)}return f.join(he)}function ie(a){return a.replace(je,function(a,c,d){-1<d.indexOf(\"+\")?d=d.replace(/\\+/g,\"___\"):-1<d.indexOf(\"___\")&&(d=d.replace(/___/g,\"+\"));return\":\"+c+\"(\"+d+\")\"})}\nYd.prototype.b=function(a,b,c){var d=!1;a=a.trim();var e=je.test(a);e&&(a=a.replace(je,function(a,b,c){return\":\"+b+\"(\"+c.replace(/\\s/g,\"\")+\")\"}),a=ie(a));a=a.replace(ke,le+\" $1\");a=a.replace(me,function(a,e,g){d||(a=ne(g,e,b,c),d=d||a.stop,e=a.Ba,g=a.value);return e+g});e&&(a=ie(a));return a};\nfunction ne(a,b,c,d){var e=a.indexOf(oe);0<=a.indexOf(le)?a=pe(a,d):0!==e&&(a=c?qe(a,c):a);c=!1;0<=e&&(b=\"\",c=!0);if(c){var f=!0;c&&(a=a.replace(re,function(a,b){return\" > \"+b}))}a=a.replace(se,function(a,b,c){return'[dir=\"'+c+'\"] '+b+\", \"+b+'[dir=\"'+c+'\"]'});return{value:a,Ba:b,stop:f}}function qe(a,b){a=a.split(te);a[0]+=b;return a.join(te)}\nfunction pe(a,b){var c=a.match(ue);return(c=c&&c[2].trim()||\"\")?c[0].match(ve)?a.replace(ue,function(a,c,f){return b+f}):c.split(ve)[0]===b?c:we:a.replace(le,b)}function xe(a){a.selector===ye&&(a.selector=\"html\")}Yd.prototype.c=function(a){return a.match(oe)?this.b(a,ze):qe(a.trim(),ze)};p.Object.defineProperties(Yd.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"style-scope\"}}});\nvar je=/:(nth[-\\w]+)\\(([^)]+)\\)/,ze=\":not(.style-scope)\",he=\",\",me=/(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g,ve=/[[.:#*]/,le=\":host\",ye=\":root\",oe=\"::slotted\",ke=new RegExp(\"^(\"+oe+\")\"),ue=/(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,re=/(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,se=/(.*):dir\\((?:(ltr|rtl))\\)/,fe=\".\",te=\":\",be=\"class\",we=\"should_not_match\",W=new Yd;function Ae(a,b,c,d){this.u=a||null;this.b=b||null;this.ca=c||[];this.B=null;this.J=d||\"\";this.a=this.o=this.v=null}function X(a){return a?a.__styleInfo:null}function Be(a,b){return a.__styleInfo=b}Ae.prototype.c=function(){return this.u};Ae.prototype._getStyleRules=Ae.prototype.c;var Ce,De=window.Element.prototype;Ce=De.matches||De.matchesSelector||De.mozMatchesSelector||De.msMatchesSelector||De.oMatchesSelector||De.webkitMatchesSelector;var Ee=navigator.userAgent.match(\"Trident\");function Fe(){}function Ge(a){var b={},c=[],d=0;T(a,function(a){He(a);a.index=d++;a=a.g.cssText;for(var c;c=Nd.exec(a);){var e=c[1];\":\"!==c[2]&&(b[e]=!0)}},function(a){c.push(a)});a.b=c;a=[];for(var e in b)a.push(e);return a}\nfunction He(a){if(!a.g){var b={},c={};Ie(a,c)&&(b.s=c,a.rules=null);b.cssText=a.parsedCssText.replace(Qd,\"\").replace(Kd,\"\");a.g=b}}function Ie(a,b){var c=a.g;if(c){if(c.s)return Object.assign(b,c.s),!0}else{c=a.parsedCssText;for(var d;a=Kd.exec(c);){d=(a[2]||a[3]).trim();if(\"inherit\"!==d||\"unset\"!==d)b[a[1].trim()]=d;d=!0}return d}}\nfunction Je(a,b,c){b&&(b=0<=b.indexOf(\";\")?Ke(a,b,c):Wd(b,function(b,e,f,h){if(!e)return b+h;(e=Je(a,c[e],c))&&\"initial\"!==e?\"apply-shim-inherit\"===e&&(e=\"inherit\"):e=Je(a,c[f]||f,c)||f;return b+(e||\"\")+h}));return b&&b.trim()||\"\"}\nfunction Ke(a,b,c){b=b.split(\";\");for(var d=0,e,f;d<b.length;d++)if(e=b[d]){Md.lastIndex=0;if(f=Md.exec(e))e=Je(a,c[f[1]],c);else if(f=e.indexOf(\":\"),-1!==f){var h=e.substring(f);h=h.trim();h=Je(a,h,c)||h;e=e.substring(0,f)+h}b[d]=e&&e.lastIndexOf(\";\")===e.length-1?e.slice(0,-1):e||\"\"}return b.join(\";\")}\nfunction Le(a,b){var c={},d=[];T(a,function(a){a.g||He(a);var e=a.j||a.parsedSelector;b&&a.g.s&&e&&Ce.call(b,e)&&(Ie(a,c),a=a.index,e=parseInt(a/32,10),d[e]=(d[e]||0)|1<<a%32)},null,!0);return{s:c,key:d}}\nfunction Me(a,b,c,d){b.g||He(b);if(b.g.s){var e=V(a);a=e.is;e=e.J;e=a?ee(a,e):\"html\";var f=b.parsedSelector,h=\":host > *\"===f||\"html\"===f,g=0===f.indexOf(\":host\")&&!h;\"shady\"===c&&(h=f===e+\" > *.\"+e||-1!==f.indexOf(\"html\"),g=!h&&0===f.indexOf(e));\"shadow\"===c&&(h=\":host > *\"===f||\"html\"===f,g=g&&!h);if(h||g)c=e,g&&(Q&&!b.j&&(b.j=ge(W,b,W.b,a?fe+a:\"\",e)),c=b.j||e),d({Pa:c,Ga:g,$a:h})}}\nfunction Ne(a,b){var c={},d={},e=b&&b.__cssBuild;T(b,function(b){Me(a,b,e,function(e){Ce.call(a.Za||a,e.Pa)&&(e.Ga?Ie(b,c):Ie(b,d))})},null,!0);return{Na:d,Fa:c}}\nfunction Oe(a,b,c,d){var e=V(b),f=ee(e.is,e.J),h=new RegExp(\"(?:^|[^.#[:])\"+(b.extends?\"\\\\\"+f.slice(0,-1)+\"\\\\]\":f)+\"($|[.:[\\\\s>+~])\");e=X(b).u;var g=Pe(e,d);return ce(b,e,function(b){var e=\"\";b.g||He(b);b.g.cssText&&(e=Ke(a,b.g.cssText,c));b.cssText=e;if(!Q&&!Td(b)&&b.cssText){var k=e=b.cssText;null==b.ja&&(b.ja=Od.test(e));if(b.ja)if(null==b.O){b.O=[];for(var q in g)k=g[q],k=k(e),e!==k&&(e=k,b.O.push(q))}else{for(q=0;q<b.O.length;++q)k=g[b.O[q]],e=k(e);k=e}b.cssText=k;b.j=b.j||b.selector;e=\".\"+d;\nq=b.j.split(\",\");k=0;for(var E=q.length,J;k<E&&(J=q[k]);k++)q[k]=J.match(h)?J.replace(f,e):e+\" \"+J;b.selector=q.join(\",\")}})}function Pe(a,b){a=a.b;var c={};if(!Q&&a)for(var d=0,e=a[d];d<a.length;e=a[++d]){var f=e,h=b;f.f=new RegExp(f.keyframesName,\"g\");f.a=f.keyframesName+\"-\"+h;f.j=f.j||f.selector;f.selector=f.j.replace(f.keyframesName,f.a);c[e.keyframesName]=Qe(e)}return c}function Qe(a){return function(b){return b.replace(a.f,a.a)}}\nfunction Re(a,b){var c=Se,d=Sd(a);a.textContent=S(d,function(a){var d=a.cssText=a.parsedCssText;a.g&&a.g.cssText&&(d=d.replace(Ed,\"\").replace(Fd,\"\"),a.cssText=Ke(c,d,b))})}p.Object.defineProperties(Fe.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"x-scope\"}}});var Se=new Fe;var Te={},Ue=window.customElements;if(Ue&&!Q){var Ve=Ue.define;Ue.define=function(a,b,c){var d=document.createComment(\" Shady DOM styles for \"+a+\" \"),e=document.head;e.insertBefore(d,(U?U.nextSibling:null)||e.firstChild);U=d;Te[a]=d;return Ve.call(Ue,a,b,c)}};function We(){this.cache={}}We.prototype.store=function(a,b,c,d){var e=this.cache[a]||[];e.push({s:b,styleElement:c,o:d});100<e.length&&e.shift();this.cache[a]=e};We.prototype.fetch=function(a,b,c){if(a=this.cache[a])for(var d=a.length-1;0<=d;d--){var e=a[d],f;a:{for(f=0;f<c.length;f++){var h=c[f];if(e.s[h]!==b[h]){f=!1;break a}}f=!0}if(f)return e}};function Xe(){}\nfunction Ye(a){for(var b=0;b<a.length;b++){var c=a[b];if(c.target!==document.documentElement&&c.target!==document.head)for(var d=0;d<c.addedNodes.length;d++){var e=c.addedNodes[d];if(e.nodeType===Node.ELEMENT_NODE){var f=e.getRootNode();var h=e;var g=[];h.classList?g=Array.from(h.classList):h instanceof window.SVGElement&&h.hasAttribute(\"class\")&&(g=h.getAttribute(\"class\").split(/\\s+/));h=g;g=h.indexOf(W.a);if((h=-1<g?h[g+1]:\"\")&&f===e.ownerDocument)Zd(e,h,!0);else if(f.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&\n(f=f.host))if(f=V(f).is,h===f)for(e=window.ShadyDOM.nativeMethods.querySelectorAll.call(e,\":not(.\"+W.a+\")\"),f=0;f<e.length;f++)ae(e[f],h);else h&&Zd(e,h,!0),Zd(e,f)}}}}\nif(!Q){var Ze=new MutationObserver(Ye),$e=function(a){Ze.observe(a,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)$e(document);else{var af=function(){$e(document.body)};window.HTMLImports?window.HTMLImports.whenReady(af):requestAnimationFrame(function(){if(\"loading\"===document.readyState){var a=function(){af();document.removeEventListener(\"readystatechange\",a)};document.addEventListener(\"readystatechange\",a)}else af()})}Xe=function(){Ye(Ze.takeRecords())}}\nvar bf=Xe;var cf={};var df=Promise.resolve();function ef(a){if(a=cf[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1}function ff(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function gf(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a.b||(a.b=!0,df.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a.b=!1}))};var hf=null,jf=window.HTMLImports&&window.HTMLImports.whenReady||null,kf;function lf(a){requestAnimationFrame(function(){jf?jf(a):(hf||(hf=new Promise(function(a){kf=a}),\"complete\"===document.readyState?kf():document.addEventListener(\"readystatechange\",function(){\"complete\"===document.readyState&&kf()})),hf.then(function(){a&&a()}))})};var mf=new We;function Y(){var a=this;this.F={};this.c=document.documentElement;var b=new rd;b.rules=[];this.f=Be(this.c,new Ae(b));this.l=!1;this.b=this.a=null;lf(function(){nf(a)})}n=Y.prototype;n.pa=function(){bf()};n.Da=function(a){return Sd(a)};n.Ra=function(a){return S(a)};\nn.prepareTemplate=function(a,b,c){if(!a.f){a.f=!0;a.name=b;a.extends=c;cf[b]=a;var d=(d=a.content.querySelector(\"style\"))?d.getAttribute(\"css-build\")||\"\":\"\";var e=[];for(var f=a.content.querySelectorAll(\"style\"),h=0;h<f.length;h++){var g=f[h];if(g.hasAttribute(\"shady-unscoped\")){if(!Q){var k=g.textContent;Rd.has(k)||(Rd.add(k),k=g.cloneNode(!0),document.head.appendChild(k));g.parentNode.removeChild(g)}}else e.push(g.textContent),g.parentNode.removeChild(g)}e=e.join(\"\").trim();c={is:b,extends:c,Wa:d};\nQ||Zd(a.content,b);nf(this);f=Md.test(e)||Kd.test(e);Md.lastIndex=0;Kd.lastIndex=0;e=sd(e);f&&R&&this.a&&this.a.transformRules(e,b);a._styleAst=e;a.l=d;d=[];R||(d=Ge(a._styleAst));if(!d.length||R)e=Q?a.content:null,b=Te[b],f=ce(c,a._styleAst),b=f.length?Ud(f,c.is,e,b):void 0,a.a=b;a.c=d}};\nfunction of(a){!a.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(a.b=window.ShadyCSS.CustomStyleInterface,a.b.transformCallback=function(b){a.na(b)},a.b.validateCallback=function(){requestAnimationFrame(function(){(a.b.enqueued||a.l)&&a.A()})})}function nf(a){!a.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(a.a=window.ShadyCSS.ApplyShim,a.a.invalidCallback=ef);of(a)}\nn.A=function(){nf(this);if(this.b){var a=this.b.processStyles();if(this.b.enqueued){if(R)for(var b=0;b<a.length;b++){var c=this.b.getStyleForCustomStyle(a[b]);if(c&&R&&this.a){var d=Sd(c);nf(this);this.a.transformRules(d);c.textContent=S(d)}}else for(pf(this,this.c,this.f),b=0;b<a.length;b++)(c=this.b.getStyleForCustomStyle(a[b]))&&Re(c,this.f.v);this.b.enqueued=!1;this.l&&!R&&this.styleDocument()}}};\nn.styleElement=function(a,b){var c=V(a).is,d=X(a);if(!d){var e=V(a);d=e.is;e=e.J;var f=Te[d];d=cf[d];if(d){var h=d._styleAst;var g=d.c}d=Be(a,new Ae(h,f,g,e))}a!==this.c&&(this.l=!0);b&&(d.B=d.B||{},Object.assign(d.B,b));if(R){if(d.B){b=d.B;for(var k in b)null===k?a.style.removeProperty(k):a.style.setProperty(k,b[k])}if(((k=cf[c])||a===this.c)&&k&&k.a&&!ff(k)){if(ff(k)||k._applyShimValidatingVersion!==k._applyShimNextVersion)nf(this),this.a&&this.a.transformRules(k._styleAst,c),k.a.textContent=ce(a,\nd.u),gf(k);Q&&(c=a.shadowRoot)&&(c.querySelector(\"style\").textContent=ce(a,d.u));d.u=k._styleAst}}else if(pf(this,a,d),d.ca&&d.ca.length){c=d;k=V(a).is;d=(b=mf.fetch(k,c.v,c.ca))?b.styleElement:null;h=c.o;(g=b&&b.o)||(g=this.F[k]=(this.F[k]||0)+1,g=k+\"-\"+g);c.o=g;g=c.o;e=Se;e=d?d.textContent||\"\":Oe(e,a,c.v,g);f=X(a);var l=f.a;l&&!Q&&l!==d&&(l._useCount--,0>=l._useCount&&l.parentNode&&l.parentNode.removeChild(l));Q?f.a?(f.a.textContent=e,d=f.a):e&&(d=Ud(e,g,a.shadowRoot,f.b)):d?d.parentNode||(Ee&&\n-1<e.indexOf(\"@media\")&&(d.textContent=e),Vd(d,null,f.b)):e&&(d=Ud(e,g,null,f.b));d&&(d._useCount=d._useCount||0,f.a!=d&&d._useCount++,f.a=d);g=d;Q||(d=c.o,f=e=a.getAttribute(\"class\")||\"\",h&&(f=e.replace(new RegExp(\"\\\\s*x-scope\\\\s*\"+h+\"\\\\s*\",\"g\"),\" \")),f+=(f?\" \":\"\")+\"x-scope \"+d,e!==f&&Xd(a,f));b||mf.store(k,c.v,g,c.o)}};function qf(a,b){return(b=b.getRootNode().host)?X(b)?b:qf(a,b):a.c}\nfunction pf(a,b,c){a=qf(a,b);var d=X(a);a=Object.create(d.v||null);var e=Ne(b,c.u);b=Le(d.u,b).s;Object.assign(a,e.Fa,b,e.Na);b=c.B;for(var f in b)if((e=b[f])||0===e)a[f]=e;f=Se;b=Object.getOwnPropertyNames(a);for(e=0;e<b.length;e++)d=b[e],a[d]=Je(f,a[d],a);c.v=a}n.styleDocument=function(a){this.styleSubtree(this.c,a)};\nn.styleSubtree=function(a,b){var c=a.shadowRoot;(c||a===this.c)&&this.styleElement(a,b);if(b=c&&(c.children||c.childNodes))for(a=0;a<b.length;a++)this.styleSubtree(b[a]);else if(a=a.children||a.childNodes)for(b=0;b<a.length;b++)this.styleSubtree(a[b])};n.na=function(a){var b=this,c=Sd(a);T(c,function(a){if(Q)xe(a);else{var c=W;a.selector=a.parsedSelector;xe(a);a.selector=a.j=ge(c,a,c.c,void 0,void 0)}R&&(nf(b),b.a&&b.a.transformRule(a))});R?a.textContent=S(c):this.f.u.rules.push(c)};\nn.getComputedStyleValue=function(a,b){var c;R||(c=(X(a)||X(qf(this,a))).v[b]);return(c=c||window.getComputedStyle(a).getPropertyValue(b))?c.trim():\"\"};n.Qa=function(a,b){var c=a.getRootNode();b=b?b.split(/\\s/):[];c=c.host&&c.host.localName;if(!c){var d=a.getAttribute(\"class\");if(d){d=d.split(/\\s/);for(var e=0;e<d.length;e++)if(d[e]===W.a){c=d[e+1];break}}}c&&b.push(W.a,c);R||(c=X(a))&&c.o&&b.push(Se.a,c.o);Xd(a,b.join(\" \"))};n.za=function(a){return X(a)};Y.prototype.flush=Y.prototype.pa;\nY.prototype.prepareTemplate=Y.prototype.prepareTemplate;Y.prototype.styleElement=Y.prototype.styleElement;Y.prototype.styleDocument=Y.prototype.styleDocument;Y.prototype.styleSubtree=Y.prototype.styleSubtree;Y.prototype.getComputedStyleValue=Y.prototype.getComputedStyleValue;Y.prototype.setElementClass=Y.prototype.Qa;Y.prototype._styleInfoForNode=Y.prototype.za;Y.prototype.transformCustomStyleForDocument=Y.prototype.na;Y.prototype.getStyleAst=Y.prototype.Da;Y.prototype.styleAstToString=Y.prototype.Ra;\nY.prototype.flushCustomStyles=Y.prototype.A;Object.defineProperties(Y.prototype,{nativeShadow:{get:function(){return Q}},nativeCss:{get:function(){return R}}});var Z=new Y,rf,sf;window.ShadyCSS&&(rf=window.ShadyCSS.ApplyShim,sf=window.ShadyCSS.CustomStyleInterface);window.ShadyCSS={ScopingShim:Z,prepareTemplate:function(a,b,c){Z.A();Z.prepareTemplate(a,b,c)},styleSubtree:function(a,b){Z.A();Z.styleSubtree(a,b)},styleElement:function(a){Z.A();Z.styleElement(a)},styleDocument:function(a){Z.A();Z.styleDocument(a)},getComputedStyleValue:function(a,b){return Z.getComputedStyleValue(a,b)},nativeCss:R,nativeShadow:Q};rf&&(window.ShadyCSS.ApplyShim=rf);\nsf&&(window.ShadyCSS.CustomStyleInterface=sf);/*\n\n Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar tf=window.customElements,uf=window.HTMLImports,vf=window.HTMLTemplateElement;window.WebComponents=window.WebComponents||{};if(tf&&tf.polyfillWrapFlushCallback){var wf,xf=function(){if(wf){vf.Aa&&vf.Aa(window.document);var a=wf;wf=null;a();return!0}},yf=uf.whenReady;tf.polyfillWrapFlushCallback(function(a){wf=a;yf(xf)});uf.whenReady=function(a){yf(function(){xf()?uf.whenReady(a):a()})}}\nuf.whenReady(function(){requestAnimationFrame(function(){window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent(\"WebComponentsReady\",{bubbles:!0}))})});var zf=document.createElement(\"style\");zf.textContent=\"body {transition: opacity ease-in 0.2s; } \\nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \\n\";var Af=document.querySelector(\"head\");Af.insertBefore(zf,Af.firstChild);}).call(this);\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("(function(){/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';(function(h){function y(a,b){if(\"function\"===typeof window.CustomEvent)return new CustomEvent(a,b);var c=document.createEvent(\"CustomEvent\");c.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return c}function m(a){if(u)return a.ownerDocument!==document?a.ownerDocument:null;var b=a.__importDoc;if(!b&&a.parentNode){b=a.parentNode;if(\"function\"===typeof b.closest)b=b.closest(\"link[rel=import]\");else for(;!p(b)&&(b=b.parentNode););a.__importDoc=b}return b}function I(a){var b=document.querySelectorAll(\"link[rel=import]:not([import-dependency])\"),\nc=b.length;c?k(b,function(b){return q(b,function(){0===--c&&a()})}):a()}function z(a){function b(){\"loading\"!==document.readyState&&document.body&&(document.removeEventListener(\"readystatechange\",b),a())}document.addEventListener(\"readystatechange\",b);b()}function A(a){z(function(){return I(function(){return a&&a()})})}function q(a,b){if(a.__loaded)b&&b();else if(\"script\"===a.localName&&!a.src||\"style\"===a.localName&&!a.firstChild)a.__loaded=!0,b&&b();else{var c=function(d){a.removeEventListener(d.type,\nc);a.__loaded=!0;b&&b()};a.addEventListener(\"load\",c);v&&\"style\"===a.localName||a.addEventListener(\"error\",c)}}function p(a){return a.nodeType===Node.ELEMENT_NODE&&\"link\"===a.localName&&\"import\"===a.rel}function e(){var a=this;this.a={};this.b=0;this.h=new MutationObserver(function(b){return a.B(b)});this.h.observe(document.head,{childList:!0,subtree:!0});this.c(document)}function k(a,b,c){var d=a?a.length:0,f=c?-1:1;for(c=c?d-1:0;c<d&&0<=c;c+=f)b(a[c],c)}var u=\"import\"in document.createElement(\"link\"),\nw=null;!1===\"currentScript\"in document&&Object.defineProperty(document,\"currentScript\",{get:function(){return w||(\"complete\"!==document.readyState?document.scripts[document.scripts.length-1]:null)},configurable:!0});var J=/(url\\()([^)]*)(\\))/g,K=/(@import[\\s]+(?!url\\())([^;]*)(;)/g,L=/(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g,g={w:function(a,b){a.href&&a.setAttribute(\"href\",g.f(a.getAttribute(\"href\"),b));a.src&&a.setAttribute(\"src\",g.f(a.getAttribute(\"src\"),b));if(\"style\"===a.localName){var c=\ng.s(a.textContent,b,J);a.textContent=g.s(c,b,K)}},s:function(a,b,c){return a.replace(c,function(a,c,l,e){a=l.replace(/[\"']/g,\"\");b&&(a=g.f(a,b));return c+\"'\"+a+\"'\"+e})},f:function(a,b){if(void 0===g.g){g.g=!1;try{var c=new URL(\"b\",\"http://a\");c.pathname=\"c%20d\";g.g=\"http://a/c%20d\"===c.href}catch(d){}}if(g.g)return(new URL(a,b)).href;c=g.u;c||(c=document.implementation.createHTMLDocument(\"temp\"),g.u=c,c.j=c.createElement(\"base\"),c.head.appendChild(c.j),c.i=c.createElement(\"a\"));c.j.href=b;c.i.href=\na;return c.i.href||a}},B={async:!0,load:function(a,b,c){if(a)if(a.match(/^data:/)){a=a.split(\",\");var d=a[1];d=-1<a[0].indexOf(\";base64\")?atob(d):decodeURIComponent(d);b(d)}else{var f=new XMLHttpRequest;f.open(\"GET\",a,B.async);f.onload=function(){var a=f.responseURL||f.getResponseHeader(\"Location\");a&&0===a.indexOf(\"/\")&&(a=(location.origin||location.protocol+\"//\"+location.host)+a);var d=f.response||f.responseText;304===f.status||0===f.status||200<=f.status&&300>f.status?b(d,a):c(d)};f.send()}else c(\"error: href must be specified\")}},\nv=/Trident/.test(navigator.userAgent)||/Edge\\/\\d./i.test(navigator.userAgent);e.prototype.c=function(a){var b=this;k(a.querySelectorAll(\"link[rel=import]\"),function(a){return b.m(a)})};e.prototype.m=function(a){var b=this,c=a.href;if(void 0!==this.a[c]){var d=this.a[c];d&&d.__loaded&&(a.import=d,this.l(a))}else this.b++,this.a[c]=\"pending\",B.load(c,function(a,d){a=b.C(a,d||c);b.a[c]=a;b.b--;b.c(a);b.o()},function(){b.a[c]=null;b.b--;b.o()})};e.prototype.C=function(a,b){if(!a)return document.createDocumentFragment();\nv&&(a=a.replace(L,function(a,b,c){return-1===a.indexOf(\"type=\")?b+\" type=import-disable \"+c:a}));var c=document.createElement(\"template\");c.innerHTML=a;if(c.content)a=c.content;else for(a=document.createDocumentFragment();c.firstChild;)a.appendChild(c.firstChild);if(c=a.querySelector(\"base\"))b=g.f(c.getAttribute(\"href\"),b),c.removeAttribute(\"href\");var d=0;k(a.querySelectorAll('link[rel=import], link[rel=stylesheet][href][type=import-disable],\\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\\n    script:not([type]), script[type=\"application/javascript\"],\\n    script[type=\"text/javascript\"]'),\nfunction(a){q(a);g.w(a,b);a.setAttribute(\"import-dependency\",\"\");\"script\"===a.localName&&!a.src&&a.textContent&&(a.setAttribute(\"src\",\"data:text/javascript;charset=utf-8,\"+encodeURIComponent(a.textContent+(\"\\n//# sourceURL=\"+b+(d?\"-\"+d:\"\")+\".js\\n\"))),a.textContent=\"\",d++)});return a};e.prototype.o=function(){var a=this;if(!this.b){this.h.disconnect();this.flatten(document);var b=!1,c=!1,d=function(){c&&b&&(a.c(document),a.b||(a.h.observe(document.head,{childList:!0,subtree:!0}),a.A()))};this.F(function(){c=\n!0;d()});this.D(function(){b=!0;d()})}};e.prototype.flatten=function(a){var b=this;k(a.querySelectorAll(\"link[rel=import]\"),function(a){var c=b.a[a.href];(a.import=c)&&c.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&(b.a[a.href]=a,a.readyState=\"loading\",a.import=a,b.flatten(c),a.appendChild(c))})};e.prototype.D=function(a){function b(f){if(f<d){var l=c[f],e=document.createElement(\"script\");l.removeAttribute(\"import-dependency\");k(l.attributes,function(a){return e.setAttribute(a.name,a.value)});w=e;l.parentNode.replaceChild(e,\nl);q(e,function(){w=null;b(f+1)})}else a()}var c=document.querySelectorAll(\"script[import-dependency]\"),d=c.length;b(0)};e.prototype.F=function(a){var b=document.querySelectorAll(\"style[import-dependency],\\n    link[rel=stylesheet][import-dependency]\"),c=b.length;if(c){var d=v&&!!document.querySelector(\"link[rel=stylesheet][href][type=import-disable]\");k(b,function(b){q(b,function(){b.removeAttribute(\"import-dependency\");0===--c&&a()});if(d&&b.parentNode!==document.head){var e=document.createElement(b.localName);\ne.__appliedElement=b;e.setAttribute(\"type\",\"import-placeholder\");b.parentNode.insertBefore(e,b.nextSibling);for(e=m(b);e&&m(e);)e=m(e);e.parentNode!==document.head&&(e=null);document.head.insertBefore(b,e);b.removeAttribute(\"type\")}})}else a()};e.prototype.A=function(){var a=this;k(document.querySelectorAll(\"link[rel=import]\"),function(b){return a.l(b)},!0)};e.prototype.l=function(a){a.__loaded||(a.__loaded=!0,a.import&&(a.import.readyState=\"complete\"),a.dispatchEvent(y(a.import?\"load\":\"error\",{bubbles:!1,\ncancelable:!1,detail:void 0})))};e.prototype.B=function(a){var b=this;k(a,function(a){return k(a.addedNodes,function(a){a&&a.nodeType===Node.ELEMENT_NODE&&(p(a)?b.m(a):b.c(a))})})};if(u){k(document.querySelectorAll(\"link[rel=import]\"),function(a){a.import&&\"loading\"===a.import.readyState||(a.__loaded=!0)});var C=function(a){a=a.target;p(a)&&(a.__loaded=!0)};document.addEventListener(\"load\",C,!0);document.addEventListener(\"error\",C,!0)}else{var n=Object.getOwnPropertyDescriptor(Node.prototype,\"baseURI\");\nObject.defineProperty((!n||n.configurable?Node:Element).prototype,\"baseURI\",{get:function(){var a=p(this)?this:m(this);return a?a.href:n&&n.get?n.get.call(this):(document.querySelector(\"base\")||window.location).href},configurable:!0,enumerable:!0});z(function(){return new e})}A(function(){return document.dispatchEvent(y(\"HTMLImportsLoaded\",{cancelable:!0,bubbles:!0,detail:void 0}))});h.useNative=u;h.whenReady=A;h.importForElement=m})(window.HTMLImports=window.HTMLImports||{});/*\n\n Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar r=window.customElements,t=window.HTMLImports,x=window.HTMLTemplateElement;window.WebComponents=window.WebComponents||{};if(r&&r.polyfillWrapFlushCallback){var D,E=function(){if(D){x.v&&x.v(window.document);var h=D;D=null;h();return!0}},F=t.whenReady;r.polyfillWrapFlushCallback(function(h){D=h;F(E)});t.whenReady=function(h){F(function(){E()?t.whenReady(h):h()})}}\nt.whenReady(function(){requestAnimationFrame(function(){window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent(\"WebComponentsReady\",{bubbles:!0}))})});var G=document.createElement(\"style\");G.textContent=\"body {transition: opacity ease-in 0.2s; } \\nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \\n\";var H=document.querySelector(\"head\");H.insertBefore(G,H.firstChild);/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n}).call(this);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function(){/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';var p,q=\"undefined\"!=typeof window&&window===this?this:\"undefined\"!=typeof global&&null!=global?global:this,ba=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function ca(){ca=function(){};q.Symbol||(q.Symbol=da)}var da=function(){var a=0;return function(b){return\"jscomp_symbol_\"+(b||\"\")+a++}}();\nfunction ea(){ca();var a=q.Symbol.iterator;a||(a=q.Symbol.iterator=q.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[a]&&ba(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return fa(this)}});ea=function(){}}function fa(a){var b=0;return ha(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function ha(a){ea();a={next:a};a[q.Symbol.iterator]=function(){return this};return a}function ia(a){ea();var b=a[Symbol.iterator];return b?b.call(a):fa(a)}\nfunction ja(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c}\n(function(){if(!function(){var a=document.createEvent(\"Event\");a.initEvent(\"foo\",!0,!0);a.preventDefault();return a.defaultPrevented}()){var a=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(a.call(this),Object.defineProperty(this,\"defaultPrevented\",{get:function(){return!0},configurable:!0}))}}var b=/Trident/.test(navigator.userAgent);if(!window.CustomEvent||b&&\"function\"!==typeof window.CustomEvent)window.CustomEvent=function(a,b){b=b||{};var c=document.createEvent(\"CustomEvent\");\nc.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return c},window.CustomEvent.prototype=window.Event.prototype;if(!window.Event||b&&\"function\"!==typeof window.Event){var c=window.Event;window.Event=function(a,b){b=b||{};var c=document.createEvent(\"Event\");c.initEvent(a,!!b.bubbles,!!b.cancelable);return c};if(c)for(var d in c)window.Event[d]=c[d];window.Event.prototype=c.prototype}if(!window.MouseEvent||b&&\"function\"!==typeof window.MouseEvent){b=window.MouseEvent;window.MouseEvent=function(a,\nb){b=b||{};var c=document.createEvent(\"MouseEvent\");c.initMouseEvent(a,!!b.bubbles,!!b.cancelable,b.view||window,b.detail,b.screenX,b.screenY,b.clientX,b.clientY,b.ctrlKey,b.altKey,b.shiftKey,b.metaKey,b.button,b.relatedTarget);return c};if(b)for(d in b)window.MouseEvent[d]=b[d];window.MouseEvent.prototype=b.prototype}Array.from||(Array.from=function(a){return[].slice.call(a)});Object.assign||(Object.assign=function(a,b){for(var c=[].slice.call(arguments,1),d=0,e;d<c.length;d++)if(e=c[d])for(var f=\na,m=e,n=Object.getOwnPropertyNames(m),w=0;w<n.length;w++)e=n[w],f[e]=m[e];return a})})(window.WebComponents);(function(){function a(){}function b(a,b){switch(a.nodeType){case Node.DOCUMENT_NODE:return w.call(a,b);case Node.DOCUMENT_FRAGMENT_NODE:return I.call(a,b);default:return n.call(a,b)}}var c=\"undefined\"===typeof HTMLTemplateElement,d=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),e=!1;/Trident/.test(navigator.userAgent)&&function(){function a(a,b){if(a instanceof DocumentFragment)for(var d;d=a.firstChild;)c.call(this,d,b);else c.call(this,a,b);return a}e=!0;var b=Node.prototype.cloneNode;\nNode.prototype.cloneNode=function(a){a=b.call(this,a);this instanceof DocumentFragment&&(a.__proto__=DocumentFragment.prototype);return a};DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll;DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector;Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},configurable:!0},nodeName:{get:function(){return\"#document-fragment\"},\nconfigurable:!0}});var c=Node.prototype.insertBefore;Node.prototype.insertBefore=a;var d=Node.prototype.appendChild;Node.prototype.appendChild=function(b){b instanceof DocumentFragment?a.call(this,b,null):d.call(this,b);return b};var f=Node.prototype.removeChild,h=Node.prototype.replaceChild;Node.prototype.replaceChild=function(b,c){b instanceof DocumentFragment?(a.call(this,b,c),f.call(this,c)):h.call(this,b,c);return c};Document.prototype.createDocumentFragment=function(){var a=this.createElement(\"df\");\na.__proto__=DocumentFragment.prototype;return a};var g=Document.prototype.importNode;Document.prototype.importNode=function(a,b){b=g.call(this,a,b||!1);a instanceof DocumentFragment&&(b.__proto__=DocumentFragment.prototype);return b}}();var f=Node.prototype.cloneNode,h=Document.prototype.createElement,g=Document.prototype.importNode,k=Node.prototype.removeChild,l=Node.prototype.appendChild,m=Node.prototype.replaceChild,n=Element.prototype.querySelectorAll,w=Document.prototype.querySelectorAll,I=DocumentFragment.prototype.querySelectorAll,\nZa=function(){if(!c){var a=document.createElement(\"template\"),b=document.createElement(\"template\");b.content.appendChild(document.createElement(\"div\"));a.content.appendChild(b);a=a.cloneNode(!0);return 0===a.content.childNodes.length||0===a.content.firstChild.content.childNodes.length||d}}();if(c){var t=document.implementation.createHTMLDocument(\"template\"),na=!0,aa=document.createElement(\"style\");aa.textContent=\"template{display:none;}\";var T=document.head;T.insertBefore(aa,T.firstElementChild);\na.prototype=Object.create(HTMLElement.prototype);var U=!document.createElement(\"div\").hasOwnProperty(\"innerHTML\");a.D=function(b){if(!b.content){b.content=t.createDocumentFragment();for(var c;c=b.firstChild;)l.call(b.content,c);if(U)b.__proto__=a.prototype;else if(b.cloneNode=function(b){return a.a(this,b)},na)try{nc(b),oc(b)}catch(Ng){na=!1}a.J(b.content)}};var nc=function(b){Object.defineProperty(b,\"innerHTML\",{get:function(){for(var a=\"\",b=this.content.firstChild;b;b=b.nextSibling)a+=b.outerHTML||\nb.data.replace(Ge,pc);return a},set:function(b){t.body.innerHTML=b;for(a.J(t);this.content.firstChild;)k.call(this.content,this.content.firstChild);for(;t.body.firstChild;)l.call(this.content,t.body.firstChild)},configurable:!0})},oc=function(a){Object.defineProperty(a,\"outerHTML\",{get:function(){return\"<template>\"+this.innerHTML+\"</template>\"},set:function(a){if(this.parentNode){t.body.innerHTML=a;for(a=this.ownerDocument.createDocumentFragment();t.body.firstChild;)l.call(a,t.body.firstChild);m.call(this.parentNode,\na,this)}else throw Error(\"Failed to set the 'outerHTML' property on 'Element': This element has no parent node.\");},configurable:!0})};nc(a.prototype);oc(a.prototype);a.J=function(c){c=b(c,\"template\");for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)a.D(f)};document.addEventListener(\"DOMContentLoaded\",function(){a.J(document)});Document.prototype.createElement=function(){var b=h.apply(this,arguments);\"template\"===b.localName&&a.D(b);return b};var Ge=/[&\\u00A0<>]/g,pc=function(a){switch(a){case \"&\":return\"&amp;\";\ncase \"<\":return\"&lt;\";case \">\":return\"&gt;\";case \"\\u00a0\":return\"&nbsp;\"}}}if(c||Za){a.a=function(a,b){var c=f.call(a,!1);this.D&&this.D(c);b&&(l.call(c.content,f.call(a.content,!0)),$a(c.content,a.content));return c};var $a=function(c,d){if(d.querySelectorAll&&(d=b(d,\"template\"),0!==d.length)){c=b(c,\"template\");for(var e=0,f=c.length,h,g;e<f;e++)g=d[e],h=c[e],a&&a.D&&a.D(g),m.call(h.parentNode,He.call(g,!0),h)}},He=Node.prototype.cloneNode=function(b){if(!e&&d&&this instanceof DocumentFragment)if(b)var c=\nIe.call(this.ownerDocument,this,!0);else return this.ownerDocument.createDocumentFragment();else this.nodeType===Node.ELEMENT_NODE&&\"template\"===this.localName?c=a.a(this,b):c=f.call(this,b);b&&$a(c,this);return c},Ie=Document.prototype.importNode=function(b,c){c=c||!1;if(\"template\"===b.localName)return a.a(b,c);var d=g.call(this,b,c);c&&$a(d,b);return d}}c&&(window.HTMLTemplateElement=a)})();var ka;Array.isArray?ka=Array.isArray:ka=function(a){return\"[object Array]\"===Object.prototype.toString.call(a)};var la=ka;var ma=0,oa,pa=\"undefined\"!==typeof window?window:void 0,qa=pa||{},ra=qa.MutationObserver||qa.WebKitMutationObserver,sa=\"undefined\"!==typeof Uint8ClampedArray&&\"undefined\"!==typeof importScripts&&\"undefined\"!==typeof MessageChannel;function ta(){return\"undefined\"!==typeof oa?function(){oa(ua)}:va()}function wa(){var a=0,b=new ra(ua),c=document.createTextNode(\"\");b.observe(c,{characterData:!0});return function(){c.data=a=++a%2}}\nfunction xa(){var a=new MessageChannel;a.port1.onmessage=ua;return function(){return a.port2.postMessage(0)}}function va(){var a=setTimeout;return function(){return a(ua,1)}}var ya=Array(1E3);function ua(){for(var a=0;a<ma;a+=2)(0,ya[a])(ya[a+1]),ya[a]=void 0,ya[a+1]=void 0;ma=0}var za,Aa;\nif(\"undefined\"===typeof self&&\"undefined\"!==typeof process&&\"[object process]\"==={}.toString.call(process))Aa=function(){return process.jb(ua)};else{var Ba;if(ra)Ba=wa();else{var Ca;if(sa)Ca=xa();else{var Da;if(void 0===pa&&\"function\"===\"function\")try{var Ea=__webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"vertx\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));oa=Ea.lb||Ea.kb;Da=ta()}catch(a){Da=va()}else Da=va();Ca=Da}Ba=Ca}Aa=Ba}za=Aa;function Fa(a,b){ya[ma]=a;ya[ma+1]=b;ma+=2;2===ma&&za()};function Ga(a,b){var c=this,d=new this.constructor(Ha);void 0===d[Ia]&&Ja(d);var e=c.g;if(e){var f=arguments[e-1];Fa(function(){return Ka(e,d,f,c.f)})}else La(c,d,a,b);return d};function Ma(a){if(a&&\"object\"===typeof a&&a.constructor===this)return a;var b=new this(Ha);Na(b,a);return b};var Ia=Math.random().toString(36).substring(16);function Ha(){}var Pa=new Oa;function Qa(a){try{return a.then}catch(b){return Pa.error=b,Pa}}function Ra(a,b,c,d){try{a.call(b,c,d)}catch(e){return e}}function Sa(a,b,c){Fa(function(a){var d=!1,f=Ra(c,b,function(c){d||(d=!0,b!==c?Na(a,c):r(a,c))},function(b){d||(d=!0,u(a,b))});!d&&f&&(d=!0,u(a,f))},a)}function Ta(a,b){1===b.g?r(a,b.f):2===b.g?u(a,b.f):La(b,void 0,function(b){return Na(a,b)},function(b){return u(a,b)})}\nfunction Ua(a,b,c){b.constructor===a.constructor&&c===Ga&&b.constructor.resolve===Ma?Ta(a,b):c===Pa?(u(a,Pa.error),Pa.error=null):void 0===c?r(a,b):\"function\"===typeof c?Sa(a,b,c):r(a,b)}function Na(a,b){if(a===b)u(a,new TypeError(\"You cannot resolve a promise with itself\"));else{var c=typeof b;null===b||\"object\"!==c&&\"function\"!==c?r(a,b):Ua(a,b,Qa(b))}}function Va(a){a.pa&&a.pa(a.f);Wa(a)}function r(a,b){void 0===a.g&&(a.f=b,a.g=1,0!==a.I.length&&Fa(Wa,a))}\nfunction u(a,b){void 0===a.g&&(a.g=2,a.f=b,Fa(Va,a))}function La(a,b,c,d){var e=a.I,f=e.length;a.pa=null;e[f]=b;e[f+1]=c;e[f+2]=d;0===f&&a.g&&Fa(Wa,a)}function Wa(a){var b=a.I,c=a.g;if(0!==b.length){for(var d,e,f=a.f,h=0;h<b.length;h+=3)d=b[h],e=b[h+c],d?Ka(c,d,e,f):e(f);a.I.length=0}}function Oa(){this.error=null}var Xa=new Oa;\nfunction Ka(a,b,c,d){var e=\"function\"===typeof c;if(e){try{var f=c(d)}catch(l){Xa.error=l,f=Xa}if(f===Xa){var h=!0;var g=f.error;f.error=null}else var k=!0;if(b===f){u(b,new TypeError(\"A promises callback cannot return that same promise.\"));return}}else f=d,k=!0;void 0===b.g&&(e&&k?Na(b,f):h?u(b,g):1===a?r(b,f):2===a&&u(b,f))}function Ya(a,b){try{b(function(b){Na(a,b)},function(b){u(a,b)})}catch(c){u(a,c)}}var ab=0;function Ja(a){a[Ia]=ab++;a.g=void 0;a.f=void 0;a.I=[]};function bb(a,b){this.Ga=a;this.A=new a(Ha);this.A[Ia]||Ja(this.A);if(la(b))if(this.S=this.length=b.length,this.f=Array(this.length),0===this.length)r(this.A,this.f);else{this.length=this.length||0;for(a=0;void 0===this.g&&a<b.length;a++)cb(this,b[a],a);0===this.S&&r(this.A,this.f)}else u(this.A,Error(\"Array Methods must be provided an Array\"))}\nfunction cb(a,b,c){var d=a.Ga,e=d.resolve;e===Ma?(e=Qa(b),e===Ga&&void 0!==b.g?db(a,b.g,c,b.f):\"function\"!==typeof e?(a.S--,a.f[c]=b):d===v?(d=new d(Ha),Ua(d,b,e),eb(a,d,c)):eb(a,new d(function(a){return a(b)}),c)):eb(a,e(b),c)}function db(a,b,c,d){var e=a.A;void 0===e.g&&(a.S--,2===b?u(e,d):a.f[c]=d);0===a.S&&r(e,a.f)}function eb(a,b,c){La(b,void 0,function(b){return db(a,1,c,b)},function(b){return db(a,2,c,b)})};function fb(a){return(new bb(this,a)).A};function gb(a){var b=this;return la(a)?new b(function(c,d){for(var e=a.length,f=0;f<e;f++)b.resolve(a[f]).then(c,d)}):new b(function(a,b){return b(new TypeError(\"You must pass an array to race.\"))})};function hb(a){var b=new this(Ha);u(b,a);return b};function v(a){this[Ia]=ab++;this.f=this.g=void 0;this.I=[];if(Ha!==a){if(\"function\"!==typeof a)throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");if(this instanceof v)Ya(this,a);else throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");}}v.prototype={constructor:v,then:Ga,a:function(a){return this.then(null,a)}};/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nwindow.Promise||(window.Promise=v,v.prototype[\"catch\"]=v.prototype.a,v.prototype.then=v.prototype.then,v.all=fb,v.race=gb,v.resolve=Ma,v.reject=hb);(function(a){function b(a,b){if(\"function\"===typeof window.CustomEvent)return new CustomEvent(a,b);var c=document.createEvent(\"CustomEvent\");c.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return c}function c(a){if(m)return a.ownerDocument!==document?a.ownerDocument:null;var b=a.__importDoc;if(!b&&a.parentNode){b=a.parentNode;if(\"function\"===typeof b.closest)b=b.closest(\"link[rel=import]\");else for(;!g(b)&&(b=b.parentNode););a.__importDoc=b}return b}function d(a){var b=document.querySelectorAll(\"link[rel=import]:not([import-dependency])\"),\nc=b.length;c?l(b,function(b){return h(b,function(){0===--c&&a()})}):a()}function e(a){function b(){\"loading\"!==document.readyState&&document.body&&(document.removeEventListener(\"readystatechange\",b),a())}document.addEventListener(\"readystatechange\",b);b()}function f(a){e(function(){return d(function(){return a&&a()})})}function h(a,b){if(a.__loaded)b&&b();else if(\"script\"===a.localName&&!a.src||\"style\"===a.localName&&!a.firstChild)a.__loaded=!0,b&&b();else{var c=function(d){a.removeEventListener(d.type,\nc);a.__loaded=!0;b&&b()};a.addEventListener(\"load\",c);aa&&\"style\"===a.localName||a.addEventListener(\"error\",c)}}function g(a){return a.nodeType===Node.ELEMENT_NODE&&\"link\"===a.localName&&\"import\"===a.rel}function k(){var a=this;this.a={};this.b=0;this.h=new MutationObserver(function(b){return a.Qa(b)});this.h.observe(document.head,{childList:!0,subtree:!0});this.c(document)}function l(a,b,c){var d=a?a.length:0,e=c?-1:1;for(c=c?d-1:0;c<d&&0<=c;c+=e)b(a[c],c)}var m=\"import\"in document.createElement(\"link\"),\nn=null;!1===\"currentScript\"in document&&Object.defineProperty(document,\"currentScript\",{get:function(){return n||(\"complete\"!==document.readyState?document.scripts[document.scripts.length-1]:null)},configurable:!0});var w=/(url\\()([^)]*)(\\))/g,I=/(@import[\\s]+(?!url\\())([^;]*)(;)/g,Za=/(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g,t={Ka:function(a,b){a.href&&a.setAttribute(\"href\",t.Y(a.getAttribute(\"href\"),b));a.src&&a.setAttribute(\"src\",t.Y(a.getAttribute(\"src\"),b));if(\"style\"===a.localName){var c=\nt.ua(a.textContent,b,w);a.textContent=t.ua(c,b,I)}},ua:function(a,b,c){return a.replace(c,function(a,c,d,e){a=d.replace(/[\"']/g,\"\");b&&(a=t.Y(a,b));return c+\"'\"+a+\"'\"+e})},Y:function(a,b){if(void 0===t.ca){t.ca=!1;try{var c=new URL(\"b\",\"http://a\");c.pathname=\"c%20d\";t.ca=\"http://a/c%20d\"===c.href}catch(pc){}}if(t.ca)return(new URL(a,b)).href;c=t.Da;c||(c=document.implementation.createHTMLDocument(\"temp\"),t.Da=c,c.ma=c.createElement(\"base\"),c.head.appendChild(c.ma),c.la=c.createElement(\"a\"));c.ma.href=\nb;c.la.href=a;return c.la.href||a}},na={async:!0,load:function(a,b,c){if(a)if(a.match(/^data:/)){a=a.split(\",\");var d=a[1];d=-1<a[0].indexOf(\";base64\")?atob(d):decodeURIComponent(d);b(d)}else{var e=new XMLHttpRequest;e.open(\"GET\",a,na.async);e.onload=function(){var a=e.responseURL||e.getResponseHeader(\"Location\");a&&0===a.indexOf(\"/\")&&(a=(location.origin||location.protocol+\"//\"+location.host)+a);var d=e.response||e.responseText;304===e.status||0===e.status||200<=e.status&&300>e.status?b(d,a):c(d)};\ne.send()}else c(\"error: href must be specified\")}},aa=/Trident/.test(navigator.userAgent)||/Edge\\/\\d./i.test(navigator.userAgent);k.prototype.c=function(a){var b=this;a=a.querySelectorAll(\"link[rel=import]\");l(a,function(a){return b.L(a)})};k.prototype.L=function(a){var b=this,c=a.href;if(void 0!==this.a[c]){var d=this.a[c];d&&d.__loaded&&(a.import=d,this.o(a))}else this.b++,this.a[c]=\"pending\",na.load(c,function(a,d){a=b.Ra(a,d||c);b.a[c]=a;b.b--;b.c(a);b.sa()},function(){b.a[c]=null;b.b--;b.sa()})};\nk.prototype.Ra=function(a,b){if(!a)return document.createDocumentFragment();aa&&(a=a.replace(Za,function(a,b,c){return-1===a.indexOf(\"type=\")?b+\" type=import-disable \"+c:a}));var c=document.createElement(\"template\");c.innerHTML=a;if(c.content)a=c.content;else for(a=document.createDocumentFragment();c.firstChild;)a.appendChild(c.firstChild);if(c=a.querySelector(\"base\"))b=t.Y(c.getAttribute(\"href\"),b),c.removeAttribute(\"href\");c=a.querySelectorAll('link[rel=import], link[rel=stylesheet][href][type=import-disable],\\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\\n    script:not([type]), script[type=\"application/javascript\"],\\n    script[type=\"text/javascript\"]');\nvar d=0;l(c,function(a){h(a);t.Ka(a,b);a.setAttribute(\"import-dependency\",\"\");\"script\"===a.localName&&!a.src&&a.textContent&&(a.setAttribute(\"src\",\"data:text/javascript;charset=utf-8,\"+encodeURIComponent(a.textContent+(\"\\n//# sourceURL=\"+b+(d?\"-\"+d:\"\")+\".js\\n\"))),a.textContent=\"\",d++)});return a};k.prototype.sa=function(){var a=this;if(!this.b){this.h.disconnect();this.flatten(document);var b=!1,c=!1,d=function(){c&&b&&(a.c(document),a.b||(a.h.observe(document.head,{childList:!0,subtree:!0}),a.Pa()))};\nthis.Wa(function(){c=!0;d()});this.Sa(function(){b=!0;d()})}};k.prototype.flatten=function(a){var b=this;a=a.querySelectorAll(\"link[rel=import]\");l(a,function(a){var c=b.a[a.href];(a.import=c)&&c.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&(b.a[a.href]=a,a.readyState=\"loading\",a.import=a,b.flatten(c),a.appendChild(c))})};k.prototype.Sa=function(a){function b(e){if(e<d){var f=c[e],g=document.createElement(\"script\");f.removeAttribute(\"import-dependency\");l(f.attributes,function(a){return g.setAttribute(a.name,\na.value)});n=g;f.parentNode.replaceChild(g,f);h(g,function(){n=null;b(e+1)})}else a()}var c=document.querySelectorAll(\"script[import-dependency]\"),d=c.length;b(0)};k.prototype.Wa=function(a){var b=document.querySelectorAll(\"style[import-dependency],\\n    link[rel=stylesheet][import-dependency]\"),d=b.length;if(d){var e=aa&&!!document.querySelector(\"link[rel=stylesheet][href][type=import-disable]\");l(b,function(b){h(b,function(){b.removeAttribute(\"import-dependency\");0===--d&&a()});if(e&&b.parentNode!==\ndocument.head){var f=document.createElement(b.localName);f.__appliedElement=b;f.setAttribute(\"type\",\"import-placeholder\");b.parentNode.insertBefore(f,b.nextSibling);for(f=c(b);f&&c(f);)f=c(f);f.parentNode!==document.head&&(f=null);document.head.insertBefore(b,f);b.removeAttribute(\"type\")}})}else a()};k.prototype.Pa=function(){var a=this,b=document.querySelectorAll(\"link[rel=import]\");l(b,function(b){return a.o(b)},!0)};k.prototype.o=function(a){a.__loaded||(a.__loaded=!0,a.import&&(a.import.readyState=\n\"complete\"),a.dispatchEvent(b(a.import?\"load\":\"error\",{bubbles:!1,cancelable:!1,detail:void 0})))};k.prototype.Qa=function(a){var b=this;l(a,function(a){return l(a.addedNodes,function(a){a&&a.nodeType===Node.ELEMENT_NODE&&(g(a)?b.L(a):b.c(a))})})};if(m){var T=document.querySelectorAll(\"link[rel=import]\");l(T,function(a){a.import&&\"loading\"===a.import.readyState||(a.__loaded=!0)});T=function(a){a=a.target;g(a)&&(a.__loaded=!0)};document.addEventListener(\"load\",T,!0);document.addEventListener(\"error\",\nT,!0)}else{var U=Object.getOwnPropertyDescriptor(Node.prototype,\"baseURI\");Object.defineProperty((!U||U.configurable?Node:Element).prototype,\"baseURI\",{get:function(){var a=g(this)?this:c(this);return a?a.href:U&&U.get?U.get.call(this):(document.querySelector(\"base\")||window.location).href},configurable:!0,enumerable:!0});e(function(){return new k})}f(function(){return document.dispatchEvent(b(\"HTMLImportsLoaded\",{cancelable:!0,bubbles:!0,detail:void 0}))});a.useNative=m;a.whenReady=f;a.importForElement=\nc})(window.HTMLImports=window.HTMLImports||{});/*\n\n Copyright (c) 2014 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nwindow.WebComponents=window.WebComponents||{flags:{}};var ib=document.querySelector('script[src*=\"webcomponents-lite.js\"]'),jb=/wc-(.+)/,x={};if(!x.noOpts){location.search.slice(1).split(\"&\").forEach(function(a){a=a.split(\"=\");var b;a[0]&&(b=a[0].match(jb))&&(x[b[1]]=a[1]||!0)});if(ib)for(var kb=0,lb;lb=ib.attributes[kb];kb++)\"src\"!==lb.name&&(x[lb.name]=lb.value||!0);if(x.log&&x.log.split){var mb=x.log.split(\",\");x.log={};mb.forEach(function(a){x.log[a]=!0})}else x.log={}}\nwindow.WebComponents.flags=x;var nb=x.shadydom;nb&&(window.ShadyDOM=window.ShadyDOM||{},window.ShadyDOM.force=nb);var ob=x.register||x.ce;ob&&window.customElements&&(window.customElements.forcePolyfill=ob);/*\n\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar y=window.ShadyDOM||{};y.Ma=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var pb=Object.getOwnPropertyDescriptor(Node.prototype,\"firstChild\");y.M=!!(pb&&pb.configurable&&pb.get);y.ta=y.force||!y.Ma;function qb(a){return a.__shady&&void 0!==a.__shady.firstChild}function z(a){return\"ShadyRoot\"===a.Aa}function rb(a){a=a.getRootNode();if(z(a))return a}var sb=Element.prototype,tb=sb.matches||sb.matchesSelector||sb.mozMatchesSelector||sb.msMatchesSelector||sb.oMatchesSelector||sb.webkitMatchesSelector;\nfunction ub(a,b){if(a&&b)for(var c=Object.getOwnPropertyNames(b),d=0,e;d<c.length&&(e=c[d]);d++){var f=Object.getOwnPropertyDescriptor(b,e);f&&Object.defineProperty(a,e,f)}}function vb(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];for(d=0;d<c.length;d++)ub(a,c[d]);return a}function wb(a,b){for(var c in b)a[c]=b[c]}var xb=document.createTextNode(\"\"),yb=0,zb=[];(new MutationObserver(function(){for(;zb.length;)try{zb.shift()()}catch(a){throw xb.textContent=yb++,a;}})).observe(xb,{characterData:!0});\nfunction Ab(a){zb.push(a);xb.textContent=yb++}var Bb=!!document.contains;function Cb(a,b){for(;b;){if(b==a)return!0;b=b.parentNode}return!1};var Db=[],Eb;function Fb(a){Eb||(Eb=!0,Ab(Gb));Db.push(a)}function Gb(){Eb=!1;for(var a=!!Db.length;Db.length;)Db.shift()();return a}Gb.list=Db;function Hb(){this.a=!1;this.addedNodes=[];this.removedNodes=[];this.V=new Set}function Ib(a){a.a||(a.a=!0,Ab(function(){Jb(a)}))}function Jb(a){if(a.a){a.a=!1;var b=a.takeRecords();b.length&&a.V.forEach(function(a){a(b)})}}Hb.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var a=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];this.addedNodes=[];this.removedNodes=[];return a}return[]};\nfunction Kb(a,b){a.__shady=a.__shady||{};a.__shady.N||(a.__shady.N=new Hb);a.__shady.N.V.add(b);var c=a.__shady.N;return{Ea:b,C:c,Ha:a,takeRecords:function(){return c.takeRecords()}}}function Lb(a){var b=a&&a.C;b&&(b.V.delete(a.Ea),b.V.size||(a.Ha.__shady.N=null))}\nfunction Mb(a,b){var c=b.getRootNode();return a.map(function(a){var b=c===a.target.getRootNode();if(b&&a.addedNodes){if(b=Array.from(a.addedNodes).filter(function(a){return c===a.getRootNode()}),b.length)return a=Object.create(a),Object.defineProperty(a,\"addedNodes\",{value:b,configurable:!0}),a}else if(b)return a}).filter(function(a){return a})};var A={},Nb=Element.prototype.insertBefore,Ob=Element.prototype.removeChild,Pb=Element.prototype.setAttribute,Qb=Element.prototype.removeAttribute,Rb=Element.prototype.cloneNode,Sb=Document.prototype.importNode,Tb=Element.prototype.addEventListener,Ub=Element.prototype.removeEventListener,Vb=Window.prototype.addEventListener,Wb=Window.prototype.removeEventListener,Xb=Element.prototype.dispatchEvent,Yb=Element.prototype.querySelector,Zb=Element.prototype.querySelectorAll,$b=Node.prototype.contains||\nHTMLElement.prototype.contains;A.appendChild=Element.prototype.appendChild;A.insertBefore=Nb;A.removeChild=Ob;A.setAttribute=Pb;A.removeAttribute=Qb;A.cloneNode=Rb;A.importNode=Sb;A.addEventListener=Tb;A.removeEventListener=Ub;A.ab=Vb;A.bb=Wb;A.dispatchEvent=Xb;A.querySelector=Yb;A.querySelectorAll=Zb;A.contains=$b;var ac=/[&\\u00A0\"]/g,bc=/[&\\u00A0<>]/g;function cc(a){switch(a){case \"&\":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function dc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var ec=dc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),fc=dc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction gc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,h;e<f&&(h=d[e]);e++){a:{var g=h;var k=a;var l=b;switch(g.nodeType){case Node.ELEMENT_NODE:for(var m=g.localName,n=\"<\"+m,w=g.attributes,I=0;k=w[I];I++)n+=\" \"+k.name+'=\"'+k.value.replace(ac,cc)+'\"';n+=\">\";g=ec[m]?n:n+gc(g,l)+\"</\"+m+\">\";break a;case Node.TEXT_NODE:g=g.data;g=k&&fc[k.localName]?g:g.replace(bc,cc);break a;case Node.COMMENT_NODE:g=\"\\x3c!--\"+g.data+\"--\\x3e\";break a;default:throw window.console.error(g),\nError(\"not implemented\");}}c+=g}return c};var B={},C=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),D=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1);function hc(a){var b=[];C.currentNode=a;for(a=C.firstChild();a;)b.push(a),a=C.nextSibling();return b}B.parentNode=function(a){C.currentNode=a;return C.parentNode()};B.firstChild=function(a){C.currentNode=a;return C.firstChild()};B.lastChild=function(a){C.currentNode=a;return C.lastChild()};B.previousSibling=function(a){C.currentNode=a;return C.previousSibling()};\nB.nextSibling=function(a){C.currentNode=a;return C.nextSibling()};B.childNodes=hc;B.parentElement=function(a){D.currentNode=a;return D.parentNode()};B.firstElementChild=function(a){D.currentNode=a;return D.firstChild()};B.lastElementChild=function(a){D.currentNode=a;return D.lastChild()};B.previousElementSibling=function(a){D.currentNode=a;return D.previousSibling()};B.nextElementSibling=function(a){D.currentNode=a;return D.nextSibling()};\nB.children=function(a){var b=[];D.currentNode=a;for(a=D.firstChild();a;)b.push(a),a=D.nextSibling();return b};B.innerHTML=function(a){return gc(a,function(a){return hc(a)})};B.textContent=function(a){switch(a.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:a=document.createTreeWalker(a,NodeFilter.SHOW_TEXT,null,!1);for(var b=\"\",c;c=a.nextNode();)b+=c.nodeValue;return b;default:return a.nodeValue}};var ic=Object.getOwnPropertyDescriptor(Element.prototype,\"innerHTML\")||Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"innerHTML\"),jc=document.implementation.createHTMLDocument(\"inert\"),kc=Object.getOwnPropertyDescriptor(Document.prototype,\"activeElement\"),lc={parentElement:{get:function(){var a=this.__shady&&this.__shady.parentNode;a&&a.nodeType!==Node.ELEMENT_NODE&&(a=null);return void 0!==a?a:B.parentElement(this)},configurable:!0},parentNode:{get:function(){var a=this.__shady&&this.__shady.parentNode;\nreturn void 0!==a?a:B.parentNode(this)},configurable:!0},nextSibling:{get:function(){var a=this.__shady&&this.__shady.nextSibling;return void 0!==a?a:B.nextSibling(this)},configurable:!0},previousSibling:{get:function(){var a=this.__shady&&this.__shady.previousSibling;return void 0!==a?a:B.previousSibling(this)},configurable:!0},className:{get:function(){return this.getAttribute(\"class\")||\"\"},set:function(a){this.setAttribute(\"class\",a)},configurable:!0},nextElementSibling:{get:function(){if(this.__shady&&\nvoid 0!==this.__shady.nextSibling){for(var a=this.nextSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return B.nextElementSibling(this)},configurable:!0},previousElementSibling:{get:function(){if(this.__shady&&void 0!==this.__shady.previousSibling){for(var a=this.previousSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return B.previousElementSibling(this)},configurable:!0}},mc={childNodes:{get:function(){if(qb(this)){if(!this.__shady.childNodes){this.__shady.childNodes=\n[];for(var a=this.firstChild;a;a=a.nextSibling)this.__shady.childNodes.push(a)}var b=this.__shady.childNodes}else b=B.childNodes(this);b.item=function(a){return b[a]};return b},configurable:!0},childElementCount:{get:function(){return this.children.length},configurable:!0},firstChild:{get:function(){var a=this.__shady&&this.__shady.firstChild;return void 0!==a?a:B.firstChild(this)},configurable:!0},lastChild:{get:function(){var a=this.__shady&&this.__shady.lastChild;return void 0!==a?a:B.lastChild(this)},\nconfigurable:!0},textContent:{get:function(){if(qb(this)){for(var a=[],b=0,c=this.childNodes,d;d=c[b];b++)d.nodeType!==Node.COMMENT_NODE&&a.push(d.textContent);return a.join(\"\")}return B.textContent(this)},set:function(a){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(;this.firstChild;)this.removeChild(this.firstChild);(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.appendChild(document.createTextNode(a));break;default:this.nodeValue=a}},configurable:!0},firstElementChild:{get:function(){if(this.__shady&&\nvoid 0!==this.__shady.firstChild){for(var a=this.firstChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return B.firstElementChild(this)},configurable:!0},lastElementChild:{get:function(){if(this.__shady&&void 0!==this.__shady.lastChild){for(var a=this.lastChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return B.lastElementChild(this)},configurable:!0},children:{get:function(){var a;qb(this)?a=Array.prototype.filter.call(this.childNodes,function(a){return a.nodeType===\nNode.ELEMENT_NODE}):a=B.children(this);a.item=function(b){return a[b]};return a},configurable:!0},innerHTML:{get:function(){var a=\"template\"===this.localName?this.content:this;return qb(this)?gc(a):B.innerHTML(a)},set:function(a){for(var b=\"template\"===this.localName?this.content:this;b.firstChild;)b.removeChild(b.firstChild);var c=this.localName;c&&\"template\"!==c||(c=\"div\");c=jc.createElement(c);for(ic&&ic.set?ic.set.call(c,a):c.innerHTML=a;c.firstChild;)b.appendChild(c.firstChild)},configurable:!0}},\nqc={shadowRoot:{get:function(){return this.__shady&&this.__shady.Ua||null},configurable:!0}},rc={activeElement:{get:function(){var a=kc&&kc.get?kc.get.call(document):y.M?void 0:document.activeElement;if(a&&a.nodeType){var b=!!z(this);if(this===document||b&&this.host!==a&&A.contains.call(this.host,a)){for(b=rb(a);b&&b!==this;)a=b.host,b=rb(a);a=this===document?b?null:a:b===this?a:null}else a=null}else a=null;return a},set:function(){},configurable:!0}};\nfunction E(a,b,c){for(var d in b){var e=Object.getOwnPropertyDescriptor(a,d);e&&e.configurable||!e&&c?Object.defineProperty(a,d,b[d]):c&&console.warn(\"Could not define\",d,\"on\",a)}}function F(a){E(a,lc);E(a,mc);E(a,rc)}var sc=y.M?function(){}:function(a){a.__shady&&a.__shady.Ba||(a.__shady=a.__shady||{},a.__shady.Ba=!0,E(a,lc,!0))},tc=y.M?function(){}:function(a){a.__shady&&a.__shady.za||(a.__shady=a.__shady||{},a.__shady.za=!0,E(a,mc,!0),E(a,qc,!0))};function uc(a,b,c){sc(a);c=c||null;a.__shady=a.__shady||{};b.__shady=b.__shady||{};c&&(c.__shady=c.__shady||{});a.__shady.previousSibling=c?c.__shady.previousSibling:b.lastChild;var d=a.__shady.previousSibling;d&&d.__shady&&(d.__shady.nextSibling=a);(d=a.__shady.nextSibling=c)&&d.__shady&&(d.__shady.previousSibling=a);a.__shady.parentNode=b;c?c===b.__shady.firstChild&&(b.__shady.firstChild=a):(b.__shady.lastChild=a,b.__shady.firstChild||(b.__shady.firstChild=a));b.__shady.childNodes=null}\nfunction vc(a){if(!a.__shady||void 0===a.__shady.firstChild){a.__shady=a.__shady||{};a.__shady.firstChild=B.firstChild(a);a.__shady.lastChild=B.lastChild(a);tc(a);for(var b=a.__shady.childNodes=B.childNodes(a),c=0,d;c<b.length&&(d=b[c]);c++)d.__shady=d.__shady||{},d.__shady.parentNode=a,d.__shady.nextSibling=b[c+1]||null,d.__shady.previousSibling=b[c-1]||null,sc(d)}};function wc(a,b,c){if(b===a)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");if(c){var d=c.__shady&&c.__shady.parentNode;if(void 0!==d&&d!==a||void 0===d&&B.parentNode(c)!==a)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(c===b)return b;b.parentNode&&xc(b.parentNode,b);d=rb(a);var e;if(e=d)a:{if(!b.__noInsertionPoint){var f;\"slot\"===b.localName?f=[b]:\nb.querySelectorAll&&(f=b.querySelectorAll(\"slot\"));if(f&&f.length){e=f;break a}}e=void 0}(f=e)&&d.H.push.apply(d.H,[].concat(f instanceof Array?f:ja(ia(f))));d&&(\"slot\"===a.localName||f)&&yc(d);if(qb(a)){d=c;tc(a);a.__shady=a.__shady||{};void 0!==a.__shady.firstChild&&(a.__shady.childNodes=null);if(b.nodeType===Node.DOCUMENT_FRAGMENT_NODE){f=b.childNodes;for(e=0;e<f.length;e++)uc(f[e],a,d);b.__shady=b.__shady||{};d=void 0!==b.__shady.firstChild?null:void 0;b.__shady.firstChild=b.__shady.lastChild=\nd;b.__shady.childNodes=d}else uc(b,a,d);if(zc(a)){yc(a.__shady.root);var h=!0}else a.__shady.root&&(h=!0)}h||(h=z(a)?a.host:a,c?(c=Ac(c),A.insertBefore.call(h,b,c)):A.appendChild.call(h,b));Bc(a,b);return b}\nfunction xc(a,b){if(b.parentNode!==a)throw Error(\"The node to be removed is not a child of this node: \"+b);var c=rb(b);if(qb(a)){b.__shady=b.__shady||{};a.__shady=a.__shady||{};b===a.__shady.firstChild&&(a.__shady.firstChild=b.__shady.nextSibling);b===a.__shady.lastChild&&(a.__shady.lastChild=b.__shady.previousSibling);var d=b.__shady.previousSibling,e=b.__shady.nextSibling;d&&(d.__shady=d.__shady||{},d.__shady.nextSibling=e);e&&(e.__shady=e.__shady||{},e.__shady.previousSibling=d);b.__shady.parentNode=\nb.__shady.previousSibling=b.__shady.nextSibling=void 0;void 0!==a.__shady.childNodes&&(a.__shady.childNodes=null);if(zc(a)){yc(a.__shady.root);var f=!0}}Cc(b);if(c){(d=a&&\"slot\"===a.localName)&&(f=!0);Dc(c);e=c.l;for(var h in e)for(var g=e[h],k=0;k<g.length;k++){var l=g[k];if(Cb(b,l)){g.splice(k,1);var m=c.s.indexOf(l);0<=m&&c.s.splice(m,1);k--;if(m=l.__shady.K)for(l=0;l<m.length;l++){var n=m[l],w=B.parentNode(n);w&&A.removeChild.call(w,n)}m=!0}}(m||d)&&yc(c)}f||(f=z(a)?a.host:a,(!a.__shady.root&&\n\"slot\"!==b.localName||f===B.parentNode(b))&&A.removeChild.call(f,b));Bc(a,null,b);return b}function Cc(a){if(a.__shady&&void 0!==a.__shady.ka)for(var b=a.childNodes,c=0,d=b.length,e;c<d&&(e=b[c]);c++)Cc(e);a.__shady&&(a.__shady.ka=void 0)}function Ac(a){var b=a;a&&\"slot\"===a.localName&&(b=(b=a.__shady&&a.__shady.K)&&b.length?b[0]:Ac(a.nextSibling));return b}function zc(a){return(a=a&&a.__shady&&a.__shady.root)&&Ec(a)}\nfunction Fc(a,b){if(\"slot\"===b)a=a.parentNode,zc(a)&&yc(a.__shady.root);else if(\"slot\"===a.localName&&\"name\"===b&&(b=rb(a))){var c=a.Ca,d=Gc(a);if(d!==c){c=b.l[c];var e=c.indexOf(a);0<=e&&c.splice(e,1);c=b.l[d]||(b.l[d]=[]);c.push(a);1<c.length&&(b.l[d]=Hc(c))}yc(b)}}function Bc(a,b,c){if(a=a.__shady&&a.__shady.N)b&&a.addedNodes.push(b),c&&a.removedNodes.push(c),Ib(a)}\nfunction Ic(a){if(a&&a.nodeType){a.__shady=a.__shady||{};var b=a.__shady.ka;void 0===b&&(z(a)?b=a:b=(b=a.parentNode)?Ic(b):a,A.contains.call(document.documentElement,a)&&(a.__shady.ka=b));return b}}function Jc(a,b,c){var d=[];Kc(a.childNodes,b,c,d);return d}function Kc(a,b,c,d){for(var e=0,f=a.length,h;e<f&&(h=a[e]);e++){var g;if(g=h.nodeType===Node.ELEMENT_NODE){g=h;var k=b,l=c,m=d,n=k(g);n&&m.push(g);l&&l(n)?g=n:(Kc(g.childNodes,k,l,m),g=void 0)}if(g)break}}var Lc=null;\nfunction Mc(a,b,c){Lc||(Lc=window.ShadyCSS&&window.ShadyCSS.ScopingShim);Lc&&\"class\"===b?Lc.setElementClass(a,c):(A.setAttribute.call(a,b,c),Fc(a,b))}function Nc(a,b){if(a.ownerDocument!==document)return A.importNode.call(document,a,b);var c=A.importNode.call(document,a,!1);if(b){a=a.childNodes;b=0;for(var d;b<a.length;b++)d=Nc(a[b],!0),c.appendChild(d)}return c};var Oc=\"__eventWrappers\"+Date.now(),Pc={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,\ndragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0};function Qc(a,b){var c=[],d=a;for(a=a===window?window:a.getRootNode();d;)c.push(d),d=d.assignedSlot?d.assignedSlot:d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&d.host&&(b||d!==a)?d.host:d.parentNode;c[c.length-1]===document&&c.push(window);return c}\nfunction Rc(a,b){if(!z)return a;a=Qc(a,!0);for(var c=0,d,e,f,h;c<b.length;c++)if(d=b[c],f=d===window?window:d.getRootNode(),f!==e&&(h=a.indexOf(f),e=f),!z(f)||-1<h)return d}\nvar Sc={get composed(){!1!==this.isTrusted&&void 0===this.Z&&(this.Z=Pc[this.type]);return this.Z||!1},composedPath:function(){this.na||(this.na=Qc(this.__target,this.composed));return this.na},get target(){return Rc(this.currentTarget,this.composedPath())},get relatedTarget(){if(!this.aa)return null;this.oa||(this.oa=Qc(this.aa,!0));return Rc(this.currentTarget,this.oa)},stopPropagation:function(){Event.prototype.stopPropagation.call(this);this.$=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this);\nthis.$=this.ya=!0}};function Tc(a){function b(b,d){b=new a(b,d);b.Z=d&&!!d.composed;return b}wb(b,a);b.prototype=a.prototype;return b}var Uc={focus:!0,blur:!0};function Vc(a){return a.__target!==a.target||a.aa!==a.relatedTarget}function Wc(a,b,c){if(c=b.__handlers&&b.__handlers[a.type]&&b.__handlers[a.type][c])for(var d=0,e;(e=c[d])&&(!Vc(a)||a.target!==a.relatedTarget)&&(e.call(b,a),!a.ya);d++);}\nfunction Xc(a){var b=a.composedPath();Object.defineProperty(a,\"currentTarget\",{get:function(){return d},configurable:!0});for(var c=b.length-1;0<=c;c--){var d=b[c];Wc(a,d,\"capture\");if(a.$)return}Object.defineProperty(a,\"eventPhase\",{get:function(){return Event.AT_TARGET}});var e;for(c=0;c<b.length;c++){d=b[c];var f=d.__shady&&d.__shady.root;if(0===c||f&&f===e)if(Wc(a,d,\"bubble\"),d!==window&&(e=d.getRootNode()),a.$)break}}\nfunction Yc(a,b,c,d,e,f){for(var h=0;h<a.length;h++){var g=a[h],k=g.type,l=g.capture,m=g.once,n=g.passive;if(b===g.node&&c===k&&d===l&&e===m&&f===n)return h}return-1}\nfunction Zc(a,b,c){if(b){if(c&&\"object\"===typeof c){var d=!!c.capture;var e=!!c.once;var f=!!c.passive}else d=!!c,f=e=!1;var h=c&&c.ba||this,g=b[Oc];if(g){if(-1<Yc(g,h,a,d,e,f))return}else b[Oc]=[];g=function(d){e&&this.removeEventListener(a,b,c);d.__target||$c(d);if(h!==this){var f=Object.getOwnPropertyDescriptor(d,\"currentTarget\");Object.defineProperty(d,\"currentTarget\",{get:function(){return h},configurable:!0})}if(d.composed||-1<d.composedPath().indexOf(h))if(Vc(d)&&d.target===d.relatedTarget)d.eventPhase===\nEvent.BUBBLING_PHASE&&d.stopImmediatePropagation();else if(d.eventPhase===Event.CAPTURING_PHASE||d.bubbles||d.target===h||h instanceof Window){var g=\"object\"===typeof b&&b.handleEvent?b.handleEvent(d):b.call(h,d);h!==this&&(f?(Object.defineProperty(d,\"currentTarget\",f),f=null):delete d.currentTarget);return g}};b[Oc].push({node:this,type:a,capture:d,once:e,passive:f,cb:g});Uc[a]?(this.__handlers=this.__handlers||{},this.__handlers[a]=this.__handlers[a]||{capture:[],bubble:[]},this.__handlers[a][d?\n\"capture\":\"bubble\"].push(g)):(this instanceof Window?A.ab:A.addEventListener).call(this,a,g,c)}}\nfunction ad(a,b,c){if(b){if(c&&\"object\"===typeof c){var d=!!c.capture;var e=!!c.once;var f=!!c.passive}else d=!!c,f=e=!1;var h=c&&c.ba||this,g=void 0;var k=null;try{k=b[Oc]}catch(l){}k&&(e=Yc(k,h,a,d,e,f),-1<e&&(g=k.splice(e,1)[0].cb,k.length||(b[Oc]=void 0)));(this instanceof Window?A.bb:A.removeEventListener).call(this,a,g||b,c);g&&Uc[a]&&this.__handlers&&this.__handlers[a]&&(a=this.__handlers[a][d?\"capture\":\"bubble\"],g=a.indexOf(g),-1<g&&a.splice(g,1))}}\nfunction bd(){for(var a in Uc)window.addEventListener(a,function(a){a.__target||($c(a),Xc(a))},!0)}function $c(a){a.__target=a.target;a.aa=a.relatedTarget;if(y.M){var b=Object.getPrototypeOf(a);if(!b.hasOwnProperty(\"__patchProto\")){var c=Object.create(b);c.fb=b;ub(c,Sc);b.__patchProto=c}a.__proto__=b.__patchProto}else ub(a,Sc)}var cd=Tc(window.Event),dd=Tc(window.CustomEvent),ed=Tc(window.MouseEvent);function fd(a,b){return{index:a,O:[],U:b}}\nfunction gd(a,b,c,d){var e=0,f=0,h=0,g=0,k=Math.min(b-e,d-f);if(0==e&&0==f)a:{for(h=0;h<k;h++)if(a[h]!==c[h])break a;h=k}if(b==a.length&&d==c.length){g=a.length;for(var l=c.length,m=0;m<k-h&&hd(a[--g],c[--l]);)m++;g=m}e+=h;f+=h;b-=g;d-=g;if(0==b-e&&0==d-f)return[];if(e==b){for(b=fd(e,0);f<d;)b.O.push(c[f++]);return[b]}if(f==d)return[fd(e,b-e)];k=e;h=f;d=d-h+1;g=b-k+1;b=Array(d);for(l=0;l<d;l++)b[l]=Array(g),b[l][0]=l;for(l=0;l<g;l++)b[0][l]=l;for(l=1;l<d;l++)for(m=1;m<g;m++)if(a[k+m-1]===c[h+l-1])b[l][m]=\nb[l-1][m-1];else{var n=b[l-1][m]+1,w=b[l][m-1]+1;b[l][m]=n<w?n:w}k=b.length-1;h=b[0].length-1;d=b[k][h];for(a=[];0<k||0<h;)0==k?(a.push(2),h--):0==h?(a.push(3),k--):(g=b[k-1][h-1],l=b[k-1][h],m=b[k][h-1],n=l<m?l<g?l:g:m<g?m:g,n==g?(g==d?a.push(0):(a.push(1),d=g),k--,h--):n==l?(a.push(3),k--,d=l):(a.push(2),h--,d=m));a.reverse();b=void 0;k=[];for(h=0;h<a.length;h++)switch(a[h]){case 0:b&&(k.push(b),b=void 0);e++;f++;break;case 1:b||(b=fd(e,0));b.U++;e++;b.O.push(c[f]);f++;break;case 2:b||(b=fd(e,0));\nb.U++;e++;break;case 3:b||(b=fd(e,0)),b.O.push(c[f]),f++}b&&k.push(b);return k}function hd(a,b){return a===b};var id={};function G(a,b,c){if(a!==id)throw new TypeError(\"Illegal constructor\");a=document.createDocumentFragment();a.__proto__=G.prototype;a.Aa=\"ShadyRoot\";vc(b);vc(a);a.host=b;a.a=c&&c.mode;b.__shady=b.__shady||{};b.__shady.root=a;b.__shady.Ua=\"closed\"!==a.a?a:null;a.T=!1;a.s=[];a.l={};a.H=[];c=B.childNodes(b);for(var d=0,e=c.length;d<e;d++)A.removeChild.call(b,c[d]);return a}G.prototype=Object.create(DocumentFragment.prototype);function yc(a){a.T||(a.T=!0,Fb(function(){return jd(a)}))}\nfunction jd(a){for(var b;a;){a.T&&(b=a);a:{var c=a;a=c.host.getRootNode();if(z(a))for(var d=c.host.childNodes,e=0;e<d.length;e++)if(c=d[e],\"slot\"==c.localName)break a;a=void 0}}b&&b._renderRoot()}\nG.prototype._renderRoot=function(){this.T=!1;Dc(this);for(var a=0,b;a<this.s.length;a++){b=this.s[a];var c=b.__shady.assignedNodes;b.__shady.assignedNodes=[];b.__shady.K=[];if(b.__shady.qa=c)for(var d=0;d<c.length;d++){var e=c[d];e.__shady.ga=e.__shady.assignedSlot;e.__shady.assignedSlot===b&&(e.__shady.assignedSlot=null)}}for(b=this.host.firstChild;b;b=b.nextSibling)kd(this,b);for(a=0;a<this.s.length;a++){b=this.s[a];if(!b.__shady.assignedNodes.length)for(c=b.firstChild;c;c=c.nextSibling)kd(this,\nc,b);c=b.parentNode;(c=c.__shady&&c.__shady.root)&&Ec(c)&&c._renderRoot();ld(this,b.__shady.K,b.__shady.assignedNodes);if(c=b.__shady.qa){for(d=0;d<c.length;d++)c[d].__shady.ga=null;b.__shady.qa=null;c.length>b.__shady.assignedNodes.length&&(b.__shady.ia=!0)}b.__shady.ia&&(b.__shady.ia=!1,md(this,b))}a=this.s;b=[];for(c=0;c<a.length;c++)d=a[c].parentNode,d.__shady&&d.__shady.root||!(0>b.indexOf(d))||b.push(d);for(a=0;a<b.length;a++){c=b[a];d=c===this?this.host:c;e=[];c=c.childNodes;for(var f=0;f<\nc.length;f++){var h=c[f];if(\"slot\"==h.localName){h=h.__shady.K;for(var g=0;g<h.length;g++)e.push(h[g])}else e.push(h)}c=void 0;f=B.childNodes(d);h=gd(e,e.length,f,f.length);for(var k=g=0;g<h.length&&(c=h[g]);g++){for(var l=0,m;l<c.O.length&&(m=c.O[l]);l++)B.parentNode(m)===d&&A.removeChild.call(d,m),f.splice(c.index+k,1);k-=c.U}for(k=0;k<h.length&&(c=h[k]);k++)for(g=f[c.index],l=c.index;l<c.index+c.U;l++)m=e[l],A.insertBefore.call(d,m,g),f.splice(l,0,m)}};\nfunction kd(a,b,c){b.__shady=b.__shady||{};var d=b.__shady.ga;b.__shady.ga=null;c||(c=(a=a.l[b.slot||\"__catchall\"])&&a[0]);c?(c.__shady.assignedNodes.push(b),b.__shady.assignedSlot=c):b.__shady.assignedSlot=void 0;d!==b.__shady.assignedSlot&&b.__shady.assignedSlot&&(b.__shady.assignedSlot.__shady.ia=!0)}function ld(a,b,c){for(var d=0,e;d<c.length&&(e=c[d]);d++)if(\"slot\"==e.localName){var f=e.__shady.assignedNodes;f&&f.length&&ld(a,b,f)}else b.push(c[d])}\nfunction md(a,b){A.dispatchEvent.call(b,new Event(\"slotchange\"));b.__shady.assignedSlot&&md(a,b.__shady.assignedSlot)}function Dc(a){if(a.H.length){for(var b=a.H,c,d=0;d<b.length;d++){var e=b[d];e.__shady=e.__shady||{};vc(e);vc(e.parentNode);var f=Gc(e);a.l[f]?(c=c||{},c[f]=!0,a.l[f].push(e)):a.l[f]=[e];a.s.push(e)}if(c)for(var h in c)a.l[h]=Hc(a.l[h]);a.H=[]}}function Gc(a){var b=a.name||a.getAttribute(\"name\")||\"__catchall\";return a.Ca=b}\nfunction Hc(a){return a.sort(function(a,c){a=nd(a);for(var b=nd(c),e=0;e<a.length;e++){c=a[e];var f=b[e];if(c!==f)return a=Array.from(c.parentNode.childNodes),a.indexOf(c)-a.indexOf(f)}})}function nd(a){var b=[];do b.unshift(a);while(a=a.parentNode);return b}function Ec(a){Dc(a);return!!a.s.length}G.prototype.addEventListener=function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.ba=this;this.host.addEventListener(a,b,c)};\nG.prototype.removeEventListener=function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.ba=this;this.host.removeEventListener(a,b,c)};G.prototype.getElementById=function(a){return Jc(this,function(b){return b.id==a},function(a){return!!a})[0]||null};var od=G.prototype;E(od,mc,!0);E(od,rc,!0);function pd(a){var b=a.getRootNode();z(b)&&jd(b);return a.__shady&&a.__shady.assignedSlot||null}\nvar qd={addEventListener:Zc.bind(window),removeEventListener:ad.bind(window)},rd={addEventListener:Zc,removeEventListener:ad,appendChild:function(a){return wc(this,a)},insertBefore:function(a,b){return wc(this,a,b)},removeChild:function(a){return xc(this,a)},replaceChild:function(a,b){wc(this,a,b);xc(this,b);return a},cloneNode:function(a){if(\"template\"==this.localName)var b=A.cloneNode.call(this,a);else if(b=A.cloneNode.call(this,!1),a){a=this.childNodes;for(var c=0,d;c<a.length;c++)d=a[c].cloneNode(!0),\nb.appendChild(d)}return b},getRootNode:function(){return Ic(this)},contains:function(a){return Cb(this,a)},get isConnected(){var a=this.ownerDocument;if(Bb&&A.contains.call(a,this)||a.documentElement&&A.contains.call(a.documentElement,this))return!0;for(a=this;a&&!(a instanceof Document);)a=a.parentNode||(a instanceof G?a.host:void 0);return!!(a&&a instanceof Document)},dispatchEvent:function(a){Gb();return A.dispatchEvent.call(this,a)}},sd={get assignedSlot(){return pd(this)}},td={querySelector:function(a){return Jc(this,\nfunction(b){return tb.call(b,a)},function(a){return!!a})[0]||null},querySelectorAll:function(a){return Jc(this,function(b){return tb.call(b,a)})}},ud={assignedNodes:function(a){if(\"slot\"===this.localName){var b=this.getRootNode();z(b)&&jd(b);return this.__shady?(a&&a.flatten?this.__shady.K:this.__shady.assignedNodes)||[]:[]}}},vd=vb({setAttribute:function(a,b){Mc(this,a,b)},removeAttribute:function(a){A.removeAttribute.call(this,a);Fc(this,a)},attachShadow:function(a){if(!this)throw\"Must provide a host.\";\nif(!a)throw\"Not enough arguments.\";return new G(id,this,a)},get slot(){return this.getAttribute(\"slot\")},set slot(a){Mc(this,\"slot\",a)},get assignedSlot(){return pd(this)}},td,ud);Object.defineProperties(vd,qc);var wd=vb({importNode:function(a,b){return Nc(a,b)},getElementById:function(a){return Jc(this,function(b){return b.id==a},function(a){return!!a})[0]||null}},td);Object.defineProperties(wd,{_activeElement:rc.activeElement});\nvar xd=HTMLElement.prototype.blur,yd=vb({blur:function(){var a=this.__shady&&this.__shady.root;(a=a&&a.activeElement)?a.blur():xd.call(this)}});function H(a,b){for(var c=Object.getOwnPropertyNames(b),d=0;d<c.length;d++){var e=c[d],f=Object.getOwnPropertyDescriptor(b,e);f.value?a[e]=f.value:Object.defineProperty(a,e,f)}};if(y.ta){var ShadyDOM={inUse:y.ta,patch:function(a){return a},isShadyRoot:z,enqueue:Fb,flush:Gb,settings:y,filterMutations:Mb,observeChildren:Kb,unobserveChildren:Lb,nativeMethods:A,nativeTree:B};window.ShadyDOM=ShadyDOM;window.Event=cd;window.CustomEvent=dd;window.MouseEvent=ed;bd();var zd=window.customElements&&window.customElements.nativeHTMLElement||HTMLElement;H(window.Node.prototype,rd);H(window.Window.prototype,qd);H(window.Text.prototype,sd);H(window.DocumentFragment.prototype,td);H(window.Element.prototype,\nvd);H(window.Document.prototype,wd);window.HTMLSlotElement&&H(window.HTMLSlotElement.prototype,ud);H(zd.prototype,yd);y.M&&(F(window.Node.prototype),F(window.Text.prototype),F(window.DocumentFragment.prototype),F(window.Element.prototype),F(zd.prototype),F(window.Document.prototype),window.HTMLSlotElement&&F(window.HTMLSlotElement.prototype));window.ShadowRoot=G};var Ad=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function Bd(a){var b=Ad.has(a);a=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(a);return!b&&a}function J(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return!(!a||!(a.__CE_isImportDocument||a instanceof Document))}\nfunction Cd(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}\nfunction K(a,b,c){c=void 0===c?new Set:c;for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)K(d,b,c);d=Cd(a,e);continue}else if(\"template\"===f){d=Cd(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)K(e,b,c)}d=d.firstChild?d.firstChild:Cd(a,d)}}function L(a,b,c){a[b]=c};function Dd(){this.a=new Map;this.o=new Map;this.h=[];this.c=!1}function Ed(a,b,c){a.a.set(b,c);a.o.set(c.constructor,c)}function Fd(a,b){a.c=!0;a.h.push(b)}function Gd(a,b){a.c&&K(b,function(b){return a.b(b)})}Dd.prototype.b=function(a){if(this.c&&!a.__CE_patched){a.__CE_patched=!0;for(var b=0;b<this.h.length;b++)this.h[b](a)}};function M(a,b){var c=[];K(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):Hd(a,d)}}\nfunction N(a,b){var c=[];K(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d)}}\nfunction O(a,b,c){c=void 0===c?{}:c;var d=c.$a||new Set,e=c.wa||function(b){return Hd(a,b)},f=[];K(b,function(b){if(\"link\"===b.localName&&\"import\"===b.getAttribute(\"rel\")){var c=b.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:b.addEventListener(\"load\",function(){var c=b.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);O(a,c,{$a:f,wa:e})}})}else f.push(b)},d);if(a.c)for(b=\n0;b<f.length;b++)a.b(f[b]);for(b=0;b<f.length;b++)e(f[b])}\nfunction Hd(a,b){if(void 0===b.__CE_state){var c=b.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=a.a.get(b.localName)){c.constructionStack.push(b);var d=c.constructor;try{try{if(new d!==b)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(h){throw b.__CE_state=2,h;}b.__CE_state=1;b.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\nf=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null)}J(b)&&a.connectedCallback(b)}}}Dd.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a)};Dd.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a)};\nDd.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,c,d,e)};function Id(a){var b=document;this.j=a;this.a=b;this.C=void 0;O(this.j,this.a);\"loading\"===this.a.readyState&&(this.C=new MutationObserver(this.b.bind(this)),this.C.observe(this.a,{childList:!0,subtree:!0}))}function Jd(a){a.C&&a.C.disconnect()}Id.prototype.b=function(a){var b=this.a.readyState;\"interactive\"!==b&&\"complete\"!==b||Jd(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)O(this.j,c[d])};function Kd(){var a=this;this.b=this.a=void 0;this.c=new Promise(function(b){a.b=b;a.a&&b(a.a)})}Kd.prototype.resolve=function(a){if(this.a)throw Error(\"Already resolved.\");this.a=a;this.b&&this.b(a)};function P(a){this.da=!1;this.j=a;this.ha=new Map;this.ea=function(a){return a()};this.R=!1;this.fa=[];this.Fa=new Id(a)}\nP.prototype.define=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!Bd(a))throw new SyntaxError(\"The element name '\"+a+\"' is not valid.\");if(this.j.a.get(a))throw Error(\"A custom element with name '\"+a+\"' has already been defined.\");if(this.da)throw Error(\"A custom element is already being defined.\");this.da=!0;try{var d=function(a){var b=e[a];if(void 0!==b&&!(b instanceof Function))throw Error(\"The '\"+a+\"' callback must be a function.\");\nreturn b},e=b.prototype;if(!(e instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");var f=d(\"connectedCallback\");var h=d(\"disconnectedCallback\");var g=d(\"adoptedCallback\");var k=d(\"attributeChangedCallback\");var l=b.observedAttributes||[]}catch(m){return}finally{this.da=!1}b={localName:a,constructor:b,connectedCallback:f,disconnectedCallback:h,adoptedCallback:g,attributeChangedCallback:k,observedAttributes:l,constructionStack:[]};Ed(this.j,a,b);this.fa.push(b);\nthis.R||(this.R=!0,this.ea(function(){return Ld(c)}))};function Ld(a){if(!1!==a.R){a.R=!1;for(var b=a.fa,c=[],d=new Map,e=0;e<b.length;e++)d.set(b[e].localName,[]);O(a.j,document,{wa:function(b){if(void 0===b.__CE_state){var e=b.localName,f=d.get(e);f?f.push(b):a.j.a.get(e)&&c.push(b)}}});for(e=0;e<c.length;e++)Hd(a.j,c[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=d.get(f.localName);for(var h=0;h<f.length;h++)Hd(a.j,f[h]);(e=a.ha.get(e))&&e.resolve(void 0)}}}\nP.prototype.get=function(a){if(a=this.j.a.get(a))return a.constructor};P.prototype.whenDefined=function(a){if(!Bd(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.ha.get(a);if(b)return b.c;b=new Kd;this.ha.set(a,b);this.j.a.get(a)&&!this.fa.some(function(b){return b.localName===a})&&b.resolve(void 0);return b.c};P.prototype.Ta=function(a){Jd(this.Fa);var b=this.ea;this.ea=function(c){return a(function(){return b(c)})}};\nwindow.CustomElementRegistry=P;P.prototype.define=P.prototype.define;P.prototype.get=P.prototype.get;P.prototype.whenDefined=P.prototype.whenDefined;P.prototype.polyfillWrapFlushCallback=P.prototype.Ta;var Md=window.Document.prototype.createElement,Nd=window.Document.prototype.createElementNS,Od=window.Document.prototype.importNode,Pd=window.Document.prototype.prepend,Qd=window.Document.prototype.append,Rd=window.DocumentFragment.prototype.prepend,Sd=window.DocumentFragment.prototype.append,Td=window.Node.prototype.cloneNode,Ud=window.Node.prototype.appendChild,Vd=window.Node.prototype.insertBefore,Wd=window.Node.prototype.removeChild,Xd=window.Node.prototype.replaceChild,Yd=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),Zd=window.Element.prototype.attachShadow,$d=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),ae=window.Element.prototype.getAttribute,be=window.Element.prototype.setAttribute,ce=window.Element.prototype.removeAttribute,de=window.Element.prototype.getAttributeNS,ee=window.Element.prototype.setAttributeNS,fe=window.Element.prototype.removeAttributeNS,ge=window.Element.prototype.insertAdjacentElement,he=window.Element.prototype.prepend,ie=window.Element.prototype.append,\nje=window.Element.prototype.before,ke=window.Element.prototype.after,le=window.Element.prototype.replaceWith,me=window.Element.prototype.remove,ne=window.HTMLElement,oe=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),pe=window.HTMLElement.prototype.insertAdjacentElement;var qe=new function(){};function re(){var a=se;window.HTMLElement=function(){function b(){var b=this.constructor,d=a.o.get(b);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=Md.call(document,d.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=d,a.b(e),e;d=e.length-1;var f=e[d];if(f===qe)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=qe;Object.setPrototypeOf(f,b.prototype);a.b(f);return f}b.prototype=ne.prototype;return b}()};function te(a,b,c){function d(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];e=[];for(var f=[],l=0;l<d.length;l++){var m=d[l];m instanceof Element&&J(m)&&f.push(m);if(m instanceof DocumentFragment)for(m=m.firstChild;m;m=m.nextSibling)e.push(m);else e.push(m)}b.apply(this,d);for(d=0;d<f.length;d++)N(a,f[d]);if(J(this))for(d=0;d<e.length;d++)f=e[d],f instanceof Element&&M(a,f)}}void 0!==c.X&&(b.prepend=d(c.X));void 0!==c.append&&(b.append=d(c.append))};function ue(){var a=se;L(Document.prototype,\"createElement\",function(b){if(this.__CE_hasRegistry){var c=a.a.get(b);if(c)return new c.constructor}b=Md.call(this,b);a.b(b);return b});L(Document.prototype,\"importNode\",function(b,c){b=Od.call(this,b,c);this.__CE_hasRegistry?O(a,b):Gd(a,b);return b});L(Document.prototype,\"createElementNS\",function(b,c){if(this.__CE_hasRegistry&&(null===b||\"http://www.w3.org/1999/xhtml\"===b)){var d=a.a.get(c);if(d)return new d.constructor}b=Nd.call(this,b,c);a.b(b);return b});\nte(a,Document.prototype,{X:Pd,append:Qd})};function ve(){var a=se;function b(b,d){Object.defineProperty(b,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(b){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,b);else{var c=void 0;if(this.firstChild){var e=this.childNodes,g=e.length;if(0<g&&J(this)){c=Array(g);for(var k=0;k<g;k++)c[k]=e[k]}}d.set.call(this,b);if(c)for(b=0;b<c.length;b++)N(a,c[b])}}})}L(Node.prototype,\"insertBefore\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);\nb=Vd.call(this,b,d);if(J(this))for(d=0;d<c.length;d++)M(a,c[d]);return b}c=J(b);d=Vd.call(this,b,d);c&&N(a,b);J(this)&&M(a,b);return d});L(Node.prototype,\"appendChild\",function(b){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=Ud.call(this,b);if(J(this))for(var e=0;e<c.length;e++)M(a,c[e]);return b}c=J(b);e=Ud.call(this,b);c&&N(a,b);J(this)&&M(a,b);return e});L(Node.prototype,\"cloneNode\",function(b){b=Td.call(this,b);this.ownerDocument.__CE_hasRegistry?O(a,b):\nGd(a,b);return b});L(Node.prototype,\"removeChild\",function(b){var c=J(b),e=Wd.call(this,b);c&&N(a,b);return e});L(Node.prototype,\"replaceChild\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=Xd.call(this,b,d);if(J(this))for(N(a,d),d=0;d<c.length;d++)M(a,c[d]);return b}c=J(b);var f=Xd.call(this,b,d),h=J(this);h&&N(a,d);c&&N(a,b);h&&M(a,b);return f});Yd&&Yd.get?b(Node.prototype,Yd):Fd(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){for(var a=\n[],b=0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)Wd.call(this,this.firstChild);Ud.call(this,document.createTextNode(a))}})})};function we(a){var b=Element.prototype;function c(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];e=[];for(var g=[],k=0;k<d.length;k++){var l=d[k];l instanceof Element&&J(l)&&g.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)e.push(l);else e.push(l)}b.apply(this,d);for(d=0;d<g.length;d++)N(a,g[d]);if(J(this))for(d=0;d<e.length;d++)g=e[d],g instanceof Element&&M(a,g)}}void 0!==je&&(b.before=c(je));void 0!==je&&(b.after=c(ke));void 0!==\nle&&L(b,\"replaceWith\",function(b){for(var c=[],d=0;d<arguments.length;++d)c[d-0]=arguments[d];d=[];for(var h=[],g=0;g<c.length;g++){var k=c[g];k instanceof Element&&J(k)&&h.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)d.push(k);else d.push(k)}g=J(this);le.apply(this,c);for(c=0;c<h.length;c++)N(a,h[c]);if(g)for(N(a,this),c=0;c<d.length;c++)h=d[c],h instanceof Element&&M(a,h)});void 0!==me&&L(b,\"remove\",function(){var b=J(this);me.call(this);b&&N(a,this)})};function xe(){var a=se;function b(b,c){Object.defineProperty(b,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(b){var d=this,e=void 0;J(this)&&(e=[],K(this,function(a){a!==d&&e.push(a)}));c.set.call(this,b);if(e)for(var f=0;f<e.length;f++){var l=e[f];1===l.__CE_state&&a.disconnectedCallback(l)}this.ownerDocument.__CE_hasRegistry?O(a,this):Gd(a,this);return b}})}function c(b,c){L(b,\"insertAdjacentElement\",function(b,d){var e=J(d);b=c.call(this,b,d);e&&N(a,d);J(b)&&M(a,d);\nreturn b})}Zd&&L(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=Zd.call(this,a)});$d&&$d.get?b(Element.prototype,$d):oe&&oe.get?b(HTMLElement.prototype,oe):Fd(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){return Td.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,c=b?this.content:this,d=Md.call(document,this.localName);for(d.innerHTML=a;0<c.childNodes.length;)Wd.call(c,c.childNodes[0]);for(a=b?d.content:d;0<a.childNodes.length;)Ud.call(c,\na.childNodes[0])}})});L(Element.prototype,\"setAttribute\",function(b,c){if(1!==this.__CE_state)return be.call(this,b,c);var d=ae.call(this,b);be.call(this,b,c);c=ae.call(this,b);a.attributeChangedCallback(this,b,d,c,null)});L(Element.prototype,\"setAttributeNS\",function(b,c,f){if(1!==this.__CE_state)return ee.call(this,b,c,f);var d=de.call(this,b,c);ee.call(this,b,c,f);f=de.call(this,b,c);a.attributeChangedCallback(this,c,d,f,b)});L(Element.prototype,\"removeAttribute\",function(b){if(1!==this.__CE_state)return ce.call(this,\nb);var c=ae.call(this,b);ce.call(this,b);null!==c&&a.attributeChangedCallback(this,b,c,null,null)});L(Element.prototype,\"removeAttributeNS\",function(b,c){if(1!==this.__CE_state)return fe.call(this,b,c);var d=de.call(this,b,c);fe.call(this,b,c);var e=de.call(this,b,c);d!==e&&a.attributeChangedCallback(this,c,d,e,b)});pe?c(HTMLElement.prototype,pe):ge?c(Element.prototype,ge):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");te(a,Element.prototype,{X:he,append:ie});we(a)}\n;var ye=window.customElements;if(!ye||ye.forcePolyfill||\"function\"!=typeof ye.define||\"function\"!=typeof ye.get){var se=new Dd;re();ue();te(se,DocumentFragment.prototype,{X:Rd,append:Sd});ve();xe();document.__CE_hasRegistry=!0;var customElements=new P(se);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};function ze(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText=\"\";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName=\"\"}\nfunction Ae(a){a=a.replace(Be,\"\").replace(Ce,\"\");var b=De,c=a,d=new ze;d.start=0;d.end=c.length;for(var e=d,f=0,h=c.length;f<h;f++)if(\"{\"===c[f]){e.rules||(e.rules=[]);var g=e,k=g.rules[g.rules.length-1]||null;e=new ze;e.start=f+1;e.parent=g;e.previous=k;g.rules.push(e)}else\"}\"===c[f]&&(e.end=f+1,e=e.parent||d);return b(d,a)}\nfunction De(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&(c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=Ee(c),c=c.replace(Fe,\" \"),c=c.substring(c.lastIndexOf(\";\")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=0===c.indexOf(\"@\"),a.atRule?0===c.indexOf(\"@media\")?a.type=Je:c.match(Ke)&&(a.type=Le,a.keyframesName=a.selector.split(Fe).pop()):a.type=0===c.indexOf(\"--\")?Me:Ne);if(c=a.rules)for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)De(f,\nb);return a}function Ee(a){return a.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(a,c){a=c;for(c=6-a.length;c--;)a=\"0\"+a;return\"\\\\\"+a})}\nfunction Oe(a,b,c){c=void 0===c?\"\":c;var d=\"\";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf(\"--\"));if(f){f=0;for(var h=e.length,g;f<h&&(g=e[f]);f++)d=Oe(g,b,d)}else b?b=a.cssText:(b=a.cssText,b=b.replace(Pe,\"\").replace(Qe,\"\"),b=b.replace(Re,\"\").replace(Se,\"\")),(d=b.trim())&&(d=\"  \"+d+\"\\n\")}d&&(a.selector&&(c+=a.selector+\" {\\n\"),c+=d,a.selector&&(c+=\"}\\n\\n\"));return c}\nvar Ne=1,Le=7,Je=4,Me=1E3,Be=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,Ce=/@import[^;]*;/gim,Pe=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,Qe=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,Re=/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,Se=/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,Ke=/^@[^\\s]*keyframes/,Fe=/\\s+/g;var Q=!(window.ShadyDOM&&window.ShadyDOM.inUse),Te;function Ue(a){Te=a&&a.shimcssproperties?!1:Q||!(navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/)||!window.CSS||!CSS.supports||!CSS.supports(\"box-shadow\",\"0 0 0 var(--foo)\"))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Te=window.ShadyCSS.nativeCss:window.ShadyCSS?(Ue(window.ShadyCSS),window.ShadyCSS=void 0):Ue(window.WebComponents&&window.WebComponents.flags);var R=Te;var Ve=/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi,We=/(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,Xe=/(--[\\w-]+)\\s*([:,;)]|$)/gi,Ye=/(animation\\s*:)|(animation-name\\s*:)/,Ze=/@media\\s(.*)/,$e=/\\{[^}]*\\}/g;var af=new Set;function bf(a,b){if(!a)return\"\";\"string\"===typeof a&&(a=Ae(a));b&&cf(a,b);return Oe(a,R)}function df(a){!a.__cssRules&&a.textContent&&(a.__cssRules=Ae(a.textContent));return a.__cssRules||null}function ef(a){return!!a.parent&&a.parent.type===Le}function cf(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===Je){var h=a.selector.match(Ze);h&&(window.matchMedia(h[1]).matches||(e=!0))}f===Ne?b(a):c&&f===Le?c(a):f===Me&&(e=!0);if((a=a.rules)&&!e){e=0;f=a.length;for(var g;e<f&&(g=a[e]);e++)cf(g,b,c,d)}}}\nfunction ff(a,b,c,d){var e=document.createElement(\"style\");b&&e.setAttribute(\"scope\",b);e.textContent=a;gf(e,c,d);return e}var S=null;function gf(a,b,c){b=b||document.head;b.insertBefore(a,c&&c.nextSibling||b.firstChild);S?a.compareDocumentPosition(S)===Node.DOCUMENT_POSITION_PRECEDING&&(S=a):S=a}\nfunction hf(a,b){var c=a.indexOf(\"var(\");if(-1===c)return b(a,\"\",\"\",\"\");a:{var d=0;var e=c+3;for(var f=a.length;e<f;e++)if(\"(\"===a[e])d++;else if(\")\"===a[e]&&0===--d)break a;e=-1}d=a.substring(c+4,e);c=a.substring(0,c);a=hf(a.substring(e+1),b);e=d.indexOf(\",\");return-1===e?b(c,d.trim(),\"\",a):b(c,d.substring(0,e).trim(),d.substring(e+1).trim(),a)}function jf(a,b){Q?a.setAttribute(\"class\",b):window.ShadyDOM.nativeMethods.setAttribute.call(a,\"class\",b)}\nfunction V(a){var b=a.localName,c=\"\";b?-1<b.indexOf(\"-\")||(c=b,b=a.getAttribute&&a.getAttribute(\"is\")||\"\"):(b=a.is,c=a.extends);return{is:b,P:c}};function kf(){}function lf(a,b,c){var d=W;a.__styleScoped?a.__styleScoped=null:mf(d,a,b||\"\",c)}function mf(a,b,c,d){b.nodeType===Node.ELEMENT_NODE&&nf(b,c,d);if(b=\"template\"===b.localName?(b.content||b.gb).childNodes:b.children||b.childNodes)for(var e=0;e<b.length;e++)mf(a,b[e],c,d)}\nfunction nf(a,b,c){if(b)if(a.classList)c?(a.classList.remove(\"style-scope\"),a.classList.remove(b)):(a.classList.add(\"style-scope\"),a.classList.add(b));else if(a.getAttribute){var d=a.getAttribute(of);c?d&&(b=d.replace(\"style-scope\",\"\").replace(b,\"\"),jf(a,b)):jf(a,(d?d+\" \":\"\")+\"style-scope \"+b)}}function pf(a,b,c){var d=W,e=a.__cssBuild;Q||\"shady\"===e?b=bf(b,c):(a=V(a),b=qf(d,b,a.is,a.P,c)+\"\\n\\n\");return b.trim()}\nfunction qf(a,b,c,d,e){var f=rf(c,d);c=c?sf+c:\"\";return bf(b,function(b){b.c||(b.selector=b.m=tf(a,b,a.b,c,f),b.c=!0);e&&e(b,c,f)})}function rf(a,b){return b?\"[is=\"+a+\"]\":a}function tf(a,b,c,d,e){var f=b.selector.split(uf);if(!ef(b)){b=0;for(var h=f.length,g;b<h&&(g=f[b]);b++)f[b]=c.call(a,g,d,e)}return f.join(uf)}function vf(a){return a.replace(wf,function(a,c,d){-1<d.indexOf(\"+\")?d=d.replace(/\\+/g,\"___\"):-1<d.indexOf(\"___\")&&(d=d.replace(/___/g,\"+\"));return\":\"+c+\"(\"+d+\")\"})}\nkf.prototype.b=function(a,b,c){var d=!1;a=a.trim();var e=wf.test(a);e&&(a=a.replace(wf,function(a,b,c){return\":\"+b+\"(\"+c.replace(/\\s/g,\"\")+\")\"}),a=vf(a));a=a.replace(xf,yf+\" $1\");a=a.replace(zf,function(a,e,g){d||(a=Af(g,e,b,c),d=d||a.stop,e=a.Ja,g=a.value);return e+g});e&&(a=vf(a));return a};\nfunction Af(a,b,c,d){var e=a.indexOf(Bf);0<=a.indexOf(yf)?a=Cf(a,d):0!==e&&(a=c?Df(a,c):a);c=!1;0<=e&&(b=\"\",c=!0);if(c){var f=!0;c&&(a=a.replace(Ef,function(a,b){return\" > \"+b}))}a=a.replace(Ff,function(a,b,c){return'[dir=\"'+c+'\"] '+b+\", \"+b+'[dir=\"'+c+'\"]'});return{value:a,Ja:b,stop:f}}function Df(a,b){a=a.split(Gf);a[0]+=b;return a.join(Gf)}\nfunction Cf(a,b){var c=a.match(Hf);return(c=c&&c[2].trim()||\"\")?c[0].match(If)?a.replace(Hf,function(a,c,f){return b+f}):c.split(If)[0]===b?c:Jf:a.replace(yf,b)}function Kf(a){a.selector===Lf&&(a.selector=\"html\")}kf.prototype.c=function(a){return a.match(Bf)?this.b(a,Mf):Df(a.trim(),Mf)};q.Object.defineProperties(kf.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"style-scope\"}}});\nvar wf=/:(nth[-\\w]+)\\(([^)]+)\\)/,Mf=\":not(.style-scope)\",uf=\",\",zf=/(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g,If=/[[.:#*]/,yf=\":host\",Lf=\":root\",Bf=\"::slotted\",xf=new RegExp(\"^(\"+Bf+\")\"),Hf=/(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,Ef=/(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,Ff=/(.*):dir\\((?:(ltr|rtl))\\)/,sf=\".\",Gf=\":\",of=\"class\",Jf=\"should_not_match\",W=new kf;function Nf(a,b,c,d){this.w=a||null;this.b=b||null;this.ja=c||[];this.G=null;this.P=d||\"\";this.a=this.u=this.B=null}function X(a){return a?a.__styleInfo:null}function Of(a,b){return a.__styleInfo=b}Nf.prototype.c=function(){return this.w};Nf.prototype._getStyleRules=Nf.prototype.c;var Pf,Qf=window.Element.prototype;Pf=Qf.matches||Qf.matchesSelector||Qf.mozMatchesSelector||Qf.msMatchesSelector||Qf.oMatchesSelector||Qf.webkitMatchesSelector;var Rf=navigator.userAgent.match(\"Trident\");function Sf(){}function Tf(a){var b={},c=[],d=0;cf(a,function(a){Uf(a);a.index=d++;a=a.i.cssText;for(var c;c=Xe.exec(a);){var e=c[1];\":\"!==c[2]&&(b[e]=!0)}},function(a){c.push(a)});a.b=c;a=[];for(var e in b)a.push(e);return a}\nfunction Uf(a){if(!a.i){var b={},c={};Vf(a,c)&&(b.v=c,a.rules=null);b.cssText=a.parsedCssText.replace($e,\"\").replace(Ve,\"\");a.i=b}}function Vf(a,b){var c=a.i;if(c){if(c.v)return Object.assign(b,c.v),!0}else{c=a.parsedCssText;for(var d;a=Ve.exec(c);){d=(a[2]||a[3]).trim();if(\"inherit\"!==d||\"unset\"!==d)b[a[1].trim()]=d;d=!0}return d}}\nfunction Wf(a,b,c){b&&(b=0<=b.indexOf(\";\")?Xf(a,b,c):hf(b,function(b,e,f,h){if(!e)return b+h;(e=Wf(a,c[e],c))&&\"initial\"!==e?\"apply-shim-inherit\"===e&&(e=\"inherit\"):e=Wf(a,c[f]||f,c)||f;return b+(e||\"\")+h}));return b&&b.trim()||\"\"}\nfunction Xf(a,b,c){b=b.split(\";\");for(var d=0,e,f;d<b.length;d++)if(e=b[d]){We.lastIndex=0;if(f=We.exec(e))e=Wf(a,c[f[1]],c);else if(f=e.indexOf(\":\"),-1!==f){var h=e.substring(f);h=h.trim();h=Wf(a,h,c)||h;e=e.substring(0,f)+h}b[d]=e&&e.lastIndexOf(\";\")===e.length-1?e.slice(0,-1):e||\"\"}return b.join(\";\")}\nfunction Yf(a,b){var c={},d=[];cf(a,function(a){a.i||Uf(a);var e=a.m||a.parsedSelector;b&&a.i.v&&e&&Pf.call(b,e)&&(Vf(a,c),a=a.index,e=parseInt(a/32,10),d[e]=(d[e]||0)|1<<a%32)},null,!0);return{v:c,key:d}}\nfunction Zf(a,b,c,d){b.i||Uf(b);if(b.i.v){var e=V(a);a=e.is;e=e.P;e=a?rf(a,e):\"html\";var f=b.parsedSelector,h=\":host > *\"===f||\"html\"===f,g=0===f.indexOf(\":host\")&&!h;\"shady\"===c&&(h=f===e+\" > *.\"+e||-1!==f.indexOf(\"html\"),g=!h&&0===f.indexOf(e));\"shadow\"===c&&(h=\":host > *\"===f||\"html\"===f,g=g&&!h);if(h||g)c=e,g&&(Q&&!b.m&&(b.m=tf(W,b,W.b,a?sf+a:\"\",e)),c=b.m||e),d({Xa:c,Oa:g,ib:h})}}\nfunction $f(a,b){var c={},d={},e=b&&b.__cssBuild;cf(b,function(b){Zf(a,b,e,function(e){Pf.call(a.hb||a,e.Xa)&&(e.Oa?Vf(b,c):Vf(b,d))})},null,!0);return{Va:d,Na:c}}\nfunction ag(a,b,c,d){var e=V(b),f=rf(e.is,e.P),h=new RegExp(\"(?:^|[^.#[:])\"+(b.extends?\"\\\\\"+f.slice(0,-1)+\"\\\\]\":f)+\"($|[.:[\\\\s>+~])\");e=X(b).w;var g=bg(e,d);return pf(b,e,function(b){var e=\"\";b.i||Uf(b);b.i.cssText&&(e=Xf(a,b.i.cssText,c));b.cssText=e;if(!Q&&!ef(b)&&b.cssText){var k=e=b.cssText;null==b.ra&&(b.ra=Ye.test(e));if(b.ra)if(null==b.W){b.W=[];for(var n in g)k=g[n],k=k(e),e!==k&&(e=k,b.W.push(n))}else{for(n=0;n<b.W.length;++n)k=g[b.W[n]],e=k(e);k=e}b.cssText=k;b.m=b.m||b.selector;e=\".\"+d;\nn=b.m.split(\",\");k=0;for(var w=n.length,I;k<w&&(I=n[k]);k++)n[k]=I.match(h)?I.replace(f,e):e+\" \"+I;b.selector=n.join(\",\")}})}function bg(a,b){a=a.b;var c={};if(!Q&&a)for(var d=0,e=a[d];d<a.length;e=a[++d]){var f=e,h=b;f.h=new RegExp(f.keyframesName,\"g\");f.a=f.keyframesName+\"-\"+h;f.m=f.m||f.selector;f.selector=f.m.replace(f.keyframesName,f.a);c[e.keyframesName]=cg(e)}return c}function cg(a){return function(b){return b.replace(a.h,a.a)}}\nfunction dg(a,b){var c=eg,d=df(a);a.textContent=bf(d,function(a){var d=a.cssText=a.parsedCssText;a.i&&a.i.cssText&&(d=d.replace(Pe,\"\").replace(Qe,\"\"),a.cssText=Xf(c,d,b))})}q.Object.defineProperties(Sf.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"x-scope\"}}});var eg=new Sf;var fg={},gg=window.customElements;if(gg&&!Q){var hg=gg.define;gg.define=function(a,b,c){var d=document.createComment(\" Shady DOM styles for \"+a+\" \"),e=document.head;e.insertBefore(d,(S?S.nextSibling:null)||e.firstChild);S=d;fg[a]=d;return hg.call(gg,a,b,c)}};function ig(){this.cache={}}ig.prototype.store=function(a,b,c,d){var e=this.cache[a]||[];e.push({v:b,styleElement:c,u:d});100<e.length&&e.shift();this.cache[a]=e};ig.prototype.fetch=function(a,b,c){if(a=this.cache[a])for(var d=a.length-1;0<=d;d--){var e=a[d],f;a:{for(f=0;f<c.length;f++){var h=c[f];if(e.v[h]!==b[h]){f=!1;break a}}f=!0}if(f)return e}};function jg(){}\nfunction kg(a){for(var b=0;b<a.length;b++){var c=a[b];if(c.target!==document.documentElement&&c.target!==document.head)for(var d=0;d<c.addedNodes.length;d++){var e=c.addedNodes[d];if(e.nodeType===Node.ELEMENT_NODE){var f=e.getRootNode();var h=e;var g=[];h.classList?g=Array.from(h.classList):h instanceof window.SVGElement&&h.hasAttribute(\"class\")&&(g=h.getAttribute(\"class\").split(/\\s+/));h=g;g=h.indexOf(W.a);if((h=-1<g?h[g+1]:\"\")&&f===e.ownerDocument)lf(e,h,!0);else if(f.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&\n(f=f.host))if(f=V(f).is,h===f)for(e=window.ShadyDOM.nativeMethods.querySelectorAll.call(e,\":not(.\"+W.a+\")\"),f=0;f<e.length;f++)nf(e[f],h);else h&&lf(e,h,!0),lf(e,f)}}}}\nif(!Q){var lg=new MutationObserver(kg),mg=function(a){lg.observe(a,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)mg(document);else{var ng=function(){mg(document.body)};window.HTMLImports?window.HTMLImports.whenReady(ng):requestAnimationFrame(function(){if(\"loading\"===document.readyState){var a=function(){ng();document.removeEventListener(\"readystatechange\",a)};document.addEventListener(\"readystatechange\",a)}else ng()})}jg=function(){kg(lg.takeRecords())}}\nvar og=jg;var pg={};var qg=Promise.resolve();function rg(a){if(a=pg[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1}function sg(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function tg(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a.b||(a.b=!0,qg.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a.b=!1}))};var ug=null,vg=window.HTMLImports&&window.HTMLImports.whenReady||null,wg;function xg(a){requestAnimationFrame(function(){vg?vg(a):(ug||(ug=new Promise(function(a){wg=a}),\"complete\"===document.readyState?wg():document.addEventListener(\"readystatechange\",function(){\"complete\"===document.readyState&&wg()})),ug.then(function(){a&&a()}))})};var yg=new ig;function Y(){var a=this;this.L={};this.c=document.documentElement;var b=new ze;b.rules=[];this.h=Of(this.c,new Nf(b));this.o=!1;this.b=this.a=null;xg(function(){zg(a)})}p=Y.prototype;p.xa=function(){og()};p.La=function(a){return df(a)};p.Za=function(a){return bf(a)};\np.prepareTemplate=function(a,b,c){if(!a.h){a.h=!0;a.name=b;a.extends=c;pg[b]=a;var d=(d=a.content.querySelector(\"style\"))?d.getAttribute(\"css-build\")||\"\":\"\";var e=[];for(var f=a.content.querySelectorAll(\"style\"),h=0;h<f.length;h++){var g=f[h];if(g.hasAttribute(\"shady-unscoped\")){if(!Q){var k=g.textContent;af.has(k)||(af.add(k),k=g.cloneNode(!0),document.head.appendChild(k));g.parentNode.removeChild(g)}}else e.push(g.textContent),g.parentNode.removeChild(g)}e=e.join(\"\").trim();c={is:b,extends:c,eb:d};\nQ||lf(a.content,b);zg(this);f=We.test(e)||Ve.test(e);We.lastIndex=0;Ve.lastIndex=0;e=Ae(e);f&&R&&this.a&&this.a.transformRules(e,b);a._styleAst=e;a.o=d;d=[];R||(d=Tf(a._styleAst));if(!d.length||R)e=Q?a.content:null,b=fg[b],f=pf(c,a._styleAst),b=f.length?ff(f,c.is,e,b):void 0,a.a=b;a.c=d}};\nfunction Ag(a){!a.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(a.b=window.ShadyCSS.CustomStyleInterface,a.b.transformCallback=function(b){a.va(b)},a.b.validateCallback=function(){requestAnimationFrame(function(){(a.b.enqueued||a.o)&&a.F()})})}function zg(a){!a.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(a.a=window.ShadyCSS.ApplyShim,a.a.invalidCallback=rg);Ag(a)}\np.F=function(){zg(this);if(this.b){var a=this.b.processStyles();if(this.b.enqueued){if(R)for(var b=0;b<a.length;b++){var c=this.b.getStyleForCustomStyle(a[b]);if(c&&R&&this.a){var d=df(c);zg(this);this.a.transformRules(d);c.textContent=bf(d)}}else for(Bg(this,this.c,this.h),b=0;b<a.length;b++)(c=this.b.getStyleForCustomStyle(a[b]))&&dg(c,this.h.B);this.b.enqueued=!1;this.o&&!R&&this.styleDocument()}}};\np.styleElement=function(a,b){var c=V(a).is,d=X(a);if(!d){var e=V(a);d=e.is;e=e.P;var f=fg[d];d=pg[d];if(d){var h=d._styleAst;var g=d.c}d=Of(a,new Nf(h,f,g,e))}a!==this.c&&(this.o=!0);b&&(d.G=d.G||{},Object.assign(d.G,b));if(R){if(d.G){b=d.G;for(var k in b)null===k?a.style.removeProperty(k):a.style.setProperty(k,b[k])}if(((k=pg[c])||a===this.c)&&k&&k.a&&!sg(k)){if(sg(k)||k._applyShimValidatingVersion!==k._applyShimNextVersion)zg(this),this.a&&this.a.transformRules(k._styleAst,c),k.a.textContent=pf(a,\nd.w),tg(k);Q&&(c=a.shadowRoot)&&(c.querySelector(\"style\").textContent=pf(a,d.w));d.w=k._styleAst}}else if(Bg(this,a,d),d.ja&&d.ja.length){c=d;k=V(a).is;d=(b=yg.fetch(k,c.B,c.ja))?b.styleElement:null;h=c.u;(g=b&&b.u)||(g=this.L[k]=(this.L[k]||0)+1,g=k+\"-\"+g);c.u=g;g=c.u;e=eg;e=d?d.textContent||\"\":ag(e,a,c.B,g);f=X(a);var l=f.a;l&&!Q&&l!==d&&(l._useCount--,0>=l._useCount&&l.parentNode&&l.parentNode.removeChild(l));Q?f.a?(f.a.textContent=e,d=f.a):e&&(d=ff(e,g,a.shadowRoot,f.b)):d?d.parentNode||(Rf&&\n-1<e.indexOf(\"@media\")&&(d.textContent=e),gf(d,null,f.b)):e&&(d=ff(e,g,null,f.b));d&&(d._useCount=d._useCount||0,f.a!=d&&d._useCount++,f.a=d);g=d;Q||(d=c.u,f=e=a.getAttribute(\"class\")||\"\",h&&(f=e.replace(new RegExp(\"\\\\s*x-scope\\\\s*\"+h+\"\\\\s*\",\"g\"),\" \")),f+=(f?\" \":\"\")+\"x-scope \"+d,e!==f&&jf(a,f));b||yg.store(k,c.B,g,c.u)}};function Cg(a,b){return(b=b.getRootNode().host)?X(b)?b:Cg(a,b):a.c}\nfunction Bg(a,b,c){a=Cg(a,b);var d=X(a);a=Object.create(d.B||null);var e=$f(b,c.w);b=Yf(d.w,b).v;Object.assign(a,e.Na,b,e.Va);b=c.G;for(var f in b)if((e=b[f])||0===e)a[f]=e;f=eg;b=Object.getOwnPropertyNames(a);for(e=0;e<b.length;e++)d=b[e],a[d]=Wf(f,a[d],a);c.B=a}p.styleDocument=function(a){this.styleSubtree(this.c,a)};\np.styleSubtree=function(a,b){var c=a.shadowRoot;(c||a===this.c)&&this.styleElement(a,b);if(b=c&&(c.children||c.childNodes))for(a=0;a<b.length;a++)this.styleSubtree(b[a]);else if(a=a.children||a.childNodes)for(b=0;b<a.length;b++)this.styleSubtree(a[b])};p.va=function(a){var b=this,c=df(a);cf(c,function(a){if(Q)Kf(a);else{var c=W;a.selector=a.parsedSelector;Kf(a);a.selector=a.m=tf(c,a,c.c,void 0,void 0)}R&&(zg(b),b.a&&b.a.transformRule(a))});R?a.textContent=bf(c):this.h.w.rules.push(c)};\np.getComputedStyleValue=function(a,b){var c;R||(c=(X(a)||X(Cg(this,a))).B[b]);return(c=c||window.getComputedStyle(a).getPropertyValue(b))?c.trim():\"\"};p.Ya=function(a,b){var c=a.getRootNode();b=b?b.split(/\\s/):[];c=c.host&&c.host.localName;if(!c){var d=a.getAttribute(\"class\");if(d){d=d.split(/\\s/);for(var e=0;e<d.length;e++)if(d[e]===W.a){c=d[e+1];break}}}c&&b.push(W.a,c);R||(c=X(a))&&c.u&&b.push(eg.a,c.u);jf(a,b.join(\" \"))};p.Ia=function(a){return X(a)};Y.prototype.flush=Y.prototype.xa;\nY.prototype.prepareTemplate=Y.prototype.prepareTemplate;Y.prototype.styleElement=Y.prototype.styleElement;Y.prototype.styleDocument=Y.prototype.styleDocument;Y.prototype.styleSubtree=Y.prototype.styleSubtree;Y.prototype.getComputedStyleValue=Y.prototype.getComputedStyleValue;Y.prototype.setElementClass=Y.prototype.Ya;Y.prototype._styleInfoForNode=Y.prototype.Ia;Y.prototype.transformCustomStyleForDocument=Y.prototype.va;Y.prototype.getStyleAst=Y.prototype.La;Y.prototype.styleAstToString=Y.prototype.Za;\nY.prototype.flushCustomStyles=Y.prototype.F;Object.defineProperties(Y.prototype,{nativeShadow:{get:function(){return Q}},nativeCss:{get:function(){return R}}});var Z=new Y,Dg,Eg;window.ShadyCSS&&(Dg=window.ShadyCSS.ApplyShim,Eg=window.ShadyCSS.CustomStyleInterface);window.ShadyCSS={ScopingShim:Z,prepareTemplate:function(a,b,c){Z.F();Z.prepareTemplate(a,b,c)},styleSubtree:function(a,b){Z.F();Z.styleSubtree(a,b)},styleElement:function(a){Z.F();Z.styleElement(a)},styleDocument:function(a){Z.F();Z.styleDocument(a)},getComputedStyleValue:function(a,b){return Z.getComputedStyleValue(a,b)},nativeCss:R,nativeShadow:Q};Dg&&(window.ShadyCSS.ApplyShim=Dg);\nEg&&(window.ShadyCSS.CustomStyleInterface=Eg);var Fg=window.customElements,Gg=window.HTMLImports,Hg=window.HTMLTemplateElement;window.WebComponents=window.WebComponents||{};if(Fg&&Fg.polyfillWrapFlushCallback){var Ig,Jg=function(){if(Ig){Hg.J&&Hg.J(window.document);var a=Ig;Ig=null;a();return!0}},Kg=Gg.whenReady;Fg.polyfillWrapFlushCallback(function(a){Ig=a;Kg(Jg)});Gg.whenReady=function(a){Kg(function(){Jg()?Gg.whenReady(a):a()})}}\nGg.whenReady(function(){requestAnimationFrame(function(){window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent(\"WebComponentsReady\",{bubbles:!0}))})});var Lg=document.createElement(\"style\");Lg.textContent=\"body {transition: opacity ease-in 0.2s; } \\nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \\n\";var Mg=document.querySelector(\"head\");Mg.insertBefore(Lg,Mg.firstChild);}).call(this);\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

eval("/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function() {\n  'use strict';\n  // global for (1) existence means `WebComponentsReady` will file,\n  // (2) WebComponents.ready == true means event has fired.\n  window.WebComponents = window.WebComponents || {};\n  var name = 'webcomponents-loader.js';\n  // Feature detect which polyfill needs to be imported.\n  var polyfills = [];\n  if (!('import' in document.createElement('link'))) {\n    polyfills.push('hi');\n  }\n  if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||\n    (window.ShadyDOM && window.ShadyDOM.force)) {\n    polyfills.push('sd');\n  }\n  if (!window.customElements || window.customElements.forcePolyfill) {\n    polyfills.push('ce');\n  }\n  // NOTE: any browser that does not have template or ES6 features\n  // must load the full suite (called `lite` for legacy reasons) of polyfills.\n  if (!('content' in document.createElement('template')) || !window.Promise || !Array.from ||\n    // Edge has broken fragment cloning which means you cannot clone template.content\n    !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment)) {\n    polyfills = ['lite'];\n  }\n\n  if (polyfills.length) {\n    var script = document.querySelector('script[src*=\"' + name +'\"]');\n    var newScript = document.createElement('script');\n    // Load it from the right place.\n    var replacement = 'webcomponents-' + polyfills.join('-') + '.js';\n    var url = script.src.replace(name, replacement);\n    newScript.src = url;\n    // NOTE: this is required to ensure the polyfills are loaded before\n    // *native* html imports load on older Chrome versions. This *is* CSP\n    // compliant since CSP rules must have allowed this script to run.\n    // In all other cases, this can be async.\n    if (document.readyState === 'loading' && ('import' in document.createElement('link'))) {\n      document.write(newScript.outerHTML);\n    } else {\n      document.head.appendChild(newScript);\n    }\n  } else {\n    // Ensure `WebComponentsReady` is fired also when there are no polyfills loaded.\n    // however, we have to wait for the document to be in 'interactive' state,\n    // otherwise a rAF may fire before scripts in <body>\n\n    var fire = function() {\n      requestAnimationFrame(function() {\n        window.WebComponents.ready = true;\n        document.dispatchEvent(new CustomEvent('WebComponentsReady', {bubbles: true}));\n      });\n    };\n\n    if (document.readyState !== 'loading') {\n      fire();\n    } else {\n      document.addEventListener('readystatechange', function wait() {\n        fire();\n        document.removeEventListener('readystatechange', wait);\n      });\n    }\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWJjb21wb25lbnRzLWxvYWRlci5qcz8zMjczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsY0FBYztBQUNwRixPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gZ2xvYmFsIGZvciAoMSkgZXhpc3RlbmNlIG1lYW5zIGBXZWJDb21wb25lbnRzUmVhZHlgIHdpbGwgZmlsZSxcbiAgLy8gKDIpIFdlYkNvbXBvbmVudHMucmVhZHkgPT0gdHJ1ZSBtZWFucyBldmVudCBoYXMgZmlyZWQuXG4gIHdpbmRvdy5XZWJDb21wb25lbnRzID0gd2luZG93LldlYkNvbXBvbmVudHMgfHwge307XG4gIHZhciBuYW1lID0gJ3dlYmNvbXBvbmVudHMtbG9hZGVyLmpzJztcbiAgLy8gRmVhdHVyZSBkZXRlY3Qgd2hpY2ggcG9seWZpbGwgbmVlZHMgdG8gYmUgaW1wb3J0ZWQuXG4gIHZhciBwb2x5ZmlsbHMgPSBbXTtcbiAgaWYgKCEoJ2ltcG9ydCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpKSkge1xuICAgIHBvbHlmaWxscy5wdXNoKCdoaScpO1xuICB9XG4gIGlmICghKCdhdHRhY2hTaGFkb3cnIGluIEVsZW1lbnQucHJvdG90eXBlICYmICdnZXRSb290Tm9kZScgaW4gRWxlbWVudC5wcm90b3R5cGUpIHx8XG4gICAgKHdpbmRvdy5TaGFkeURPTSAmJiB3aW5kb3cuU2hhZHlET00uZm9yY2UpKSB7XG4gICAgcG9seWZpbGxzLnB1c2goJ3NkJyk7XG4gIH1cbiAgaWYgKCF3aW5kb3cuY3VzdG9tRWxlbWVudHMgfHwgd2luZG93LmN1c3RvbUVsZW1lbnRzLmZvcmNlUG9seWZpbGwpIHtcbiAgICBwb2x5ZmlsbHMucHVzaCgnY2UnKTtcbiAgfVxuICAvLyBOT1RFOiBhbnkgYnJvd3NlciB0aGF0IGRvZXMgbm90IGhhdmUgdGVtcGxhdGUgb3IgRVM2IGZlYXR1cmVzXG4gIC8vIG11c3QgbG9hZCB0aGUgZnVsbCBzdWl0ZSAoY2FsbGVkIGBsaXRlYCBmb3IgbGVnYWN5IHJlYXNvbnMpIG9mIHBvbHlmaWxscy5cbiAgaWYgKCEoJ2NvbnRlbnQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJykpIHx8ICF3aW5kb3cuUHJvbWlzZSB8fCAhQXJyYXkuZnJvbSB8fFxuICAgIC8vIEVkZ2UgaGFzIGJyb2tlbiBmcmFnbWVudCBjbG9uaW5nIHdoaWNoIG1lYW5zIHlvdSBjYW5ub3QgY2xvbmUgdGVtcGxhdGUuY29udGVudFxuICAgICEoZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmNsb25lTm9kZSgpIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkpIHtcbiAgICBwb2x5ZmlsbHMgPSBbJ2xpdGUnXTtcbiAgfVxuXG4gIGlmIChwb2x5ZmlsbHMubGVuZ3RoKSB7XG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmMqPVwiJyArIG5hbWUgKydcIl0nKTtcbiAgICB2YXIgbmV3U2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgLy8gTG9hZCBpdCBmcm9tIHRoZSByaWdodCBwbGFjZS5cbiAgICB2YXIgcmVwbGFjZW1lbnQgPSAnd2ViY29tcG9uZW50cy0nICsgcG9seWZpbGxzLmpvaW4oJy0nKSArICcuanMnO1xuICAgIHZhciB1cmwgPSBzY3JpcHQuc3JjLnJlcGxhY2UobmFtZSwgcmVwbGFjZW1lbnQpO1xuICAgIG5ld1NjcmlwdC5zcmMgPSB1cmw7XG4gICAgLy8gTk9URTogdGhpcyBpcyByZXF1aXJlZCB0byBlbnN1cmUgdGhlIHBvbHlmaWxscyBhcmUgbG9hZGVkIGJlZm9yZVxuICAgIC8vICpuYXRpdmUqIGh0bWwgaW1wb3J0cyBsb2FkIG9uIG9sZGVyIENocm9tZSB2ZXJzaW9ucy4gVGhpcyAqaXMqIENTUFxuICAgIC8vIGNvbXBsaWFudCBzaW5jZSBDU1AgcnVsZXMgbXVzdCBoYXZlIGFsbG93ZWQgdGhpcyBzY3JpcHQgdG8gcnVuLlxuICAgIC8vIEluIGFsbCBvdGhlciBjYXNlcywgdGhpcyBjYW4gYmUgYXN5bmMuXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJyAmJiAoJ2ltcG9ydCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpKSkge1xuICAgICAgZG9jdW1lbnQud3JpdGUobmV3U2NyaXB0Lm91dGVySFRNTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3U2NyaXB0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRW5zdXJlIGBXZWJDb21wb25lbnRzUmVhZHlgIGlzIGZpcmVkIGFsc28gd2hlbiB0aGVyZSBhcmUgbm8gcG9seWZpbGxzIGxvYWRlZC5cbiAgICAvLyBob3dldmVyLCB3ZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBkb2N1bWVudCB0byBiZSBpbiAnaW50ZXJhY3RpdmUnIHN0YXRlLFxuICAgIC8vIG90aGVyd2lzZSBhIHJBRiBtYXkgZmlyZSBiZWZvcmUgc2NyaXB0cyBpbiA8Ym9keT5cblxuICAgIHZhciBmaXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpbmRvdy5XZWJDb21wb25lbnRzLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1dlYkNvbXBvbmVudHNSZWFkeScsIHtidWJibGVzOiB0cnVlfSkpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgIGZpcmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICAgIGZpcmUoKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIHdhaXQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93ZWJjb21wb25lbnRzLWxvYWRlci5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(){/*\n\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';var n,p=\"undefined\"!=typeof window&&window===this?this:\"undefined\"!=typeof global&&null!=global?global:this,aa=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};function ba(){ba=function(){};p.Symbol||(p.Symbol=ca)}var ca=function(){var a=0;return function(b){return\"jscomp_symbol_\"+(b||\"\")+a++}}();\nfunction da(){ba();var a=p.Symbol.iterator;a||(a=p.Symbol.iterator=p.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[a]&&aa(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return ea(this)}});da=function(){}}function ea(a){var b=0;return fa(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function fa(a){da();a={next:a};a[p.Symbol.iterator]=function(){return this};return a}function ha(a){da();var b=a[Symbol.iterator];return b?b.call(a):ea(a)}\nfunction ia(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c}var r=window.ShadyDOM||{};r.va=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ja=Object.getOwnPropertyDescriptor(Node.prototype,\"firstChild\");r.F=!!(ja&&ja.configurable&&ja.get);r.ga=r.force||!r.va;function t(a){return a.__shady&&void 0!==a.__shady.firstChild}function u(a){return\"ShadyRoot\"===a.ma}function ka(a){a=a.getRootNode();if(u(a))return a}\nvar v=Element.prototype,la=v.matches||v.matchesSelector||v.mozMatchesSelector||v.msMatchesSelector||v.oMatchesSelector||v.webkitMatchesSelector;function ma(a,b){if(a&&b)for(var c=Object.getOwnPropertyNames(b),d=0,e;d<c.length&&(e=c[d]);d++){var f=Object.getOwnPropertyDescriptor(b,e);f&&Object.defineProperty(a,e,f)}}function na(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];for(d=0;d<c.length;d++)ma(a,c[d]);return a}function oa(a,b){for(var c in b)a[c]=b[c]}\nvar pa=document.createTextNode(\"\"),qa=0,ra=[];(new MutationObserver(function(){for(;ra.length;)try{ra.shift()()}catch(a){throw pa.textContent=qa++,a;}})).observe(pa,{characterData:!0});function sa(a){ra.push(a);pa.textContent=qa++}var ta=!!document.contains;function ua(a,b){for(;b;){if(b==a)return!0;b=b.parentNode}return!1};var va=[],wa;function xa(a){wa||(wa=!0,sa(ya));va.push(a)}function ya(){wa=!1;for(var a=!!va.length;va.length;)va.shift()();return a}ya.list=va;function za(){this.a=!1;this.addedNodes=[];this.removedNodes=[];this.M=new Set}function Aa(a){a.a||(a.a=!0,sa(function(){Ba(a)}))}function Ba(a){if(a.a){a.a=!1;var b=a.takeRecords();b.length&&a.M.forEach(function(a){a(b)})}}za.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var a=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];this.addedNodes=[];this.removedNodes=[];return a}return[]};\nfunction Ca(a,b){a.__shady=a.__shady||{};a.__shady.G||(a.__shady.G=new za);a.__shady.G.M.add(b);var c=a.__shady.G;return{pa:b,w:c,ra:a,takeRecords:function(){return c.takeRecords()}}}function Da(a){var b=a&&a.w;b&&(b.M.delete(a.pa),b.M.size||(a.ra.__shady.G=null))}\nfunction Ea(a,b){var c=b.getRootNode();return a.map(function(a){var b=c===a.target.getRootNode();if(b&&a.addedNodes){if(b=Array.from(a.addedNodes).filter(function(a){return c===a.getRootNode()}),b.length)return a=Object.create(a),Object.defineProperty(a,\"addedNodes\",{value:b,configurable:!0}),a}else if(b)return a}).filter(function(a){return a})};var w={},Fa=Element.prototype.insertBefore,Ga=Element.prototype.removeChild,Ha=Element.prototype.setAttribute,Ia=Element.prototype.removeAttribute,Ja=Element.prototype.cloneNode,Ka=Document.prototype.importNode,La=Element.prototype.addEventListener,Ma=Element.prototype.removeEventListener,Na=Window.prototype.addEventListener,Oa=Window.prototype.removeEventListener,Pa=Element.prototype.dispatchEvent,Qa=Element.prototype.querySelector,Ra=Element.prototype.querySelectorAll,Sa=Node.prototype.contains||\nHTMLElement.prototype.contains;w.appendChild=Element.prototype.appendChild;w.insertBefore=Fa;w.removeChild=Ga;w.setAttribute=Ha;w.removeAttribute=Ia;w.cloneNode=Ja;w.importNode=Ka;w.addEventListener=La;w.removeEventListener=Ma;w.Fa=Na;w.Ga=Oa;w.dispatchEvent=Pa;w.querySelector=Qa;w.querySelectorAll=Ra;w.contains=Sa;var Ta=/[&\\u00A0\"]/g,Ua=/[&\\u00A0<>]/g;function Va(a){switch(a){case \"&\":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Wa(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Xa=Wa(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Ya=Wa(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Za(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,h;e<f&&(h=d[e]);e++){a:{var g=h;var k=a;var l=b;switch(g.nodeType){case Node.ELEMENT_NODE:for(var m=g.localName,q=\"<\"+m,H=g.attributes,N=0;k=H[N];N++)q+=\" \"+k.name+'=\"'+k.value.replace(Ta,Va)+'\"';q+=\">\";g=Xa[m]?q:q+Za(g,l)+\"</\"+m+\">\";break a;case Node.TEXT_NODE:g=g.data;g=k&&Ya[k.localName]?g:g.replace(Ua,Va);break a;case Node.COMMENT_NODE:g=\"\\x3c!--\"+g.data+\"--\\x3e\";break a;default:throw window.console.error(g),\nError(\"not implemented\");}}c+=g}return c};var x={},y=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),z=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1);function $a(a){var b=[];y.currentNode=a;for(a=y.firstChild();a;)b.push(a),a=y.nextSibling();return b}x.parentNode=function(a){y.currentNode=a;return y.parentNode()};x.firstChild=function(a){y.currentNode=a;return y.firstChild()};x.lastChild=function(a){y.currentNode=a;return y.lastChild()};x.previousSibling=function(a){y.currentNode=a;return y.previousSibling()};\nx.nextSibling=function(a){y.currentNode=a;return y.nextSibling()};x.childNodes=$a;x.parentElement=function(a){z.currentNode=a;return z.parentNode()};x.firstElementChild=function(a){z.currentNode=a;return z.firstChild()};x.lastElementChild=function(a){z.currentNode=a;return z.lastChild()};x.previousElementSibling=function(a){z.currentNode=a;return z.previousSibling()};x.nextElementSibling=function(a){z.currentNode=a;return z.nextSibling()};\nx.children=function(a){var b=[];z.currentNode=a;for(a=z.firstChild();a;)b.push(a),a=z.nextSibling();return b};x.innerHTML=function(a){return Za(a,function(a){return $a(a)})};x.textContent=function(a){switch(a.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:a=document.createTreeWalker(a,NodeFilter.SHOW_TEXT,null,!1);for(var b=\"\",c;c=a.nextNode();)b+=c.nodeValue;return b;default:return a.nodeValue}};var ab=Object.getOwnPropertyDescriptor(Element.prototype,\"innerHTML\")||Object.getOwnPropertyDescriptor(HTMLElement.prototype,\"innerHTML\"),bb=document.implementation.createHTMLDocument(\"inert\"),cb=Object.getOwnPropertyDescriptor(Document.prototype,\"activeElement\"),db={parentElement:{get:function(){var a=this.__shady&&this.__shady.parentNode;a&&a.nodeType!==Node.ELEMENT_NODE&&(a=null);return void 0!==a?a:x.parentElement(this)},configurable:!0},parentNode:{get:function(){var a=this.__shady&&this.__shady.parentNode;\nreturn void 0!==a?a:x.parentNode(this)},configurable:!0},nextSibling:{get:function(){var a=this.__shady&&this.__shady.nextSibling;return void 0!==a?a:x.nextSibling(this)},configurable:!0},previousSibling:{get:function(){var a=this.__shady&&this.__shady.previousSibling;return void 0!==a?a:x.previousSibling(this)},configurable:!0},className:{get:function(){return this.getAttribute(\"class\")||\"\"},set:function(a){this.setAttribute(\"class\",a)},configurable:!0},nextElementSibling:{get:function(){if(this.__shady&&\nvoid 0!==this.__shady.nextSibling){for(var a=this.nextSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return x.nextElementSibling(this)},configurable:!0},previousElementSibling:{get:function(){if(this.__shady&&void 0!==this.__shady.previousSibling){for(var a=this.previousSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return x.previousElementSibling(this)},configurable:!0}},eb={childNodes:{get:function(){if(t(this)){if(!this.__shady.childNodes){this.__shady.childNodes=\n[];for(var a=this.firstChild;a;a=a.nextSibling)this.__shady.childNodes.push(a)}var b=this.__shady.childNodes}else b=x.childNodes(this);b.item=function(a){return b[a]};return b},configurable:!0},childElementCount:{get:function(){return this.children.length},configurable:!0},firstChild:{get:function(){var a=this.__shady&&this.__shady.firstChild;return void 0!==a?a:x.firstChild(this)},configurable:!0},lastChild:{get:function(){var a=this.__shady&&this.__shady.lastChild;return void 0!==a?a:x.lastChild(this)},\nconfigurable:!0},textContent:{get:function(){if(t(this)){for(var a=[],b=0,c=this.childNodes,d;d=c[b];b++)d.nodeType!==Node.COMMENT_NODE&&a.push(d.textContent);return a.join(\"\")}return x.textContent(this)},set:function(a){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(;this.firstChild;)this.removeChild(this.firstChild);(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.appendChild(document.createTextNode(a));break;default:this.nodeValue=a}},configurable:!0},firstElementChild:{get:function(){if(this.__shady&&\nvoid 0!==this.__shady.firstChild){for(var a=this.firstChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return x.firstElementChild(this)},configurable:!0},lastElementChild:{get:function(){if(this.__shady&&void 0!==this.__shady.lastChild){for(var a=this.lastChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return x.lastElementChild(this)},configurable:!0},children:{get:function(){var a;t(this)?a=Array.prototype.filter.call(this.childNodes,function(a){return a.nodeType===\nNode.ELEMENT_NODE}):a=x.children(this);a.item=function(b){return a[b]};return a},configurable:!0},innerHTML:{get:function(){var a=\"template\"===this.localName?this.content:this;return t(this)?Za(a):x.innerHTML(a)},set:function(a){for(var b=\"template\"===this.localName?this.content:this;b.firstChild;)b.removeChild(b.firstChild);var c=this.localName;c&&\"template\"!==c||(c=\"div\");c=bb.createElement(c);for(ab&&ab.set?ab.set.call(c,a):c.innerHTML=a;c.firstChild;)b.appendChild(c.firstChild)},configurable:!0}},\nfb={shadowRoot:{get:function(){return this.__shady&&this.__shady.za||null},configurable:!0}},gb={activeElement:{get:function(){var a=cb&&cb.get?cb.get.call(document):r.F?void 0:document.activeElement;if(a&&a.nodeType){var b=!!u(this);if(this===document||b&&this.host!==a&&w.contains.call(this.host,a)){for(b=ka(a);b&&b!==this;)a=b.host,b=ka(a);a=this===document?b?null:a:b===this?a:null}else a=null}else a=null;return a},set:function(){},configurable:!0}};\nfunction A(a,b,c){for(var d in b){var e=Object.getOwnPropertyDescriptor(a,d);e&&e.configurable||!e&&c?Object.defineProperty(a,d,b[d]):c&&console.warn(\"Could not define\",d,\"on\",a)}}function B(a){A(a,db);A(a,eb);A(a,gb)}var hb=r.F?function(){}:function(a){a.__shady&&a.__shady.na||(a.__shady=a.__shady||{},a.__shady.na=!0,A(a,db,!0))},ib=r.F?function(){}:function(a){a.__shady&&a.__shady.la||(a.__shady=a.__shady||{},a.__shady.la=!0,A(a,eb,!0),A(a,fb,!0))};function jb(a,b,c){hb(a);c=c||null;a.__shady=a.__shady||{};b.__shady=b.__shady||{};c&&(c.__shady=c.__shady||{});a.__shady.previousSibling=c?c.__shady.previousSibling:b.lastChild;var d=a.__shady.previousSibling;d&&d.__shady&&(d.__shady.nextSibling=a);(d=a.__shady.nextSibling=c)&&d.__shady&&(d.__shady.previousSibling=a);a.__shady.parentNode=b;c?c===b.__shady.firstChild&&(b.__shady.firstChild=a):(b.__shady.lastChild=a,b.__shady.firstChild||(b.__shady.firstChild=a));b.__shady.childNodes=null}\nfunction kb(a){if(!a.__shady||void 0===a.__shady.firstChild){a.__shady=a.__shady||{};a.__shady.firstChild=x.firstChild(a);a.__shady.lastChild=x.lastChild(a);ib(a);for(var b=a.__shady.childNodes=x.childNodes(a),c=0,d;c<b.length&&(d=b[c]);c++)d.__shady=d.__shady||{},d.__shady.parentNode=a,d.__shady.nextSibling=b[c+1]||null,d.__shady.previousSibling=b[c-1]||null,hb(d)}};function lb(a,b,c){if(b===a)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");if(c){var d=c.__shady&&c.__shady.parentNode;if(void 0!==d&&d!==a||void 0===d&&x.parentNode(c)!==a)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(c===b)return b;b.parentNode&&mb(b.parentNode,b);d=ka(a);var e;if(e=d)a:{if(!b.__noInsertionPoint){var f;\"slot\"===b.localName?f=[b]:\nb.querySelectorAll&&(f=b.querySelectorAll(\"slot\"));if(f&&f.length){e=f;break a}}e=void 0}(f=e)&&d.C.push.apply(d.C,[].concat(f instanceof Array?f:ia(ha(f))));d&&(\"slot\"===a.localName||f)&&C(d);if(t(a)){d=c;ib(a);a.__shady=a.__shady||{};void 0!==a.__shady.firstChild&&(a.__shady.childNodes=null);if(b.nodeType===Node.DOCUMENT_FRAGMENT_NODE){f=b.childNodes;for(e=0;e<f.length;e++)jb(f[e],a,d);b.__shady=b.__shady||{};d=void 0!==b.__shady.firstChild?null:void 0;b.__shady.firstChild=b.__shady.lastChild=d;\nb.__shady.childNodes=d}else jb(b,a,d);if(nb(a)){C(a.__shady.root);var h=!0}else a.__shady.root&&(h=!0)}h||(h=u(a)?a.host:a,c?(c=ob(c),w.insertBefore.call(h,b,c)):w.appendChild.call(h,b));pb(a,b);return b}\nfunction mb(a,b){if(b.parentNode!==a)throw Error(\"The node to be removed is not a child of this node: \"+b);var c=ka(b);if(t(a)){b.__shady=b.__shady||{};a.__shady=a.__shady||{};b===a.__shady.firstChild&&(a.__shady.firstChild=b.__shady.nextSibling);b===a.__shady.lastChild&&(a.__shady.lastChild=b.__shady.previousSibling);var d=b.__shady.previousSibling,e=b.__shady.nextSibling;d&&(d.__shady=d.__shady||{},d.__shady.nextSibling=e);e&&(e.__shady=e.__shady||{},e.__shady.previousSibling=d);b.__shady.parentNode=\nb.__shady.previousSibling=b.__shady.nextSibling=void 0;void 0!==a.__shady.childNodes&&(a.__shady.childNodes=null);if(nb(a)){C(a.__shady.root);var f=!0}}qb(b);if(c){(d=a&&\"slot\"===a.localName)&&(f=!0);rb(c);e=c.h;for(var h in e)for(var g=e[h],k=0;k<g.length;k++){var l=g[k];if(ua(b,l)){g.splice(k,1);var m=c.l.indexOf(l);0<=m&&c.l.splice(m,1);k--;if(m=l.__shady.D)for(l=0;l<m.length;l++){var q=m[l],H=x.parentNode(q);H&&w.removeChild.call(H,q)}m=!0}}(m||d)&&C(c)}f||(f=u(a)?a.host:a,(!a.__shady.root&&\"slot\"!==\nb.localName||f===x.parentNode(b))&&w.removeChild.call(f,b));pb(a,null,b);return b}function qb(a){if(a.__shady&&void 0!==a.__shady.aa)for(var b=a.childNodes,c=0,d=b.length,e;c<d&&(e=b[c]);c++)qb(e);a.__shady&&(a.__shady.aa=void 0)}function ob(a){var b=a;a&&\"slot\"===a.localName&&(b=(b=a.__shady&&a.__shady.D)&&b.length?b[0]:ob(a.nextSibling));return b}function nb(a){return(a=a&&a.__shady&&a.__shady.root)&&sb(a)}\nfunction tb(a,b){if(\"slot\"===b)a=a.parentNode,nb(a)&&C(a.__shady.root);else if(\"slot\"===a.localName&&\"name\"===b&&(b=ka(a))){var c=a.oa,d=ub(a);if(d!==c){c=b.h[c];var e=c.indexOf(a);0<=e&&c.splice(e,1);c=b.h[d]||(b.h[d]=[]);c.push(a);1<c.length&&(b.h[d]=vb(c))}C(b)}}function pb(a,b,c){if(a=a.__shady&&a.__shady.G)b&&a.addedNodes.push(b),c&&a.removedNodes.push(c),Aa(a)}\nfunction wb(a){if(a&&a.nodeType){a.__shady=a.__shady||{};var b=a.__shady.aa;void 0===b&&(u(a)?b=a:b=(b=a.parentNode)?wb(b):a,w.contains.call(document.documentElement,a)&&(a.__shady.aa=b));return b}}function xb(a,b,c){var d=[];yb(a.childNodes,b,c,d);return d}function yb(a,b,c,d){for(var e=0,f=a.length,h;e<f&&(h=a[e]);e++){var g;if(g=h.nodeType===Node.ELEMENT_NODE){g=h;var k=b,l=c,m=d,q=k(g);q&&m.push(g);l&&l(q)?g=q:(yb(g.childNodes,k,l,m),g=void 0)}if(g)break}}var zb=null;\nfunction Ab(a,b,c){zb||(zb=window.ShadyCSS&&window.ShadyCSS.ScopingShim);zb&&\"class\"===b?zb.setElementClass(a,c):(w.setAttribute.call(a,b,c),tb(a,b))}function Bb(a,b){if(a.ownerDocument!==document)return w.importNode.call(document,a,b);var c=w.importNode.call(document,a,!1);if(b){a=a.childNodes;b=0;for(var d;b<a.length;b++)d=Bb(a[b],!0),c.appendChild(d)}return c};var Cb=\"__eventWrappers\"+Date.now(),Db={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,\ndragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0};function Eb(a,b){var c=[],d=a;for(a=a===window?window:a.getRootNode();d;)c.push(d),d=d.assignedSlot?d.assignedSlot:d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&d.host&&(b||d!==a)?d.host:d.parentNode;c[c.length-1]===document&&c.push(window);return c}\nfunction Fb(a,b){if(!u)return a;a=Eb(a,!0);for(var c=0,d,e,f,h;c<b.length;c++)if(d=b[c],f=d===window?window:d.getRootNode(),f!==e&&(h=a.indexOf(f),e=f),!u(f)||-1<h)return d}\nvar Gb={get composed(){!1!==this.isTrusted&&void 0===this.P&&(this.P=Db[this.type]);return this.P||!1},composedPath:function(){this.ba||(this.ba=Eb(this.__target,this.composed));return this.ba},get target(){return Fb(this.currentTarget,this.composedPath())},get relatedTarget(){if(!this.S)return null;this.ca||(this.ca=Eb(this.S,!0));return Fb(this.currentTarget,this.ca)},stopPropagation:function(){Event.prototype.stopPropagation.call(this);this.R=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this);\nthis.R=this.ka=!0}};function Hb(a){function b(b,d){b=new a(b,d);b.P=d&&!!d.composed;return b}oa(b,a);b.prototype=a.prototype;return b}var Ib={focus:!0,blur:!0};function Jb(a){return a.__target!==a.target||a.S!==a.relatedTarget}function Kb(a,b,c){if(c=b.__handlers&&b.__handlers[a.type]&&b.__handlers[a.type][c])for(var d=0,e;(e=c[d])&&(!Jb(a)||a.target!==a.relatedTarget)&&(e.call(b,a),!a.ka);d++);}\nfunction Lb(a){var b=a.composedPath();Object.defineProperty(a,\"currentTarget\",{get:function(){return d},configurable:!0});for(var c=b.length-1;0<=c;c--){var d=b[c];Kb(a,d,\"capture\");if(a.R)return}Object.defineProperty(a,\"eventPhase\",{get:function(){return Event.AT_TARGET}});var e;for(c=0;c<b.length;c++){d=b[c];var f=d.__shady&&d.__shady.root;if(0===c||f&&f===e)if(Kb(a,d,\"bubble\"),d!==window&&(e=d.getRootNode()),a.R)break}}\nfunction Mb(a,b,c,d,e,f){for(var h=0;h<a.length;h++){var g=a[h],k=g.type,l=g.capture,m=g.once,q=g.passive;if(b===g.node&&c===k&&d===l&&e===m&&f===q)return h}return-1}\nfunction Nb(a,b,c){if(b){if(c&&\"object\"===typeof c){var d=!!c.capture;var e=!!c.once;var f=!!c.passive}else d=!!c,f=e=!1;var h=c&&c.T||this,g=b[Cb];if(g){if(-1<Mb(g,h,a,d,e,f))return}else b[Cb]=[];g=function(d){e&&this.removeEventListener(a,b,c);d.__target||Ob(d);if(h!==this){var f=Object.getOwnPropertyDescriptor(d,\"currentTarget\");Object.defineProperty(d,\"currentTarget\",{get:function(){return h},configurable:!0})}if(d.composed||-1<d.composedPath().indexOf(h))if(Jb(d)&&d.target===d.relatedTarget)d.eventPhase===\nEvent.BUBBLING_PHASE&&d.stopImmediatePropagation();else if(d.eventPhase===Event.CAPTURING_PHASE||d.bubbles||d.target===h||h instanceof Window){var g=\"object\"===typeof b&&b.handleEvent?b.handleEvent(d):b.call(h,d);h!==this&&(f?(Object.defineProperty(d,\"currentTarget\",f),f=null):delete d.currentTarget);return g}};b[Cb].push({node:this,type:a,capture:d,once:e,passive:f,Ha:g});Ib[a]?(this.__handlers=this.__handlers||{},this.__handlers[a]=this.__handlers[a]||{capture:[],bubble:[]},this.__handlers[a][d?\n\"capture\":\"bubble\"].push(g)):(this instanceof Window?w.Fa:w.addEventListener).call(this,a,g,c)}}\nfunction Pb(a,b,c){if(b){if(c&&\"object\"===typeof c){var d=!!c.capture;var e=!!c.once;var f=!!c.passive}else d=!!c,f=e=!1;var h=c&&c.T||this,g=void 0;var k=null;try{k=b[Cb]}catch(l){}k&&(e=Mb(k,h,a,d,e,f),-1<e&&(g=k.splice(e,1)[0].Ha,k.length||(b[Cb]=void 0)));(this instanceof Window?w.Ga:w.removeEventListener).call(this,a,g||b,c);g&&Ib[a]&&this.__handlers&&this.__handlers[a]&&(a=this.__handlers[a][d?\"capture\":\"bubble\"],g=a.indexOf(g),-1<g&&a.splice(g,1))}}\nfunction Qb(){for(var a in Ib)window.addEventListener(a,function(a){a.__target||(Ob(a),Lb(a))},!0)}function Ob(a){a.__target=a.target;a.S=a.relatedTarget;if(r.F){var b=Object.getPrototypeOf(a);if(!b.hasOwnProperty(\"__patchProto\")){var c=Object.create(b);c.Ja=b;ma(c,Gb);b.__patchProto=c}a.__proto__=b.__patchProto}else ma(a,Gb)}var Rb=Hb(window.Event),Sb=Hb(window.CustomEvent),Tb=Hb(window.MouseEvent);function Ub(a,b){return{index:a,H:[],L:b}}\nfunction Vb(a,b,c,d){var e=0,f=0,h=0,g=0,k=Math.min(b-e,d-f);if(0==e&&0==f)a:{for(h=0;h<k;h++)if(a[h]!==c[h])break a;h=k}if(b==a.length&&d==c.length){g=a.length;for(var l=c.length,m=0;m<k-h&&Wb(a[--g],c[--l]);)m++;g=m}e+=h;f+=h;b-=g;d-=g;if(0==b-e&&0==d-f)return[];if(e==b){for(b=Ub(e,0);f<d;)b.H.push(c[f++]);return[b]}if(f==d)return[Ub(e,b-e)];k=e;h=f;d=d-h+1;g=b-k+1;b=Array(d);for(l=0;l<d;l++)b[l]=Array(g),b[l][0]=l;for(l=0;l<g;l++)b[0][l]=l;for(l=1;l<d;l++)for(m=1;m<g;m++)if(a[k+m-1]===c[h+l-1])b[l][m]=\nb[l-1][m-1];else{var q=b[l-1][m]+1,H=b[l][m-1]+1;b[l][m]=q<H?q:H}k=b.length-1;h=b[0].length-1;d=b[k][h];for(a=[];0<k||0<h;)0==k?(a.push(2),h--):0==h?(a.push(3),k--):(g=b[k-1][h-1],l=b[k-1][h],m=b[k][h-1],q=l<m?l<g?l:g:m<g?m:g,q==g?(g==d?a.push(0):(a.push(1),d=g),k--,h--):q==l?(a.push(3),k--,d=l):(a.push(2),h--,d=m));a.reverse();b=void 0;k=[];for(h=0;h<a.length;h++)switch(a[h]){case 0:b&&(k.push(b),b=void 0);e++;f++;break;case 1:b||(b=Ub(e,0));b.L++;e++;b.H.push(c[f]);f++;break;case 2:b||(b=Ub(e,0));\nb.L++;e++;break;case 3:b||(b=Ub(e,0)),b.H.push(c[f]),f++}b&&k.push(b);return k}function Wb(a,b){return a===b};var Xb={};function D(a,b,c){if(a!==Xb)throw new TypeError(\"Illegal constructor\");a=document.createDocumentFragment();a.__proto__=D.prototype;a.ma=\"ShadyRoot\";kb(b);kb(a);a.host=b;a.a=c&&c.mode;b.__shady=b.__shady||{};b.__shady.root=a;b.__shady.za=\"closed\"!==a.a?a:null;a.K=!1;a.l=[];a.h={};a.C=[];c=x.childNodes(b);for(var d=0,e=c.length;d<e;d++)w.removeChild.call(b,c[d]);return a}D.prototype=Object.create(DocumentFragment.prototype);function C(a){a.K||(a.K=!0,xa(function(){return Yb(a)}))}\nfunction Yb(a){for(var b;a;){a.K&&(b=a);a:{var c=a;a=c.host.getRootNode();if(u(a))for(var d=c.host.childNodes,e=0;e<d.length;e++)if(c=d[e],\"slot\"==c.localName)break a;a=void 0}}b&&b._renderRoot()}\nD.prototype._renderRoot=function(){this.K=!1;rb(this);for(var a=0,b;a<this.l.length;a++){b=this.l[a];var c=b.__shady.assignedNodes;b.__shady.assignedNodes=[];b.__shady.D=[];if(b.__shady.da=c)for(var d=0;d<c.length;d++){var e=c[d];e.__shady.X=e.__shady.assignedSlot;e.__shady.assignedSlot===b&&(e.__shady.assignedSlot=null)}}for(b=this.host.firstChild;b;b=b.nextSibling)Zb(this,b);for(a=0;a<this.l.length;a++){b=this.l[a];if(!b.__shady.assignedNodes.length)for(c=b.firstChild;c;c=c.nextSibling)Zb(this,\nc,b);c=b.parentNode;(c=c.__shady&&c.__shady.root)&&sb(c)&&c._renderRoot();$b(this,b.__shady.D,b.__shady.assignedNodes);if(c=b.__shady.da){for(d=0;d<c.length;d++)c[d].__shady.X=null;b.__shady.da=null;c.length>b.__shady.assignedNodes.length&&(b.__shady.Z=!0)}b.__shady.Z&&(b.__shady.Z=!1,ac(this,b))}a=this.l;b=[];for(c=0;c<a.length;c++)d=a[c].parentNode,d.__shady&&d.__shady.root||!(0>b.indexOf(d))||b.push(d);for(a=0;a<b.length;a++){c=b[a];d=c===this?this.host:c;e=[];c=c.childNodes;for(var f=0;f<c.length;f++){var h=\nc[f];if(\"slot\"==h.localName){h=h.__shady.D;for(var g=0;g<h.length;g++)e.push(h[g])}else e.push(h)}c=void 0;f=x.childNodes(d);h=Vb(e,e.length,f,f.length);for(var k=g=0;g<h.length&&(c=h[g]);g++){for(var l=0,m;l<c.H.length&&(m=c.H[l]);l++)x.parentNode(m)===d&&w.removeChild.call(d,m),f.splice(c.index+k,1);k-=c.L}for(k=0;k<h.length&&(c=h[k]);k++)for(g=f[c.index],l=c.index;l<c.index+c.L;l++)m=e[l],w.insertBefore.call(d,m,g),f.splice(l,0,m)}};\nfunction Zb(a,b,c){b.__shady=b.__shady||{};var d=b.__shady.X;b.__shady.X=null;c||(c=(a=a.h[b.slot||\"__catchall\"])&&a[0]);c?(c.__shady.assignedNodes.push(b),b.__shady.assignedSlot=c):b.__shady.assignedSlot=void 0;d!==b.__shady.assignedSlot&&b.__shady.assignedSlot&&(b.__shady.assignedSlot.__shady.Z=!0)}function $b(a,b,c){for(var d=0,e;d<c.length&&(e=c[d]);d++)if(\"slot\"==e.localName){var f=e.__shady.assignedNodes;f&&f.length&&$b(a,b,f)}else b.push(c[d])}\nfunction ac(a,b){w.dispatchEvent.call(b,new Event(\"slotchange\"));b.__shady.assignedSlot&&ac(a,b.__shady.assignedSlot)}function rb(a){if(a.C.length){for(var b=a.C,c,d=0;d<b.length;d++){var e=b[d];e.__shady=e.__shady||{};kb(e);kb(e.parentNode);var f=ub(e);a.h[f]?(c=c||{},c[f]=!0,a.h[f].push(e)):a.h[f]=[e];a.l.push(e)}if(c)for(var h in c)a.h[h]=vb(a.h[h]);a.C=[]}}function ub(a){var b=a.name||a.getAttribute(\"name\")||\"__catchall\";return a.oa=b}\nfunction vb(a){return a.sort(function(a,c){a=bc(a);for(var b=bc(c),e=0;e<a.length;e++){c=a[e];var f=b[e];if(c!==f)return a=Array.from(c.parentNode.childNodes),a.indexOf(c)-a.indexOf(f)}})}function bc(a){var b=[];do b.unshift(a);while(a=a.parentNode);return b}function sb(a){rb(a);return!!a.l.length}D.prototype.addEventListener=function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.T=this;this.host.addEventListener(a,b,c)};\nD.prototype.removeEventListener=function(a,b,c){\"object\"!==typeof c&&(c={capture:!!c});c.T=this;this.host.removeEventListener(a,b,c)};D.prototype.getElementById=function(a){return xb(this,function(b){return b.id==a},function(a){return!!a})[0]||null};var cc=D.prototype;A(cc,eb,!0);A(cc,gb,!0);function dc(a){var b=a.getRootNode();u(b)&&Yb(b);return a.__shady&&a.__shady.assignedSlot||null}\nvar ec={addEventListener:Nb.bind(window),removeEventListener:Pb.bind(window)},fc={addEventListener:Nb,removeEventListener:Pb,appendChild:function(a){return lb(this,a)},insertBefore:function(a,b){return lb(this,a,b)},removeChild:function(a){return mb(this,a)},replaceChild:function(a,b){lb(this,a,b);mb(this,b);return a},cloneNode:function(a){if(\"template\"==this.localName)var b=w.cloneNode.call(this,a);else if(b=w.cloneNode.call(this,!1),a){a=this.childNodes;for(var c=0,d;c<a.length;c++)d=a[c].cloneNode(!0),\nb.appendChild(d)}return b},getRootNode:function(){return wb(this)},contains:function(a){return ua(this,a)},get isConnected(){var a=this.ownerDocument;if(ta&&w.contains.call(a,this)||a.documentElement&&w.contains.call(a.documentElement,this))return!0;for(a=this;a&&!(a instanceof Document);)a=a.parentNode||(a instanceof D?a.host:void 0);return!!(a&&a instanceof Document)},dispatchEvent:function(a){ya();return w.dispatchEvent.call(this,a)}},gc={get assignedSlot(){return dc(this)}},hc={querySelector:function(a){return xb(this,\nfunction(b){return la.call(b,a)},function(a){return!!a})[0]||null},querySelectorAll:function(a){return xb(this,function(b){return la.call(b,a)})}},ic={assignedNodes:function(a){if(\"slot\"===this.localName){var b=this.getRootNode();u(b)&&Yb(b);return this.__shady?(a&&a.flatten?this.__shady.D:this.__shady.assignedNodes)||[]:[]}}},jc=na({setAttribute:function(a,b){Ab(this,a,b)},removeAttribute:function(a){w.removeAttribute.call(this,a);tb(this,a)},attachShadow:function(a){if(!this)throw\"Must provide a host.\";\nif(!a)throw\"Not enough arguments.\";return new D(Xb,this,a)},get slot(){return this.getAttribute(\"slot\")},set slot(a){Ab(this,\"slot\",a)},get assignedSlot(){return dc(this)}},hc,ic);Object.defineProperties(jc,fb);var kc=na({importNode:function(a,b){return Bb(a,b)},getElementById:function(a){return xb(this,function(b){return b.id==a},function(a){return!!a})[0]||null}},hc);Object.defineProperties(kc,{_activeElement:gb.activeElement});\nvar lc=HTMLElement.prototype.blur,mc=na({blur:function(){var a=this.__shady&&this.__shady.root;(a=a&&a.activeElement)?a.blur():lc.call(this)}});function E(a,b){for(var c=Object.getOwnPropertyNames(b),d=0;d<c.length;d++){var e=c[d],f=Object.getOwnPropertyDescriptor(b,e);f.value?a[e]=f.value:Object.defineProperty(a,e,f)}};if(r.ga){var ShadyDOM={inUse:r.ga,patch:function(a){return a},isShadyRoot:u,enqueue:xa,flush:ya,settings:r,filterMutations:Ea,observeChildren:Ca,unobserveChildren:Da,nativeMethods:w,nativeTree:x};window.ShadyDOM=ShadyDOM;window.Event=Rb;window.CustomEvent=Sb;window.MouseEvent=Tb;Qb();var nc=window.customElements&&window.customElements.nativeHTMLElement||HTMLElement;E(window.Node.prototype,fc);E(window.Window.prototype,ec);E(window.Text.prototype,gc);E(window.DocumentFragment.prototype,hc);E(window.Element.prototype,\njc);E(window.Document.prototype,kc);window.HTMLSlotElement&&E(window.HTMLSlotElement.prototype,ic);E(nc.prototype,mc);r.F&&(B(window.Node.prototype),B(window.Text.prototype),B(window.DocumentFragment.prototype),B(window.Element.prototype),B(nc.prototype),B(window.Document.prototype),window.HTMLSlotElement&&B(window.HTMLSlotElement.prototype));window.ShadowRoot=D};var oc=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function pc(a){var b=oc.has(a);a=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(a);return!b&&a}function F(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return!(!a||!(a.__CE_isImportDocument||a instanceof Document))}\nfunction qc(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}\nfunction G(a,b,c){c=void 0===c?new Set:c;for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)G(d,b,c);d=qc(a,e);continue}else if(\"template\"===f){d=qc(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)G(e,b,c)}d=d.firstChild?d.firstChild:qc(a,d)}}function I(a,b,c){a[b]=c};function rc(){this.a=new Map;this.u=new Map;this.i=[];this.c=!1}function sc(a,b,c){a.a.set(b,c);a.u.set(c.constructor,c)}function tc(a,b){a.c=!0;a.i.push(b)}function uc(a,b){a.c&&G(b,function(b){return a.b(b)})}rc.prototype.b=function(a){if(this.c&&!a.__CE_patched){a.__CE_patched=!0;for(var b=0;b<this.i.length;b++)this.i[b](a)}};function J(a,b){var c=[];G(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):vc(a,d)}}\nfunction K(a,b){var c=[];G(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d)}}\nfunction L(a,b,c){c=void 0===c?{}:c;var d=c.Ea||new Set,e=c.ia||function(b){return vc(a,b)},f=[];G(b,function(b){if(\"link\"===b.localName&&\"import\"===b.getAttribute(\"rel\")){var c=b.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:b.addEventListener(\"load\",function(){var c=b.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);L(a,c,{Ea:f,ia:e})}})}else f.push(b)},d);if(a.c)for(b=\n0;b<f.length;b++)a.b(f[b]);for(b=0;b<f.length;b++)e(f[b])}\nfunction vc(a,b){if(void 0===b.__CE_state){var c=b.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=a.a.get(b.localName)){c.constructionStack.push(b);var d=c.constructor;try{try{if(new d!==b)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(h){throw b.__CE_state=2,h;}b.__CE_state=1;b.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\nf=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null)}F(b)&&a.connectedCallback(b)}}}rc.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a)};rc.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a)};\nrc.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,c,d,e)};function wc(a){var b=document;this.g=a;this.a=b;this.w=void 0;L(this.g,this.a);\"loading\"===this.a.readyState&&(this.w=new MutationObserver(this.b.bind(this)),this.w.observe(this.a,{childList:!0,subtree:!0}))}function xc(a){a.w&&a.w.disconnect()}wc.prototype.b=function(a){var b=this.a.readyState;\"interactive\"!==b&&\"complete\"!==b||xc(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)L(this.g,c[d])};function yc(){var a=this;this.b=this.a=void 0;this.c=new Promise(function(b){a.b=b;a.a&&b(a.a)})}function zc(a){if(a.a)throw Error(\"Already resolved.\");a.a=void 0;a.b&&a.b(void 0)};function M(a){this.U=!1;this.g=a;this.Y=new Map;this.V=function(a){return a()};this.J=!1;this.W=[];this.qa=new wc(a)}\nM.prototype.define=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!pc(a))throw new SyntaxError(\"The element name '\"+a+\"' is not valid.\");if(this.g.a.get(a))throw Error(\"A custom element with name '\"+a+\"' has already been defined.\");if(this.U)throw Error(\"A custom element is already being defined.\");this.U=!0;try{var d=function(a){var b=e[a];if(void 0!==b&&!(b instanceof Function))throw Error(\"The '\"+a+\"' callback must be a function.\");\nreturn b},e=b.prototype;if(!(e instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");var f=d(\"connectedCallback\");var h=d(\"disconnectedCallback\");var g=d(\"adoptedCallback\");var k=d(\"attributeChangedCallback\");var l=b.observedAttributes||[]}catch(m){return}finally{this.U=!1}b={localName:a,constructor:b,connectedCallback:f,disconnectedCallback:h,adoptedCallback:g,attributeChangedCallback:k,observedAttributes:l,constructionStack:[]};sc(this.g,a,b);this.W.push(b);\nthis.J||(this.J=!0,this.V(function(){return Ac(c)}))};function Ac(a){if(!1!==a.J){a.J=!1;for(var b=a.W,c=[],d=new Map,e=0;e<b.length;e++)d.set(b[e].localName,[]);L(a.g,document,{ia:function(b){if(void 0===b.__CE_state){var e=b.localName,f=d.get(e);f?f.push(b):a.g.a.get(e)&&c.push(b)}}});for(e=0;e<c.length;e++)vc(a.g,c[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=d.get(f.localName);for(var h=0;h<f.length;h++)vc(a.g,f[h]);(e=a.Y.get(e))&&zc(e)}}}M.prototype.get=function(a){if(a=this.g.a.get(a))return a.constructor};\nM.prototype.whenDefined=function(a){if(!pc(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Y.get(a);if(b)return b.c;b=new yc;this.Y.set(a,b);this.g.a.get(a)&&!this.W.some(function(b){return b.localName===a})&&zc(b);return b.c};M.prototype.ya=function(a){xc(this.qa);var b=this.V;this.V=function(c){return a(function(){return b(c)})}};window.CustomElementRegistry=M;M.prototype.define=M.prototype.define;M.prototype.get=M.prototype.get;\nM.prototype.whenDefined=M.prototype.whenDefined;M.prototype.polyfillWrapFlushCallback=M.prototype.ya;var Bc=window.Document.prototype.createElement,Cc=window.Document.prototype.createElementNS,Dc=window.Document.prototype.importNode,Ec=window.Document.prototype.prepend,Fc=window.Document.prototype.append,Gc=window.DocumentFragment.prototype.prepend,Hc=window.DocumentFragment.prototype.append,Ic=window.Node.prototype.cloneNode,Jc=window.Node.prototype.appendChild,Kc=window.Node.prototype.insertBefore,Lc=window.Node.prototype.removeChild,Mc=window.Node.prototype.replaceChild,Nc=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),Oc=window.Element.prototype.attachShadow,Pc=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),Qc=window.Element.prototype.getAttribute,Rc=window.Element.prototype.setAttribute,Sc=window.Element.prototype.removeAttribute,Tc=window.Element.prototype.getAttributeNS,Uc=window.Element.prototype.setAttributeNS,Vc=window.Element.prototype.removeAttributeNS,Wc=window.Element.prototype.insertAdjacentElement,Xc=window.Element.prototype.prepend,Yc=window.Element.prototype.append,\nZc=window.Element.prototype.before,$c=window.Element.prototype.after,ad=window.Element.prototype.replaceWith,bd=window.Element.prototype.remove,cd=window.HTMLElement,dd=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),ed=window.HTMLElement.prototype.insertAdjacentElement;var fd=new function(){};function gd(){var a=O;window.HTMLElement=function(){function b(){var b=this.constructor,d=a.u.get(b);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=Bc.call(document,d.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=d,a.b(e),e;d=e.length-1;var f=e[d];if(f===fd)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=fd;Object.setPrototypeOf(f,b.prototype);a.b(f);return f}b.prototype=cd.prototype;return b}()};function hd(a,b,c){function d(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];e=[];for(var f=[],l=0;l<d.length;l++){var m=d[l];m instanceof Element&&F(m)&&f.push(m);if(m instanceof DocumentFragment)for(m=m.firstChild;m;m=m.nextSibling)e.push(m);else e.push(m)}b.apply(this,d);for(d=0;d<f.length;d++)K(a,f[d]);if(F(this))for(d=0;d<e.length;d++)f=e[d],f instanceof Element&&J(a,f)}}void 0!==c.O&&(b.prepend=d(c.O));void 0!==c.append&&(b.append=d(c.append))};function id(){var a=O;I(Document.prototype,\"createElement\",function(b){if(this.__CE_hasRegistry){var c=a.a.get(b);if(c)return new c.constructor}b=Bc.call(this,b);a.b(b);return b});I(Document.prototype,\"importNode\",function(b,c){b=Dc.call(this,b,c);this.__CE_hasRegistry?L(a,b):uc(a,b);return b});I(Document.prototype,\"createElementNS\",function(b,c){if(this.__CE_hasRegistry&&(null===b||\"http://www.w3.org/1999/xhtml\"===b)){var d=a.a.get(c);if(d)return new d.constructor}b=Cc.call(this,b,c);a.b(b);return b});\nhd(a,Document.prototype,{O:Ec,append:Fc})};function jd(){var a=O;function b(b,d){Object.defineProperty(b,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(b){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,b);else{var c=void 0;if(this.firstChild){var e=this.childNodes,g=e.length;if(0<g&&F(this)){c=Array(g);for(var k=0;k<g;k++)c[k]=e[k]}}d.set.call(this,b);if(c)for(b=0;b<c.length;b++)K(a,c[b])}}})}I(Node.prototype,\"insertBefore\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);\nb=Kc.call(this,b,d);if(F(this))for(d=0;d<c.length;d++)J(a,c[d]);return b}c=F(b);d=Kc.call(this,b,d);c&&K(a,b);F(this)&&J(a,b);return d});I(Node.prototype,\"appendChild\",function(b){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=Jc.call(this,b);if(F(this))for(var e=0;e<c.length;e++)J(a,c[e]);return b}c=F(b);e=Jc.call(this,b);c&&K(a,b);F(this)&&J(a,b);return e});I(Node.prototype,\"cloneNode\",function(b){b=Ic.call(this,b);this.ownerDocument.__CE_hasRegistry?L(a,b):\nuc(a,b);return b});I(Node.prototype,\"removeChild\",function(b){var c=F(b),e=Lc.call(this,b);c&&K(a,b);return e});I(Node.prototype,\"replaceChild\",function(b,d){if(b instanceof DocumentFragment){var c=Array.prototype.slice.apply(b.childNodes);b=Mc.call(this,b,d);if(F(this))for(K(a,d),d=0;d<c.length;d++)J(a,c[d]);return b}c=F(b);var f=Mc.call(this,b,d),h=F(this);h&&K(a,d);c&&K(a,b);h&&J(a,b);return f});Nc&&Nc.get?b(Node.prototype,Nc):tc(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){for(var a=\n[],b=0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)Lc.call(this,this.firstChild);Jc.call(this,document.createTextNode(a))}})})};function kd(a){var b=Element.prototype;function c(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];e=[];for(var g=[],k=0;k<d.length;k++){var l=d[k];l instanceof Element&&F(l)&&g.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)e.push(l);else e.push(l)}b.apply(this,d);for(d=0;d<g.length;d++)K(a,g[d]);if(F(this))for(d=0;d<e.length;d++)g=e[d],g instanceof Element&&J(a,g)}}void 0!==Zc&&(b.before=c(Zc));void 0!==Zc&&(b.after=c($c));void 0!==\nad&&I(b,\"replaceWith\",function(b){for(var c=[],d=0;d<arguments.length;++d)c[d-0]=arguments[d];d=[];for(var h=[],g=0;g<c.length;g++){var k=c[g];k instanceof Element&&F(k)&&h.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)d.push(k);else d.push(k)}g=F(this);ad.apply(this,c);for(c=0;c<h.length;c++)K(a,h[c]);if(g)for(K(a,this),c=0;c<d.length;c++)h=d[c],h instanceof Element&&J(a,h)});void 0!==bd&&I(b,\"remove\",function(){var b=F(this);bd.call(this);b&&K(a,this)})};function ld(){var a=O;function b(b,c){Object.defineProperty(b,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(b){var d=this,e=void 0;F(this)&&(e=[],G(this,function(a){a!==d&&e.push(a)}));c.set.call(this,b);if(e)for(var f=0;f<e.length;f++){var l=e[f];1===l.__CE_state&&a.disconnectedCallback(l)}this.ownerDocument.__CE_hasRegistry?L(a,this):uc(a,this);return b}})}function c(b,c){I(b,\"insertAdjacentElement\",function(b,d){var e=F(d);b=c.call(this,b,d);e&&K(a,d);F(b)&&J(a,d);\nreturn b})}Oc&&I(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=Oc.call(this,a)});Pc&&Pc.get?b(Element.prototype,Pc):dd&&dd.get?b(HTMLElement.prototype,dd):tc(a,function(a){b(a,{enumerable:!0,configurable:!0,get:function(){return Ic.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,c=b?this.content:this,d=Bc.call(document,this.localName);for(d.innerHTML=a;0<c.childNodes.length;)Lc.call(c,c.childNodes[0]);for(a=b?d.content:d;0<a.childNodes.length;)Jc.call(c,\na.childNodes[0])}})});I(Element.prototype,\"setAttribute\",function(b,c){if(1!==this.__CE_state)return Rc.call(this,b,c);var d=Qc.call(this,b);Rc.call(this,b,c);c=Qc.call(this,b);a.attributeChangedCallback(this,b,d,c,null)});I(Element.prototype,\"setAttributeNS\",function(b,c,f){if(1!==this.__CE_state)return Uc.call(this,b,c,f);var d=Tc.call(this,b,c);Uc.call(this,b,c,f);f=Tc.call(this,b,c);a.attributeChangedCallback(this,c,d,f,b)});I(Element.prototype,\"removeAttribute\",function(b){if(1!==this.__CE_state)return Sc.call(this,\nb);var c=Qc.call(this,b);Sc.call(this,b);null!==c&&a.attributeChangedCallback(this,b,c,null,null)});I(Element.prototype,\"removeAttributeNS\",function(b,c){if(1!==this.__CE_state)return Vc.call(this,b,c);var d=Tc.call(this,b,c);Vc.call(this,b,c);var e=Tc.call(this,b,c);d!==e&&a.attributeChangedCallback(this,c,d,e,b)});ed?c(HTMLElement.prototype,ed):Wc?c(Element.prototype,Wc):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");hd(a,Element.prototype,{O:Xc,append:Yc});kd(a)}\n;/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar md=window.customElements;if(!md||md.forcePolyfill||\"function\"!=typeof md.define||\"function\"!=typeof md.get){var O=new rc;gd();id();hd(O,DocumentFragment.prototype,{O:Gc,append:Hc});jd();ld();document.__CE_hasRegistry=!0;var customElements=new M(O);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};/*\n\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nfunction nd(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText=\"\";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName=\"\"}\nfunction od(a){a=a.replace(pd,\"\").replace(qd,\"\");var b=rd,c=a,d=new nd;d.start=0;d.end=c.length;for(var e=d,f=0,h=c.length;f<h;f++)if(\"{\"===c[f]){e.rules||(e.rules=[]);var g=e,k=g.rules[g.rules.length-1]||null;e=new nd;e.start=f+1;e.parent=g;e.previous=k;g.rules.push(e)}else\"}\"===c[f]&&(e.end=f+1,e=e.parent||d);return b(d,a)}\nfunction rd(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&(c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=sd(c),c=c.replace(td,\" \"),c=c.substring(c.lastIndexOf(\";\")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=0===c.indexOf(\"@\"),a.atRule?0===c.indexOf(\"@media\")?a.type=ud:c.match(vd)&&(a.type=wd,a.keyframesName=a.selector.split(td).pop()):a.type=0===c.indexOf(\"--\")?xd:yd);if(c=a.rules)for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)rd(f,\nb);return a}function sd(a){return a.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(a,c){a=c;for(c=6-a.length;c--;)a=\"0\"+a;return\"\\\\\"+a})}\nfunction zd(a,b,c){c=void 0===c?\"\":c;var d=\"\";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf(\"--\"));if(f){f=0;for(var h=e.length,g;f<h&&(g=e[f]);f++)d=zd(g,b,d)}else b?b=a.cssText:(b=a.cssText,b=b.replace(Ad,\"\").replace(Bd,\"\"),b=b.replace(Cd,\"\").replace(Dd,\"\")),(d=b.trim())&&(d=\"  \"+d+\"\\n\")}d&&(a.selector&&(c+=a.selector+\" {\\n\"),c+=d,a.selector&&(c+=\"}\\n\\n\"));return c}\nvar yd=1,wd=7,ud=4,xd=1E3,pd=/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,qd=/@import[^;]*;/gim,Ad=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,Bd=/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,Cd=/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,Dd=/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,vd=/^@[^\\s]*keyframes/,td=/\\s+/g;var P=!(window.ShadyDOM&&window.ShadyDOM.inUse),Ed;function Fd(a){Ed=a&&a.shimcssproperties?!1:P||!(navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/)||!window.CSS||!CSS.supports||!CSS.supports(\"box-shadow\",\"0 0 0 var(--foo)\"))}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?Ed=window.ShadyCSS.nativeCss:window.ShadyCSS?(Fd(window.ShadyCSS),window.ShadyCSS=void 0):Fd(window.WebComponents&&window.WebComponents.flags);var Q=Ed;var Gd=/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi,Hd=/(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,Id=/(--[\\w-]+)\\s*([:,;)]|$)/gi,Jd=/(animation\\s*:)|(animation-name\\s*:)/,Kd=/@media\\s(.*)/,Ld=/\\{[^}]*\\}/g;var Md=new Set;function R(a,b){if(!a)return\"\";\"string\"===typeof a&&(a=od(a));b&&S(a,b);return zd(a,Q)}function Nd(a){!a.__cssRules&&a.textContent&&(a.__cssRules=od(a.textContent));return a.__cssRules||null}function Od(a){return!!a.parent&&a.parent.type===wd}function S(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===ud){var h=a.selector.match(Kd);h&&(window.matchMedia(h[1]).matches||(e=!0))}f===yd?b(a):c&&f===wd?c(a):f===xd&&(e=!0);if((a=a.rules)&&!e){e=0;f=a.length;for(var g;e<f&&(g=a[e]);e++)S(g,b,c,d)}}}\nfunction Pd(a,b,c,d){var e=document.createElement(\"style\");b&&e.setAttribute(\"scope\",b);e.textContent=a;Qd(e,c,d);return e}var T=null;function Qd(a,b,c){b=b||document.head;b.insertBefore(a,c&&c.nextSibling||b.firstChild);T?a.compareDocumentPosition(T)===Node.DOCUMENT_POSITION_PRECEDING&&(T=a):T=a}\nfunction Rd(a,b){var c=a.indexOf(\"var(\");if(-1===c)return b(a,\"\",\"\",\"\");a:{var d=0;var e=c+3;for(var f=a.length;e<f;e++)if(\"(\"===a[e])d++;else if(\")\"===a[e]&&0===--d)break a;e=-1}d=a.substring(c+4,e);c=a.substring(0,c);a=Rd(a.substring(e+1),b);e=d.indexOf(\",\");return-1===e?b(c,d.trim(),\"\",a):b(c,d.substring(0,e).trim(),d.substring(e+1).trim(),a)}function Sd(a,b){P?a.setAttribute(\"class\",b):window.ShadyDOM.nativeMethods.setAttribute.call(a,\"class\",b)}\nfunction U(a){var b=a.localName,c=\"\";b?-1<b.indexOf(\"-\")||(c=b,b=a.getAttribute&&a.getAttribute(\"is\")||\"\"):(b=a.is,c=a.extends);return{is:b,I:c}};function Td(){}function Ud(a,b,c){var d=V;a.__styleScoped?a.__styleScoped=null:Vd(d,a,b||\"\",c)}function Vd(a,b,c,d){b.nodeType===Node.ELEMENT_NODE&&Wd(b,c,d);if(b=\"template\"===b.localName?(b.content||b.Ka).childNodes:b.children||b.childNodes)for(var e=0;e<b.length;e++)Vd(a,b[e],c,d)}\nfunction Wd(a,b,c){if(b)if(a.classList)c?(a.classList.remove(\"style-scope\"),a.classList.remove(b)):(a.classList.add(\"style-scope\"),a.classList.add(b));else if(a.getAttribute){var d=a.getAttribute(Xd);c?d&&(b=d.replace(\"style-scope\",\"\").replace(b,\"\"),Sd(a,b)):Sd(a,(d?d+\" \":\"\")+\"style-scope \"+b)}}function Yd(a,b,c){var d=V,e=a.__cssBuild;P||\"shady\"===e?b=R(b,c):(a=U(a),b=Zd(d,b,a.is,a.I,c)+\"\\n\\n\");return b.trim()}\nfunction Zd(a,b,c,d,e){var f=$d(c,d);c=c?ae+c:\"\";return R(b,function(b){b.c||(b.selector=b.j=be(a,b,a.b,c,f),b.c=!0);e&&e(b,c,f)})}function $d(a,b){return b?\"[is=\"+a+\"]\":a}function be(a,b,c,d,e){var f=b.selector.split(ce);if(!Od(b)){b=0;for(var h=f.length,g;b<h&&(g=f[b]);b++)f[b]=c.call(a,g,d,e)}return f.join(ce)}function de(a){return a.replace(ee,function(a,c,d){-1<d.indexOf(\"+\")?d=d.replace(/\\+/g,\"___\"):-1<d.indexOf(\"___\")&&(d=d.replace(/___/g,\"+\"));return\":\"+c+\"(\"+d+\")\"})}\nTd.prototype.b=function(a,b,c){var d=!1;a=a.trim();var e=ee.test(a);e&&(a=a.replace(ee,function(a,b,c){return\":\"+b+\"(\"+c.replace(/\\s/g,\"\")+\")\"}),a=de(a));a=a.replace(fe,ge+\" $1\");a=a.replace(he,function(a,e,g){d||(a=ie(g,e,b,c),d=d||a.stop,e=a.ta,g=a.value);return e+g});e&&(a=de(a));return a};\nfunction ie(a,b,c,d){var e=a.indexOf(je);0<=a.indexOf(ge)?a=ke(a,d):0!==e&&(a=c?le(a,c):a);c=!1;0<=e&&(b=\"\",c=!0);if(c){var f=!0;c&&(a=a.replace(me,function(a,b){return\" > \"+b}))}a=a.replace(ne,function(a,b,c){return'[dir=\"'+c+'\"] '+b+\", \"+b+'[dir=\"'+c+'\"]'});return{value:a,ta:b,stop:f}}function le(a,b){a=a.split(oe);a[0]+=b;return a.join(oe)}\nfunction ke(a,b){var c=a.match(pe);return(c=c&&c[2].trim()||\"\")?c[0].match(qe)?a.replace(pe,function(a,c,f){return b+f}):c.split(qe)[0]===b?c:re:a.replace(ge,b)}function se(a){a.selector===te&&(a.selector=\"html\")}Td.prototype.c=function(a){return a.match(je)?this.b(a,ue):le(a.trim(),ue)};p.Object.defineProperties(Td.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"style-scope\"}}});\nvar ee=/:(nth[-\\w]+)\\(([^)]+)\\)/,ue=\":not(.style-scope)\",ce=\",\",he=/(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=[])+)/g,qe=/[[.:#*]/,ge=\":host\",te=\":root\",je=\"::slotted\",fe=new RegExp(\"^(\"+je+\")\"),pe=/(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,me=/(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,ne=/(.*):dir\\((?:(ltr|rtl))\\)/,ae=\".\",oe=\":\",Xd=\"class\",re=\"should_not_match\",V=new Td;function ve(a,b,c,d){this.s=a||null;this.b=b||null;this.$=c||[];this.B=null;this.I=d||\"\";this.a=this.m=this.v=null}function W(a){return a?a.__styleInfo:null}function we(a,b){return a.__styleInfo=b}ve.prototype.c=function(){return this.s};ve.prototype._getStyleRules=ve.prototype.c;var xe,X=window.Element.prototype;xe=X.matches||X.matchesSelector||X.mozMatchesSelector||X.msMatchesSelector||X.oMatchesSelector||X.webkitMatchesSelector;var ye=navigator.userAgent.match(\"Trident\");function ze(){}function Ae(a){var b={},c=[],d=0;S(a,function(a){Be(a);a.index=d++;a=a.f.cssText;for(var c;c=Id.exec(a);){var e=c[1];\":\"!==c[2]&&(b[e]=!0)}},function(a){c.push(a)});a.b=c;a=[];for(var e in b)a.push(e);return a}\nfunction Be(a){if(!a.f){var b={},c={};Ce(a,c)&&(b.o=c,a.rules=null);b.cssText=a.parsedCssText.replace(Ld,\"\").replace(Gd,\"\");a.f=b}}function Ce(a,b){var c=a.f;if(c){if(c.o)return Object.assign(b,c.o),!0}else{c=a.parsedCssText;for(var d;a=Gd.exec(c);){d=(a[2]||a[3]).trim();if(\"inherit\"!==d||\"unset\"!==d)b[a[1].trim()]=d;d=!0}return d}}\nfunction De(a,b,c){b&&(b=0<=b.indexOf(\";\")?Ee(a,b,c):Rd(b,function(b,e,f,h){if(!e)return b+h;(e=De(a,c[e],c))&&\"initial\"!==e?\"apply-shim-inherit\"===e&&(e=\"inherit\"):e=De(a,c[f]||f,c)||f;return b+(e||\"\")+h}));return b&&b.trim()||\"\"}\nfunction Ee(a,b,c){b=b.split(\";\");for(var d=0,e,f;d<b.length;d++)if(e=b[d]){Hd.lastIndex=0;if(f=Hd.exec(e))e=De(a,c[f[1]],c);else if(f=e.indexOf(\":\"),-1!==f){var h=e.substring(f);h=h.trim();h=De(a,h,c)||h;e=e.substring(0,f)+h}b[d]=e&&e.lastIndexOf(\";\")===e.length-1?e.slice(0,-1):e||\"\"}return b.join(\";\")}\nfunction Fe(a,b){var c={},d=[];S(a,function(a){a.f||Be(a);var e=a.j||a.parsedSelector;b&&a.f.o&&e&&xe.call(b,e)&&(Ce(a,c),a=a.index,e=parseInt(a/32,10),d[e]=(d[e]||0)|1<<a%32)},null,!0);return{o:c,key:d}}\nfunction Ge(a,b,c,d){b.f||Be(b);if(b.f.o){var e=U(a);a=e.is;e=e.I;e=a?$d(a,e):\"html\";var f=b.parsedSelector,h=\":host > *\"===f||\"html\"===f,g=0===f.indexOf(\":host\")&&!h;\"shady\"===c&&(h=f===e+\" > *.\"+e||-1!==f.indexOf(\"html\"),g=!h&&0===f.indexOf(e));\"shadow\"===c&&(h=\":host > *\"===f||\"html\"===f,g=g&&!h);if(h||g)c=e,g&&(P&&!b.j&&(b.j=be(V,b,V.b,a?ae+a:\"\",e)),c=b.j||e),d({Ba:c,xa:g,Ma:h})}}\nfunction He(a,b){var c={},d={},e=b&&b.__cssBuild;S(b,function(b){Ge(a,b,e,function(e){xe.call(a.La||a,e.Ba)&&(e.xa?Ce(b,c):Ce(b,d))})},null,!0);return{Aa:d,wa:c}}\nfunction Ie(a,b,c,d){var e=U(b),f=$d(e.is,e.I),h=new RegExp(\"(?:^|[^.#[:])\"+(b.extends?\"\\\\\"+f.slice(0,-1)+\"\\\\]\":f)+\"($|[.:[\\\\s>+~])\");e=W(b).s;var g=Je(e,d);return Yd(b,e,function(b){var e=\"\";b.f||Be(b);b.f.cssText&&(e=Ee(a,b.f.cssText,c));b.cssText=e;if(!P&&!Od(b)&&b.cssText){var k=e=b.cssText;null==b.fa&&(b.fa=Jd.test(e));if(b.fa)if(null==b.N){b.N=[];for(var q in g)k=g[q],k=k(e),e!==k&&(e=k,b.N.push(q))}else{for(q=0;q<b.N.length;++q)k=g[b.N[q]],e=k(e);k=e}b.cssText=k;b.j=b.j||b.selector;e=\".\"+d;\nq=b.j.split(\",\");k=0;for(var H=q.length,N;k<H&&(N=q[k]);k++)q[k]=N.match(h)?N.replace(f,e):e+\" \"+N;b.selector=q.join(\",\")}})}function Je(a,b){a=a.b;var c={};if(!P&&a)for(var d=0,e=a[d];d<a.length;e=a[++d]){var f=e,h=b;f.i=new RegExp(f.keyframesName,\"g\");f.a=f.keyframesName+\"-\"+h;f.j=f.j||f.selector;f.selector=f.j.replace(f.keyframesName,f.a);c[e.keyframesName]=Ke(e)}return c}function Ke(a){return function(b){return b.replace(a.i,a.a)}}\nfunction Le(a,b){var c=Me,d=Nd(a);a.textContent=R(d,function(a){var d=a.cssText=a.parsedCssText;a.f&&a.f.cssText&&(d=d.replace(Ad,\"\").replace(Bd,\"\"),a.cssText=Ee(c,d,b))})}p.Object.defineProperties(ze.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return\"x-scope\"}}});var Me=new ze;var Ne={},Oe=window.customElements;if(Oe&&!P){var Pe=Oe.define;Oe.define=function(a,b,c){var d=document.createComment(\" Shady DOM styles for \"+a+\" \"),e=document.head;e.insertBefore(d,(T?T.nextSibling:null)||e.firstChild);T=d;Ne[a]=d;return Pe.call(Oe,a,b,c)}};function Qe(){this.cache={}}Qe.prototype.store=function(a,b,c,d){var e=this.cache[a]||[];e.push({o:b,styleElement:c,m:d});100<e.length&&e.shift();this.cache[a]=e};Qe.prototype.fetch=function(a,b,c){if(a=this.cache[a])for(var d=a.length-1;0<=d;d--){var e=a[d],f;a:{for(f=0;f<c.length;f++){var h=c[f];if(e.o[h]!==b[h]){f=!1;break a}}f=!0}if(f)return e}};function Re(){}\nfunction Se(a){for(var b=0;b<a.length;b++){var c=a[b];if(c.target!==document.documentElement&&c.target!==document.head)for(var d=0;d<c.addedNodes.length;d++){var e=c.addedNodes[d];if(e.nodeType===Node.ELEMENT_NODE){var f=e.getRootNode();var h=e;var g=[];h.classList?g=Array.from(h.classList):h instanceof window.SVGElement&&h.hasAttribute(\"class\")&&(g=h.getAttribute(\"class\").split(/\\s+/));h=g;g=h.indexOf(V.a);if((h=-1<g?h[g+1]:\"\")&&f===e.ownerDocument)Ud(e,h,!0);else if(f.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&\n(f=f.host))if(f=U(f).is,h===f)for(e=window.ShadyDOM.nativeMethods.querySelectorAll.call(e,\":not(.\"+V.a+\")\"),f=0;f<e.length;f++)Wd(e[f],h);else h&&Ud(e,h,!0),Ud(e,f)}}}}\nif(!P){var Te=new MutationObserver(Se),Ue=function(a){Te.observe(a,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)Ue(document);else{var Ve=function(){Ue(document.body)};window.HTMLImports?window.HTMLImports.whenReady(Ve):requestAnimationFrame(function(){if(\"loading\"===document.readyState){var a=function(){Ve();document.removeEventListener(\"readystatechange\",a)};document.addEventListener(\"readystatechange\",a)}else Ve()})}Re=function(){Se(Te.takeRecords())}}\nvar We=Re;var Xe={};var Ye=Promise.resolve();function Ze(a){if(a=Xe[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1}function $e(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function af(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a.b||(a.b=!0,Ye.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a.b=!1}))};var bf=null,cf=window.HTMLImports&&window.HTMLImports.whenReady||null,df;function ef(a){requestAnimationFrame(function(){cf?cf(a):(bf||(bf=new Promise(function(a){df=a}),\"complete\"===document.readyState?df():document.addEventListener(\"readystatechange\",function(){\"complete\"===document.readyState&&df()})),bf.then(function(){a&&a()}))})};var ff=new Qe;function Y(){var a=this;this.ea={};this.c=document.documentElement;var b=new nd;b.rules=[];this.i=we(this.c,new ve(b));this.u=!1;this.b=this.a=null;ef(function(){gf(a)})}n=Y.prototype;n.ja=function(){We()};n.ua=function(a){return Nd(a)};n.Da=function(a){return R(a)};\nn.prepareTemplate=function(a,b,c){if(!a.i){a.i=!0;a.name=b;a.extends=c;Xe[b]=a;var d=(d=a.content.querySelector(\"style\"))?d.getAttribute(\"css-build\")||\"\":\"\";var e=[];for(var f=a.content.querySelectorAll(\"style\"),h=0;h<f.length;h++){var g=f[h];if(g.hasAttribute(\"shady-unscoped\")){if(!P){var k=g.textContent;Md.has(k)||(Md.add(k),k=g.cloneNode(!0),document.head.appendChild(k));g.parentNode.removeChild(g)}}else e.push(g.textContent),g.parentNode.removeChild(g)}e=e.join(\"\").trim();c={is:b,extends:c,Ia:d};\nP||Ud(a.content,b);gf(this);f=Hd.test(e)||Gd.test(e);Hd.lastIndex=0;Gd.lastIndex=0;e=od(e);f&&Q&&this.a&&this.a.transformRules(e,b);a._styleAst=e;a.u=d;d=[];Q||(d=Ae(a._styleAst));if(!d.length||Q)e=P?a.content:null,b=Ne[b],f=Yd(c,a._styleAst),b=f.length?Pd(f,c.is,e,b):void 0,a.a=b;a.c=d}};\nfunction hf(a){!a.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(a.b=window.ShadyCSS.CustomStyleInterface,a.b.transformCallback=function(b){a.ha(b)},a.b.validateCallback=function(){requestAnimationFrame(function(){(a.b.enqueued||a.u)&&a.A()})})}function gf(a){!a.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(a.a=window.ShadyCSS.ApplyShim,a.a.invalidCallback=Ze);hf(a)}\nn.A=function(){gf(this);if(this.b){var a=this.b.processStyles();if(this.b.enqueued){if(Q)for(var b=0;b<a.length;b++){var c=this.b.getStyleForCustomStyle(a[b]);if(c&&Q&&this.a){var d=Nd(c);gf(this);this.a.transformRules(d);c.textContent=R(d)}}else for(jf(this,this.c,this.i),b=0;b<a.length;b++)(c=this.b.getStyleForCustomStyle(a[b]))&&Le(c,this.i.v);this.b.enqueued=!1;this.u&&!Q&&this.styleDocument()}}};\nn.styleElement=function(a,b){var c=U(a).is,d=W(a);if(!d){var e=U(a);d=e.is;e=e.I;var f=Ne[d];d=Xe[d];if(d){var h=d._styleAst;var g=d.c}d=we(a,new ve(h,f,g,e))}a!==this.c&&(this.u=!0);b&&(d.B=d.B||{},Object.assign(d.B,b));if(Q){if(d.B){b=d.B;for(var k in b)null===k?a.style.removeProperty(k):a.style.setProperty(k,b[k])}if(((k=Xe[c])||a===this.c)&&k&&k.a&&!$e(k)){if($e(k)||k._applyShimValidatingVersion!==k._applyShimNextVersion)gf(this),this.a&&this.a.transformRules(k._styleAst,c),k.a.textContent=Yd(a,\nd.s),af(k);P&&(c=a.shadowRoot)&&(c.querySelector(\"style\").textContent=Yd(a,d.s));d.s=k._styleAst}}else if(jf(this,a,d),d.$&&d.$.length){c=d;k=U(a).is;d=(b=ff.fetch(k,c.v,c.$))?b.styleElement:null;h=c.m;(g=b&&b.m)||(g=this.ea[k]=(this.ea[k]||0)+1,g=k+\"-\"+g);c.m=g;g=c.m;e=Me;e=d?d.textContent||\"\":Ie(e,a,c.v,g);f=W(a);var l=f.a;l&&!P&&l!==d&&(l._useCount--,0>=l._useCount&&l.parentNode&&l.parentNode.removeChild(l));P?f.a?(f.a.textContent=e,d=f.a):e&&(d=Pd(e,g,a.shadowRoot,f.b)):d?d.parentNode||(ye&&-1<\ne.indexOf(\"@media\")&&(d.textContent=e),Qd(d,null,f.b)):e&&(d=Pd(e,g,null,f.b));d&&(d._useCount=d._useCount||0,f.a!=d&&d._useCount++,f.a=d);g=d;P||(d=c.m,f=e=a.getAttribute(\"class\")||\"\",h&&(f=e.replace(new RegExp(\"\\\\s*x-scope\\\\s*\"+h+\"\\\\s*\",\"g\"),\" \")),f+=(f?\" \":\"\")+\"x-scope \"+d,e!==f&&Sd(a,f));b||ff.store(k,c.v,g,c.m)}};function kf(a,b){return(b=b.getRootNode().host)?W(b)?b:kf(a,b):a.c}\nfunction jf(a,b,c){a=kf(a,b);var d=W(a);a=Object.create(d.v||null);var e=He(b,c.s);b=Fe(d.s,b).o;Object.assign(a,e.wa,b,e.Aa);b=c.B;for(var f in b)if((e=b[f])||0===e)a[f]=e;f=Me;b=Object.getOwnPropertyNames(a);for(e=0;e<b.length;e++)d=b[e],a[d]=De(f,a[d],a);c.v=a}n.styleDocument=function(a){this.styleSubtree(this.c,a)};\nn.styleSubtree=function(a,b){var c=a.shadowRoot;(c||a===this.c)&&this.styleElement(a,b);if(b=c&&(c.children||c.childNodes))for(a=0;a<b.length;a++)this.styleSubtree(b[a]);else if(a=a.children||a.childNodes)for(b=0;b<a.length;b++)this.styleSubtree(a[b])};n.ha=function(a){var b=this,c=Nd(a);S(c,function(a){if(P)se(a);else{var c=V;a.selector=a.parsedSelector;se(a);a.selector=a.j=be(c,a,c.c,void 0,void 0)}Q&&(gf(b),b.a&&b.a.transformRule(a))});Q?a.textContent=R(c):this.i.s.rules.push(c)};\nn.getComputedStyleValue=function(a,b){var c;Q||(c=(W(a)||W(kf(this,a))).v[b]);return(c=c||window.getComputedStyle(a).getPropertyValue(b))?c.trim():\"\"};n.Ca=function(a,b){var c=a.getRootNode();b=b?b.split(/\\s/):[];c=c.host&&c.host.localName;if(!c){var d=a.getAttribute(\"class\");if(d){d=d.split(/\\s/);for(var e=0;e<d.length;e++)if(d[e]===V.a){c=d[e+1];break}}}c&&b.push(V.a,c);Q||(c=W(a))&&c.m&&b.push(Me.a,c.m);Sd(a,b.join(\" \"))};n.sa=function(a){return W(a)};Y.prototype.flush=Y.prototype.ja;\nY.prototype.prepareTemplate=Y.prototype.prepareTemplate;Y.prototype.styleElement=Y.prototype.styleElement;Y.prototype.styleDocument=Y.prototype.styleDocument;Y.prototype.styleSubtree=Y.prototype.styleSubtree;Y.prototype.getComputedStyleValue=Y.prototype.getComputedStyleValue;Y.prototype.setElementClass=Y.prototype.Ca;Y.prototype._styleInfoForNode=Y.prototype.sa;Y.prototype.transformCustomStyleForDocument=Y.prototype.ha;Y.prototype.getStyleAst=Y.prototype.ua;Y.prototype.styleAstToString=Y.prototype.Da;\nY.prototype.flushCustomStyles=Y.prototype.A;Object.defineProperties(Y.prototype,{nativeShadow:{get:function(){return P}},nativeCss:{get:function(){return Q}}});var Z=new Y,lf,mf;window.ShadyCSS&&(lf=window.ShadyCSS.ApplyShim,mf=window.ShadyCSS.CustomStyleInterface);window.ShadyCSS={ScopingShim:Z,prepareTemplate:function(a,b,c){Z.A();Z.prepareTemplate(a,b,c)},styleSubtree:function(a,b){Z.A();Z.styleSubtree(a,b)},styleElement:function(a){Z.A();Z.styleElement(a)},styleDocument:function(a){Z.A();Z.styleDocument(a)},getComputedStyleValue:function(a,b){return Z.getComputedStyleValue(a,b)},nativeCss:Q,nativeShadow:P};lf&&(window.ShadyCSS.ApplyShim=lf);\nmf&&(window.ShadyCSS.CustomStyleInterface=mf);var nf=window.document;window.WebComponents=window.WebComponents||{};function of(){requestAnimationFrame(function(){window.WebComponents.ready=!0;window.document.dispatchEvent(new CustomEvent(\"WebComponentsReady\",{bubbles:!0}))})}function pf(){of();nf.removeEventListener(\"readystatechange\",pf)}\"loading\"!==nf.readyState?of():nf.addEventListener(\"readystatechange\",pf);}).call(this);\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

eval("(function(){\n'use strict';var h=new function(){};var aa=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function n(b){var a=aa.has(b);b=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(b);return!a&&b}function p(b){var a=b.isConnected;if(void 0!==a)return a;for(;b&&!(b.__CE_isImportDocument||b instanceof Document);)b=b.parentNode||(window.ShadowRoot&&b instanceof ShadowRoot?b.host:void 0);return!(!b||!(b.__CE_isImportDocument||b instanceof Document))}\nfunction q(b,a){for(;a&&a!==b&&!a.nextSibling;)a=a.parentNode;return a&&a!==b?a.nextSibling:null}\nfunction t(b,a,c){c=c?c:new Set;for(var d=b;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;a(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)t(d,a,c);d=q(b,e);continue}else if(\"template\"===f){d=q(b,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)t(e,a,c)}d=d.firstChild?d.firstChild:q(b,d)}}function u(b,a,c){b[a]=c};function v(){this.a=new Map;this.o=new Map;this.f=[];this.b=!1}function ba(b,a,c){b.a.set(a,c);b.o.set(c.constructor,c)}function w(b,a){b.b=!0;b.f.push(a)}function x(b,a){b.b&&t(a,function(a){return y(b,a)})}function y(b,a){if(b.b&&!a.__CE_patched){a.__CE_patched=!0;for(var c=0;c<b.f.length;c++)b.f[c](a)}}function z(b,a){var c=[];t(a,function(b){return c.push(b)});for(a=0;a<c.length;a++){var d=c[a];1===d.__CE_state?b.connectedCallback(d):A(b,d)}}\nfunction B(b,a){var c=[];t(a,function(b){return c.push(b)});for(a=0;a<c.length;a++){var d=c[a];1===d.__CE_state&&b.disconnectedCallback(d)}}\nfunction C(b,a,c){c=c?c:{};var d=c.w||new Set,e=c.s||function(a){return A(b,a)},f=[];t(a,function(a){if(\"link\"===a.localName&&\"import\"===a.getAttribute(\"rel\")){var c=a.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:a.addEventListener(\"load\",function(){var c=a.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);C(b,c,{w:f,s:e})}})}else f.push(a)},d);if(b.b)for(a=0;a<\nf.length;a++)y(b,f[a]);for(a=0;a<f.length;a++)e(f[a])}\nfunction A(b,a){if(void 0===a.__CE_state){var c=a.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=b.a.get(a.localName)){c.constructionStack.push(a);var d=c.constructor;try{try{if(new d!==a)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(m){throw a.__CE_state=2,m;}a.__CE_state=1;a.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\nf=a.getAttribute(e);null!==f&&b.attributeChangedCallback(a,e,null,f,null)}p(a)&&b.connectedCallback(a)}}}v.prototype.connectedCallback=function(b){var a=b.__CE_definition;a.connectedCallback&&a.connectedCallback.call(b)};v.prototype.disconnectedCallback=function(b){var a=b.__CE_definition;a.disconnectedCallback&&a.disconnectedCallback.call(b)};\nv.prototype.attributeChangedCallback=function(b,a,c,d,e){var f=b.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(a)&&f.attributeChangedCallback.call(b,a,c,d,e)};function D(b,a){this.c=b;this.a=a;this.b=void 0;C(this.c,this.a);\"loading\"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function E(b){b.b&&b.b.disconnect()}D.prototype.f=function(b){var a=this.a.readyState;\"interactive\"!==a&&\"complete\"!==a||E(this);for(a=0;a<b.length;a++)for(var c=b[a].addedNodes,d=0;d<c.length;d++)C(this.c,c[d])};function ca(){var b=this;this.b=this.a=void 0;this.f=new Promise(function(a){b.b=a;b.a&&a(b.a)})}function F(b){if(b.a)throw Error(\"Already resolved.\");b.a=void 0;b.b&&b.b(void 0)};function G(b){this.i=!1;this.c=b;this.m=new Map;this.j=function(b){return b()};this.g=!1;this.l=[];this.u=new D(b,document)}\nG.prototype.define=function(b,a){var c=this;if(!(a instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!n(b))throw new SyntaxError(\"The element name '\"+b+\"' is not valid.\");if(this.c.a.get(b))throw Error(\"A custom element with name '\"+b+\"' has already been defined.\");if(this.i)throw Error(\"A custom element is already being defined.\");this.i=!0;var d,e,f,m,l;try{var g=function(b){var a=k[b];if(void 0!==a&&!(a instanceof Function))throw Error(\"The '\"+b+\"' callback must be a function.\");\nreturn a},k=a.prototype;if(!(k instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");d=g(\"connectedCallback\");e=g(\"disconnectedCallback\");f=g(\"adoptedCallback\");m=g(\"attributeChangedCallback\");l=a.observedAttributes||[]}catch(r){return}finally{this.i=!1}a={localName:b,constructor:a,connectedCallback:d,disconnectedCallback:e,adoptedCallback:f,attributeChangedCallback:m,observedAttributes:l,constructionStack:[]};ba(this.c,b,a);this.l.push(a);this.g||\n(this.g=!0,this.j(function(){return da(c)}))};function da(b){if(!1!==b.g){b.g=!1;for(var a=b.l,c=[],d=new Map,e=0;e<a.length;e++)d.set(a[e].localName,[]);C(b.c,document,{s:function(a){if(void 0===a.__CE_state){var e=a.localName,f=d.get(e);f?f.push(a):b.c.a.get(e)&&c.push(a)}}});for(e=0;e<c.length;e++)A(b.c,c[e]);for(;0<a.length;){for(var f=a.shift(),e=f.localName,f=d.get(f.localName),m=0;m<f.length;m++)A(b.c,f[m]);(e=b.m.get(e))&&F(e)}}}G.prototype.get=function(b){if(b=this.c.a.get(b))return b.constructor};\nG.prototype.whenDefined=function(b){if(!n(b))return Promise.reject(new SyntaxError(\"'\"+b+\"' is not a valid custom element name.\"));var a=this.m.get(b);if(a)return a.f;a=new ca;this.m.set(b,a);this.c.a.get(b)&&!this.l.some(function(a){return a.localName===b})&&F(a);return a.f};G.prototype.v=function(b){E(this.u);var a=this.j;this.j=function(c){return b(function(){return a(c)})}};window.CustomElementRegistry=G;G.prototype.define=G.prototype.define;G.prototype.get=G.prototype.get;\nG.prototype.whenDefined=G.prototype.whenDefined;G.prototype.polyfillWrapFlushCallback=G.prototype.v;var H=window.Document.prototype.createElement,ea=window.Document.prototype.createElementNS,fa=window.Document.prototype.importNode,ga=window.Document.prototype.prepend,ha=window.Document.prototype.append,ia=window.DocumentFragment.prototype.prepend,ja=window.DocumentFragment.prototype.append,I=window.Node.prototype.cloneNode,J=window.Node.prototype.appendChild,K=window.Node.prototype.insertBefore,L=window.Node.prototype.removeChild,M=window.Node.prototype.replaceChild,N=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),O=window.Element.prototype.attachShadow,P=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),Q=window.Element.prototype.getAttribute,R=window.Element.prototype.setAttribute,S=window.Element.prototype.removeAttribute,T=window.Element.prototype.getAttributeNS,U=window.Element.prototype.setAttributeNS,ka=window.Element.prototype.removeAttributeNS,la=window.Element.prototype.insertAdjacentElement,ma=window.Element.prototype.prepend,na=window.Element.prototype.append,\nV=window.Element.prototype.before,oa=window.Element.prototype.after,pa=window.Element.prototype.replaceWith,qa=window.Element.prototype.remove,ra=window.HTMLElement,W=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),sa=window.HTMLElement.prototype.insertAdjacentElement;function ta(){var b=X;window.HTMLElement=function(){function a(){var a=this.constructor,d=b.o.get(a);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(!e.length)return e=H.call(document,d.localName),Object.setPrototypeOf(e,a.prototype),e.__CE_state=1,e.__CE_definition=d,y(b,e),e;var d=e.length-1,f=e[d];if(f===h)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=h;Object.setPrototypeOf(f,a.prototype);y(b,f);return f}a.prototype=ra.prototype;return a}()};function Y(b,a,c){function d(a){return function(d){for(var c=[],e=0;e<arguments.length;++e)c[e-0]=arguments[e];for(var e=[],f=[],k=0;k<c.length;k++){var r=c[k];r instanceof Element&&p(r)&&f.push(r);if(r instanceof DocumentFragment)for(r=r.firstChild;r;r=r.nextSibling)e.push(r);else e.push(r)}a.apply(this,c);for(c=0;c<f.length;c++)B(b,f[c]);if(p(this))for(c=0;c<e.length;c++)f=e[c],f instanceof Element&&z(b,f)}}c.h&&(a.prepend=d(c.h));c.append&&(a.append=d(c.append))};function ua(){var b=X;u(Document.prototype,\"createElement\",function(a){if(this.__CE_hasRegistry){var c=b.a.get(a);if(c)return new c.constructor}a=H.call(this,a);y(b,a);return a});u(Document.prototype,\"importNode\",function(a,c){a=fa.call(this,a,c);this.__CE_hasRegistry?C(b,a):x(b,a);return a});u(Document.prototype,\"createElementNS\",function(a,c){if(this.__CE_hasRegistry&&(null===a||\"http://www.w3.org/1999/xhtml\"===a)){var d=b.a.get(c);if(d)return new d.constructor}a=ea.call(this,a,c);y(b,a);return a});\nY(b,Document.prototype,{h:ga,append:ha})};function va(){var b=X;function a(a,d){Object.defineProperty(a,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(a){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,a);else{var c=void 0;if(this.firstChild){var e=this.childNodes,l=e.length;if(0<l&&p(this))for(var c=Array(l),g=0;g<l;g++)c[g]=e[g]}d.set.call(this,a);if(c)for(a=0;a<c.length;a++)B(b,c[a])}}})}u(Node.prototype,\"insertBefore\",function(a,d){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);\na=K.call(this,a,d);if(p(this))for(d=0;d<c.length;d++)z(b,c[d]);return a}c=p(a);d=K.call(this,a,d);c&&B(b,a);p(this)&&z(b,a);return d});u(Node.prototype,\"appendChild\",function(a){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=J.call(this,a);if(p(this))for(var e=0;e<c.length;e++)z(b,c[e]);return a}c=p(a);e=J.call(this,a);c&&B(b,a);p(this)&&z(b,a);return e});u(Node.prototype,\"cloneNode\",function(a){a=I.call(this,a);this.ownerDocument.__CE_hasRegistry?C(b,a):x(b,a);\nreturn a});u(Node.prototype,\"removeChild\",function(a){var c=p(a),e=L.call(this,a);c&&B(b,a);return e});u(Node.prototype,\"replaceChild\",function(a,d){if(a instanceof DocumentFragment){var e=Array.prototype.slice.apply(a.childNodes);a=M.call(this,a,d);if(p(this))for(B(b,d),d=0;d<e.length;d++)z(b,e[d]);return a}var e=p(a),c=M.call(this,a,d),m=p(this);m&&B(b,d);e&&B(b,a);m&&z(b,a);return c});N&&N.get?a(Node.prototype,N):w(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){for(var a=[],b=\n0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)L.call(this,this.firstChild);J.call(this,document.createTextNode(a))}})})};function wa(b){var a=Element.prototype;function c(a){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];for(var e=[],l=[],g=0;g<d.length;g++){var k=d[g];k instanceof Element&&p(k)&&l.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)e.push(k);else e.push(k)}a.apply(this,d);for(d=0;d<l.length;d++)B(b,l[d]);if(p(this))for(d=0;d<e.length;d++)l=e[d],l instanceof Element&&z(b,l)}}V&&(a.before=c(V));V&&(a.after=c(oa));pa&&u(a,\"replaceWith\",function(a){for(var d=\n[],c=0;c<arguments.length;++c)d[c-0]=arguments[c];for(var c=[],m=[],l=0;l<d.length;l++){var g=d[l];g instanceof Element&&p(g)&&m.push(g);if(g instanceof DocumentFragment)for(g=g.firstChild;g;g=g.nextSibling)c.push(g);else c.push(g)}l=p(this);pa.apply(this,d);for(d=0;d<m.length;d++)B(b,m[d]);if(l)for(B(b,this),d=0;d<c.length;d++)m=c[d],m instanceof Element&&z(b,m)});qa&&u(a,\"remove\",function(){var a=p(this);qa.call(this);a&&B(b,this)})};function xa(){var b=X;function a(a,c){Object.defineProperty(a,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(a){var d=this,e=void 0;p(this)&&(e=[],t(this,function(a){a!==d&&e.push(a)}));c.set.call(this,a);if(e)for(var f=0;f<e.length;f++){var k=e[f];1===k.__CE_state&&b.disconnectedCallback(k)}this.ownerDocument.__CE_hasRegistry?C(b,this):x(b,this);return a}})}function c(a,c){u(a,\"insertAdjacentElement\",function(a,d){var e=p(d);a=c.call(this,a,d);e&&B(b,d);p(a)&&z(b,d);\nreturn a})}O&&u(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=O.call(this,a)});P&&P.get?a(Element.prototype,P):W&&W.get?a(HTMLElement.prototype,W):w(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){return I.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,d=b?this.content:this,c=H.call(document,this.localName);for(c.innerHTML=a;0<d.childNodes.length;)L.call(d,d.childNodes[0]);for(a=b?c.content:c;0<a.childNodes.length;)J.call(d,\na.childNodes[0])}})});u(Element.prototype,\"setAttribute\",function(a,c){if(1!==this.__CE_state)return R.call(this,a,c);var d=Q.call(this,a);R.call(this,a,c);c=Q.call(this,a);b.attributeChangedCallback(this,a,d,c,null)});u(Element.prototype,\"setAttributeNS\",function(a,c,f){if(1!==this.__CE_state)return U.call(this,a,c,f);var d=T.call(this,a,c);U.call(this,a,c,f);f=T.call(this,a,c);b.attributeChangedCallback(this,c,d,f,a)});u(Element.prototype,\"removeAttribute\",function(a){if(1!==this.__CE_state)return S.call(this,\na);var c=Q.call(this,a);S.call(this,a);null!==c&&b.attributeChangedCallback(this,a,c,null,null)});u(Element.prototype,\"removeAttributeNS\",function(a,c){if(1!==this.__CE_state)return ka.call(this,a,c);var d=T.call(this,a,c);ka.call(this,a,c);var e=T.call(this,a,c);d!==e&&b.attributeChangedCallback(this,c,d,e,a)});sa?c(HTMLElement.prototype,sa):la?c(Element.prototype,la):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");Y(b,Element.prototype,{h:ma,append:na});wa(b)};/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar Z=window.customElements;if(!Z||Z.forcePolyfill||\"function\"!=typeof Z.define||\"function\"!=typeof Z.get){var X=new v;ta();ua();Y(X,DocumentFragment.prototype,{h:ia,append:ja});va();xa();document.__CE_hasRegistry=!0;var customElements=new G(X);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};\n}).call(self);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _CustomElement() {\n  return Reflect.construct(HTMLElement, [], this.__proto__.constructor);\n}\n\n;\nObject.setPrototypeOf(_CustomElement.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(_CustomElement, HTMLElement);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function (window, document, HTMLElement) {\n\n  var __flags = {\n    isWCSupported: 'customElements' in window && 'import' in document.createElement('link') && 'content' in document.createElement('template'),\n    isIE11: !!window['MSInputMethodContext'] && !!document['documentMode'],\n    isChrome: undefined,\n    isEdge: undefined\n  };\n\n  try {\n    __flags.isChrome = /Chrome/.test(navigator.userAgent);\n    __flags.isEdge = /Edge/.test(navigator.userAgent);\n\n    if (__flags.isIE11 || __flags.isEdge) {\n      __flags.isChrome = false;\n      Object.defineProperty(Node.prototype, 'children', function () {\n        return this.childNodes;\n      });\n    }\n  } catch (err) {}\n\n  var _$2 = '_slim_internals_'; //Symbol('Slim')\n\n  var Internals = function Internals() {\n    _classCallCheck(this, Internals);\n\n    this.hasCustomTemplate = undefined;\n    this.boundParent = null;\n    this.repeater = {};\n    this.bindings = {};\n    this.reversed = {};\n    this.inbounds = {};\n    this.eventHandlers = {};\n    this.internetExploderClone = null;\n    this.rootElement = null;\n    this.createdCallbackInvoked = false;\n    this.sourceText = null;\n    this.excluded = false;\n    this.autoBoundAttributes = [];\n  };\n\n  var Slim = function (_CustomElement2) {\n    _inherits(Slim, _CustomElement2);\n\n    _createClass(Slim, null, [{\n      key: 'dashToCamel',\n      value: function dashToCamel(dash) {\n        return dash.indexOf('-') < 0 ? dash : dash.replace(/-[a-z]/g, function (m) {\n          return m[1].toUpperCase();\n        });\n      }\n    }, {\n      key: 'camelToDash',\n      value: function camelToDash(camel) {\n        return camel.replace(/([A-Z])/g, '-$1').toLowerCase();\n      }\n    }, {\n      key: 'lookup',\n      value: function lookup(target, expression, maybeRepeated) {\n        var chain = expression.split('.');\n        var o = void 0;\n        if (maybeRepeated && maybeRepeated[_$2].repeater[chain[0]]) {\n          o = maybeRepeated[_$2].repeater;\n        } else {\n          o = target;\n        }\n        var i = 0;\n        while (o && i < chain.length) {\n          o = o[chain[i++]];\n        }\n        return o;\n      }\n\n      // noinspection JSUnresolvedVariable\n\n    }, {\n      key: '_$',\n      value: function _$(target) {\n        target[_$2] = target[_$2] || new Internals();\n        return target[_$2];\n      }\n    }, {\n      key: 'polyFill',\n      value: function polyFill(url) {\n        if (!__flags.isWCSupported) {\n          var existingScript = document.querySelector('script[data-is-slim-polyfill=\"true\"]');\n          if (!existingScript) {\n            var script = document.createElement('script');\n            script.setAttribute('data-is-slim-polyfill', 'true');\n            script.src = url;\n            document.head.appendChild(script);\n          }\n        }\n      }\n    }, {\n      key: 'tag',\n      value: function tag(tagName, tplOrClazz, clazz) {\n        if (this.tagToClassDict.has(tagName)) {\n          throw new Error('Unable to define tag: ' + tagName + ' already defined');\n        }\n        if (clazz === undefined) {\n          clazz = tplOrClazz;\n        } else {\n          Slim.tagToTemplateDict.set(tagName, tplOrClazz);\n        }\n        this.tagToClassDict.set(tagName, clazz);\n        this.classToTagDict.set(clazz, tagName);\n        customElements.define(tagName, clazz);\n      }\n    }, {\n      key: 'tagOf',\n      value: function tagOf(clazz) {\n        return this.classToTagDict.get(clazz);\n      }\n    }, {\n      key: 'classOf',\n      value: function classOf(tag) {\n        return this.tagToClassDict.get(tag);\n      }\n    }, {\n      key: 'createUniqueIndex',\n      value: function createUniqueIndex() {\n        this[_$2].uniqueCounter++;\n        return this[_$2].uniqueCounter.toString(16);\n      }\n    }, {\n      key: 'plugin',\n      value: function plugin(phase, _plugin) {\n        if (!this.plugins[phase]) {\n          throw new Error('Cannot attach plugin: ' + phase + ' is not a supported phase');\n        }\n        this.plugins[phase].push(_plugin);\n      }\n    }, {\n      key: 'checkCreationBlocking',\n      value: function checkCreationBlocking(element) {\n        if (element.attributes) {\n          for (var i = 0, n = element.attributes.length; i < n; i++) {\n            var attribute = element.attributes[i];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = Slim[_$2].customDirectives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _ref = _step.value;\n\n                var _ref2 = _slicedToArray(_ref, 2);\n\n                var test = _ref2[0];\n                var directive = _ref2[1];\n\n                var value = directive.isBlocking && test(attribute);\n                if (value) {\n                  return true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          }\n        }\n        return false;\n      }\n    }, {\n      key: 'customDirective',\n      value: function customDirective(testFn, fn, isBlocking) {\n        if (this[_$2].customDirectives.has(testFn)) {\n          throw new Error('Cannot register custom directive: ' + testFn + ' already registered');\n        }\n        fn.isBlocking = isBlocking;\n        this[_$2].customDirectives.set(testFn, fn);\n      }\n    }, {\n      key: 'executePlugins',\n      value: function executePlugins(phase, target) {\n        this.plugins[phase].forEach(function (fn) {\n          fn(target);\n        });\n      }\n    }, {\n      key: 'qSelectAll',\n      value: function qSelectAll(target, selector) {\n        return [].concat(_toConsumableArray(target.querySelectorAll(selector)));\n      }\n    }, {\n      key: 'unbind',\n      value: function unbind(source, target) {\n        var bindings = source[_$2].bindings;\n        Object.keys(bindings).forEach(function (key) {\n          var chain = bindings[key].chain.filter(function (binding) {\n            if (binding.target === target) {\n              binding.destroy();\n              return false;\n            }\n            return true;\n          });\n          bindings[key].chain = chain;\n        });\n      }\n    }, {\n      key: 'root',\n      value: function root(target) {\n        return target.__isSlim && target.useShadow ? target[_$2].rootElement : target;\n      }\n    }, {\n      key: 'selectRecursive',\n      value: function selectRecursive(target, force) {\n        var collection = [];\n        var search = function search(node, force) {\n          collection.push(node);\n          var allow = !node.__isSlim || node.__isSlim && !node.template || node.__isSlim && node === target || force;\n          if (allow) {\n            var children = [].concat(_toConsumableArray(Slim.root(node).children));\n            children.forEach(function (childNode) {\n              search(childNode, force);\n            });\n          }\n        };\n        search(target, force);\n        return collection;\n      }\n    }, {\n      key: 'removeChild',\n      value: function removeChild(target) {\n        if (typeof target.remove === 'function') {\n          target.remove();\n        }\n        if (target.parentNode) {\n          target.parentNode.removeChild(target);\n        }\n        if (this._$(target).internetExploderClone) {\n          this.removeChild(this._$(target).internetExploderClone);\n        }\n      }\n    }, {\n      key: 'moveChildren',\n      value: function moveChildren(source, target) {\n        while (source.firstChild) {\n          target.appendChild(source.firstChild);\n        }\n      }\n    }, {\n      key: 'wrapGetterSetter',\n      value: function wrapGetterSetter(element, expression) {\n        var pName = expression.split('.')[0];\n        var descriptor = Object.getOwnPropertyDescriptor(element, pName);\n        var oSetter = descriptor && descriptor.set;\n        if (oSetter && oSetter[_$2]) return pName;\n        if (typeof oSetter === 'undefined') {\n          oSetter = function oSetter() {};\n        }\n\n        var srcValue = element[pName];\n        this._$(element).bindings[pName] = element[_$2].bindings[pName] || {\n          chain: [],\n          value: srcValue\n        };\n        element[_$2].bindings[pName].value = srcValue;\n        var newSetter = function newSetter(v) {\n          oSetter(v);\n          this[_$2].bindings[pName].value = v;\n          this._executeBindings(pName);\n        };\n        newSetter[_$2] = true;\n        element.__defineGetter__(pName, function () {\n          return element[_$2].bindings[pName].value;\n        });\n        element.__defineSetter__(pName, newSetter);\n        return pName;\n      }\n    }, {\n      key: 'bindOwn',\n      value: function bindOwn(target, expression, executor) {\n        return Slim.bind(target, target, expression, executor);\n      }\n    }, {\n      key: 'bind',\n      value: function bind(source, target, expression, executor) {\n        Slim._$(source);\n        Slim._$(target);\n        if (target[_$2].excluded) return;\n        executor.source = source;\n        executor.target = target;\n        var pName = this.wrapGetterSetter(source, expression);\n        if (!source[_$2].reversed[pName]) {\n          source[_$2].bindings[pName].chain.push(executor);\n        }\n        target[_$2].inbounds[pName] = target[_$2].inbounds[pName] || [];\n        target[_$2].inbounds[pName].push(executor);\n        return executor;\n      }\n    }, {\n      key: 'update',\n      value: function update(target) {\n        var children = Slim.selectRecursive(target);\n\n        for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          props[_key - 1] = arguments[_key];\n        }\n\n        if (props.length === 0) {\n          return children.forEach(function (child) {\n            Slim.commit(child);\n          });\n        }\n        props.forEach(function (prop) {\n          children.forEach(function (child) {\n            Slim.commit(child, prop);\n          });\n        });\n      }\n    }, {\n      key: 'commit',\n      value: function commit(target, prop) {\n        var keys = void 0;\n        var $ = target[_$2];\n        var chain = [];\n        if (prop) {\n          if ($.inbounds[prop]) {\n            chain = chain.concat($.inbounds[prop] || []);\n          }\n          if ($.bindings[prop]) {\n            chain = chain.concat($.bindings[prop].chain);\n          }\n        } else {\n          Object.keys(target[_$2].inbounds).forEach(function (prop) {\n            if ($.inbounds[prop]) {\n              chain = chain.concat($.inbounds[prop] || []);\n            }\n            if ($.bindings[prop]) {\n              chain = chain.concat($.bindings[prop].chain);\n            }\n          });\n        }\n        chain.forEach(function (x) {\n          return x();\n        });\n      }\n\n      /*\n        Class instance\n        */\n\n    }, {\n      key: 'rxInject',\n      get: function get() {\n        return (/\\{(.+[^(\\((.+)\\))])\\}/\n        );\n      }\n    }, {\n      key: 'rxProp',\n      get: function get() {\n        return (/(.+[^(\\((.+)\\))])/\n        );\n      }\n    }, {\n      key: 'rxMethod',\n      get: function get() {\n        return (/(.+)(\\((.+)\\)){1}/\n        );\n      }\n    }]);\n\n    function Slim() {\n      _classCallCheck(this, Slim);\n\n      var _this = _possibleConstructorReturn(this, (Slim.__proto__ || Object.getPrototypeOf(Slim)).call(this));\n\n      _this.__isSlim = true;\n      Slim.debug('ctor', _this.localName);\n      if (Slim.checkCreationBlocking(_this)) {\n        return _possibleConstructorReturn(_this);\n      }\n      _this.createdCallback();\n      return _this;\n    }\n\n    // Native DOM Api V1\n\n    _createClass(Slim, [{\n      key: 'createdCallback',\n      value: function createdCallback() {\n        if (this[_$2] && this[_$2].createdCallbackInvoked) return;\n        this._initialize();\n        this[_$2].createdCallbackInvoked = true;\n        this.onBeforeCreated();\n        Slim.executePlugins('create', this);\n        this.render();\n        this.onCreated();\n      }\n\n      // Native DOM Api V2\n\n    }, {\n      key: 'connectedCallback',\n      value: function connectedCallback() {\n        this.createdCallback();\n        this.onAdded();\n        Slim.executePlugins('added', this);\n      }\n    }, {\n      key: 'disconnectedCallback',\n      value: function disconnectedCallback() {\n        this.onRemoved();\n        Slim.executePlugins('removed', this);\n      }\n    }, {\n      key: 'attributeChangedCallback',\n      value: function attributeChangedCallback(attr, oldValue, newValue) {\n        if (newValue !== oldValue && this[_$2].autoBoundAttributes[attr]) {\n          var prop = Slim.dashToCamel(attr);\n          this[prop] = newValue;\n        }\n      }\n\n      // Slim internal API\n\n    }, {\n      key: '_executeBindings',\n      value: function _executeBindings(prop) {\n        var _this2 = this;\n\n        Slim.debug('_executeBindings', this.localName);\n        var all = this[_$2].bindings;\n        if (prop) {\n          all = _defineProperty({}, prop, true);\n        }\n        Object.keys(all).forEach(function (pName) {\n          var o = _this2[_$2].bindings[pName];\n          o && o.chain.forEach(function (binding) {\n            return binding();\n          });\n        });\n      }\n    }, {\n      key: '_bindChildren',\n      value: function _bindChildren(children) {\n        Slim.debug('_bindChildren', this.localName);\n        if (!children) {\n          children = Slim.qSelectAll(this, '*');\n        }\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var child = _step2.value;\n\n            Slim._$(child);\n            if (child[_$2].boundParent === this) continue;\n            child[_$2].boundParent = child[_$2].boundParent || this;\n\n            // todo: child.localName === 'style' && this.useShadow -> processStyleNodeInShadowMode\n\n            if (child.attributes.length) {\n              var i = 0;\n              var n = child.attributes.length;\n              while (i < n) {\n                var source = this;\n                var attribute = child.attributes.item(i);\n                if (!child[_$2].excluded) {\n                  var _iteratorNormalCompletion3 = true;\n                  var _didIteratorError3 = false;\n                  var _iteratorError3 = undefined;\n\n                  try {\n                    for (var _iterator3 = Slim[_$2].customDirectives[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                      var _ref3 = _step3.value;\n\n                      var _ref4 = _slicedToArray(_ref3, 2);\n\n                      var check = _ref4[0];\n                      var directive = _ref4[1];\n\n                      var match = check(attribute);\n                      if (match) {\n                        directive(source, child, attribute, match);\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                      }\n                    } finally {\n                      if (_didIteratorError3) {\n                        throw _iteratorError3;\n                      }\n                    }\n                  }\n                }\n                i++;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    }, {\n      key: '_resetBindings',\n      value: function _resetBindings() {\n        Slim.debug('_resetBindings', this.localName);\n        this[_$2].bindings = {};\n      }\n    }, {\n      key: '_render',\n      value: function _render(customTemplate) {\n        var _this3 = this;\n\n        Slim.debug('_render', this.localName);\n        Slim.executePlugins('beforeRender', this);\n        this[_$2].hasCustomTemplate = customTemplate;\n        this._resetBindings();\n        this[_$2].rootElement.innerHTML = '';[].concat(_toConsumableArray(this.childNodes)).forEach(function (childNode) {\n          if (childNode.localName === 'style') {\n            _this3[_$2].externalStyle = childNode;\n            childNode.remove();\n          }\n        });\n        var template = this[_$2].hasCustomTemplate || this.template;\n        if (template && typeof template === 'string') {\n          var frag = document.createElement('slim-root-fragment');\n          frag.innerHTML = template || '';\n          var scopedChildren = Slim.qSelectAll(frag, '*');\n          if (this[_$2].externalStyle) {\n            this._bindChildren([this[_$2].externalStyle]);\n          }\n          this._bindChildren(scopedChildren);\n          Slim.asap(function () {\n            Slim.moveChildren(frag, _this3[_$2].rootElement || _this3);\n            _this3[_$2].externalStyle && _this3[_$2].rootElement.appendChild(_this3[_$2].externalStyle);\n            _this3._executeBindings();\n            _this3.onRender();\n            Slim.executePlugins('afterRender', _this3);\n            _this3.dispatchEvent(new Event('afterRender'));\n          });\n        }\n      }\n    }, {\n      key: '_initialize',\n      value: function _initialize() {\n        var _this4 = this;\n\n        Slim.debug('_initialize', this.localName);\n        Slim._$(this);\n        this[_$2].uniqueIndex = Slim.createUniqueIndex();\n        if (this.useShadow) {\n          // this[_$].rootElement = this.attachShadow({mode:'open'})\n          this[_$2].rootElement = this.createShadowRoot();\n        } else {\n          this[_$2].rootElement = this;\n        }\n        // this.setAttribute('slim-uq', this[_$].uniqueIndex)\n        var observedAttributes = this.constructor.observedAttributes;\n        if (observedAttributes) {\n          observedAttributes.forEach(function (attr) {\n            var pName = Slim.dashToCamel(attr);\n            _this4[pName] = _this4.getAttribute(attr);\n          });\n        }\n      }\n\n      // Slim public / protected API\n\n    }, {\n      key: 'commit',\n      value: function commit() {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        Slim.commit.apply(Slim, [this].concat(args));\n      }\n    }, {\n      key: 'update',\n      value: function update() {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        Slim.update.apply(Slim, [this].concat(args));\n      }\n    }, {\n      key: 'render',\n      value: function render(tpl) {\n        this._render(tpl);\n      }\n    }, {\n      key: 'onRender',\n      value: function onRender() {}\n    }, {\n      key: 'onBeforeCreated',\n      value: function onBeforeCreated() {}\n    }, {\n      key: 'onCreated',\n      value: function onCreated() {}\n    }, {\n      key: 'onAdded',\n      value: function onAdded() {}\n    }, {\n      key: 'onRemoved',\n      value: function onRemoved() {}\n    }, {\n      key: 'find',\n      value: function find(selector) {\n        return this[_$2].rootElement.querySelector(selector);\n      }\n    }, {\n      key: 'findAll',\n      value: function findAll(selector) {\n        return Slim.qSelectAll(this[_$2].rootElement, selector);\n      }\n    }, {\n      key: 'callAttribute',\n      value: function callAttribute(attr, data) {\n        var fnName = this.getAttribute(attr);\n        if (fnName) {\n          return this[_$2].boundParent[fnName](data);\n        }\n      }\n    }, {\n      key: '_isInContext',\n      get: function get() {\n        var node = this;\n        while (node) {\n          node = node.parentNode;\n          if (!node) {\n            return false;\n          }\n          if (node instanceof Document) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: 'useShadow',\n      get: function get() {\n        return false;\n      }\n    }, {\n      key: 'template',\n      get: function get() {\n        return Slim.tagToTemplateDict.get(Slim.tagOf(this.constructor));\n      }\n    }]);\n\n    return Slim;\n  }(_CustomElement);\n\n  Slim.uniqueIndex = 0;\n  Slim.tagToClassDict = new Map();\n  Slim.classToTagDict = new Map();\n  Slim.tagToTemplateDict = new Map();\n  Slim.plugins = {\n    'create': [],\n    'added': [],\n    'beforeRender': [],\n    'afterRender': [],\n    'removed': []\n  };\n\n  Slim.debug = function () {};\n\n  Slim.asap = window && window.requestAnimationFrame ? function (cb) {\n    return window.requestAnimationFrame(cb);\n  } : typeof setImmediate !== 'undefined' ? setImmediate : function (cb) {\n    return setTimeout(cb, 0);\n  };\n\n  Slim[_$2] = {\n    customDirectives: new Map(),\n    uniqueCounter: 0,\n    supportedNativeEvents: ['click', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'wheel', 'mouseleave', 'select', 'pointerlockchange', 'pointerlockerror', 'focus', 'blur', 'input', 'error', 'invalid', 'animationstart', 'animationend', 'animationiteration', 'reset', 'submit', 'resize', 'scroll', 'keydown', 'keypress', 'keyup', 'change']\n  };\n\n  Slim.customDirective(function (attr) {\n    return (/^s:iterate$/.test(attr.nodeName)\n    );\n  }, function () {}, true);\n\n  // supported events (i.e. click, mouseover, change...)\n  Slim.customDirective(function (attr) {\n    return Slim[_$2].supportedNativeEvents.indexOf(attr.nodeName) >= 0;\n  }, function (source, target, attribute) {\n    var eventName = attribute.nodeName;\n    var delegate = attribute.value;\n    Slim._$(target).eventHandlers = target[_$2].eventHandlers || {};\n    var allHandlers = target[_$2].eventHandlers;\n    allHandlers[eventName] = allHandlers[eventName] || [];\n    var handler = function handler(e) {\n      try {\n        source[delegate].call(source, e);\n      } catch (err) {\n        err.message = 'Could not respond to event \"' + eventName + '\" on ' + target.localName + ' -> \"' + delegate + '\" on ' + source.localName + ' ... ' + err.message;\n        console.warn(err);\n      }\n    };\n    allHandlers[eventName].push(handler);\n    target.addEventListener(eventName, handler);\n    handler = null;\n  });\n\n  Slim.customDirective(function (attr) {\n    return (/^s:if$/.exec(attr.nodeName)\n    );\n  }, function (source, target, attribute) {\n    var expression = attribute.value;\n    var path = expression;\n    var isNegative = false;\n    if (path.charAt(0) === '!') {\n      path = path.slice(1);\n      isNegative = true;\n    }\n    var anchor = document.createComment('if:' + expression);\n    target.parentNode.insertBefore(anchor, target);\n    var fn = function fn() {\n      var value = Slim.lookup(source, path, target);\n      if (isNegative) {\n        value = !value;\n      }\n      if (value) {\n        anchor.parentNode.insertBefore(target, anchor.nextSibling);\n      } else {\n        Slim.removeChild(target);\n      }\n    };\n    Slim.bind(source, target, path, fn);\n  }, true);\n\n  // bind (text nodes)\n  Slim.customDirective(function (attr) {\n    return (/^bind$/.test(attr.nodeName)\n    );\n  }, function (source, target) {\n    Slim._$(target);\n    target[_$2].sourceText = target.innerText;\n    var updatedText = '';\n    var matches = target.innerText.match(/\\{\\{([^\\}\\}]+)+\\}\\}/g);\n    var aggProps = {};\n    var textBinds = {};\n    if (matches) {\n      matches.forEach(function (expression) {\n        var oldValue = void 0;\n        var rxM = /\\{\\{(.+)(\\((.+)\\)){1}\\}\\}/.exec(expression);\n        if (rxM) {\n          var fnName = rxM[1];\n          var pNames = rxM[3].split(' ').join('').split(',');\n          pNames.map(function (path) {\n            return path.split('.')[0];\n          }).forEach(function (p) {\n            return aggProps[p] = true;\n          });\n          textBinds[expression] = function (target) {\n            var args = pNames.map(function (path) {\n              return Slim.lookup(source, path, target);\n            });\n            var value = source[fnName].apply(source, args);\n            if (oldValue === value) return;\n            updatedText = updatedText.split(expression).join(value || '');\n          };\n          return;\n        }\n        var rxP = /\\{\\{(.+[^(\\((.+)\\))])\\}\\}/.exec(expression);\n        if (rxP) {\n          var path = rxP[1];\n          aggProps[path] = true;\n          textBinds[expression] = function (target) {\n            var value = Slim.lookup(source, path, target);\n            if (oldValue === value) return;\n            updatedText = updatedText.split(expression).join(value || '');\n          };\n        }\n      });\n      var chainExecutor = function chainExecutor() {\n        updatedText = target[_$2].sourceText;\n        Object.keys(textBinds).forEach(function (expression) {\n          textBinds[expression](target);\n        });\n        target.innerText = updatedText;\n      };\n      Object.keys(aggProps).forEach(function (prop) {\n        Slim.bind(source, target, prop, chainExecutor);\n      });\n    }\n  });\n\n  Slim.customDirective(function (attr) {\n    return (/^s:id$/.test(attr.nodeName)\n    );\n  }, function (source, target, attribute) {\n    Slim._$(target).boundParent[attribute.value] = target;\n  });\n\n  // bind:property\n  Slim.customDirective(function (attr) {\n    return (/^(bind):(\\S+)/.exec(attr.nodeName)\n    );\n  }, function (source, target, attribute, match) {\n    var tAttr = match[2];\n    var tProp = Slim.dashToCamel(tAttr);\n    var expression = attribute.value;\n    var oldValue = void 0;\n    var rxM = Slim.rxMethod.exec(expression);\n    if (rxM) {\n      var pNames = rxM[3].split(' ').join('').split(',');\n      pNames.forEach(function (pName) {\n        Slim.bind(source, target, pName, function () {\n          var fn = Slim.lookup(source, rxM[1], target);\n          var args = pNames.map(function (prop) {\n            return Slim.lookup(source, prop, target);\n          });\n          var value = fn.apply(source, args);\n          if (oldValue === value) return;\n          target[tProp] = value;\n          target.setAttribute(tAttr, value);\n        });\n      });\n      return;\n    }\n    var rxP = Slim.rxProp.exec(expression);\n    if (rxP) {\n      var prop = rxP[1];\n      Slim.bind(source, target, prop, function () {\n        var value = Slim.lookup(source, expression, target);\n        if (oldValue === value) return;\n        target.setAttribute(tAttr, value);\n        target[tProp] = value;\n      });\n    }\n  });\n\n  __flags.isChrome && Slim.customDirective(function (attr) {\n    return (/^s:repeat$/.test(attr.nodeName)\n    );\n  }, function (source, templateNode, attribute) {\n    var path = attribute.value;\n    var tProp = 'data';\n    if (path.indexOf(' as')) {\n      tProp = path.split(' as ')[1] || tProp;\n      path = path.split(' as ')[0];\n    }\n\n    var clones = [];\n    var hook = document.createComment(templateNode.localName + ' s:repeat=\"' + attribute.value + '\"');\n    var templateHTML = void 0;\n    Slim._$(hook);\n    Slim.selectRecursive(templateNode, true).forEach(function (e) {\n      return Slim._$(e).excluded = true;\n    });\n    templateNode.parentElement.insertBefore(hook, templateNode);\n    templateNode.remove();\n    Slim.unbind(source, templateNode);\n    Slim.asap(function () {\n      templateNode.setAttribute('s:iterate', '');\n      templateNode.removeAttribute('s:repeat');\n      templateHTML = templateNode.outerHTML;\n      templateNode.innerHTML = '';\n    });\n    var oldDataSource = [];\n    Slim.bind(source, hook, path, function () {\n      var dataSource = Slim.lookup(source, path) || [];\n      var offset = 0;\n      var restOfData = [];\n      // get the diff\n      var diff = Array(dataSource.length);\n      dataSource.forEach(function (d, i) {\n        if (oldDataSource[i] !== d) {\n          diff[i] = true;\n        }\n      });\n      oldDataSource = dataSource.concat();\n      var indices = Object.keys(diff);\n      if (dataSource.length < clones.length) {\n        var disposables = clones.slice(dataSource.length);\n        clones = clones.slice(0, dataSource.length);\n        disposables.forEach(function (clone) {\n          return clone.remove();\n        });\n        // unbind disposables?\n        indices.forEach(function (index) {\n          var clone = clones[index];[clone].concat(Slim.qSelectAll(clone, '*')).forEach(function (t) {\n            t[_$2].repeater[tProp] = dataSource[index];\n            Slim.commit(t, tProp);\n          });\n        });\n      } else {\n        // recycle\n        clones.length && indices.forEach(function (index) {\n          var clone = clones[index];\n          if (!clone) return;\n          [clone].concat(Slim.qSelectAll(clone, '*')).forEach(function (t) {\n            t[_$2].repeater[tProp] = dataSource[index];\n            Slim.commit(t, tProp);\n          });\n        });\n        restOfData = dataSource.slice(clones.length);\n        offset = clones.length;\n      }\n      if (!restOfData.length) return;\n      // new clones\n      var range = document.createRange();\n      range.setStartBefore(hook);\n      var html = Array(restOfData.length).fill(templateHTML).join('');\n      var frag = range.createContextualFragment(html);\n      var all = [];\n      var i = 0;\n      while (i < frag.children.length) {\n        var e = frag.children.item(i);\n        clones.push(e);\n        all.push(e);\n        Slim._$(e).repeater[tProp] = dataSource[i + offset];\n        var subTree = Slim.qSelectAll(e, '*');\n        subTree.forEach(function (t) {\n          all.push(t);\n          Slim._$(t).repeater[tProp] = dataSource[i + offset];\n          Slim.commit(t, tProp);\n        });\n        i++;\n      }\n      source._bindChildren(all);\n      all.forEach(function (t) {\n        if (t.__isSlim) {\n          t.createdCallback();\n          Slim.asap(function () {\n            Slim.commit(t, tProp);\n            t[tProp] = t[_$2].repeater[tProp];\n          });\n        } else {\n          Slim.commit(t, tProp);\n          t[tProp] = t[_$2].repeater[tProp];\n        }\n      });\n      hook.parentElement.insertBefore(frag, hook);\n    });\n    source[_$2].reversed[tProp] = true;\n  }, true);\n\n  !__flags.isChrome && Slim.customDirective(function (attr) {\n    return (/^s:repeat$/.test(attr.nodeName)\n    );\n  }, function (source, templateNode, attribute) {\n    var path = attribute.nodeValue;\n    var tProp = 'data';\n    if (path.indexOf(' as')) {\n      tProp = path.split(' as ')[1] || tProp;\n      path = path.split(' as ')[0];\n    }\n\n    var repeater = document.createElement('slim-repeat');\n    repeater[_$2].boundParent = source;\n    repeater.dataProp = tProp;\n    repeater.dataPath = attribute.nodeValue;\n    repeater.templateNode = templateNode.cloneNode(true);\n    repeater.templateNode.removeAttribute('s:repeat');\n    templateNode.parentNode.insertBefore(repeater, templateNode);\n    Slim.removeChild(templateNode);\n    Slim.bind(source, repeater, path, function () {\n      var dataSource = Slim.lookup(source, path);\n      repeater.dataSource = dataSource || [];\n    });\n\n    // source._executeBindings()\n  }, true);\n\n  var SlimRepeater = function (_Slim) {\n    _inherits(SlimRepeater, _Slim);\n\n    function SlimRepeater() {\n      _classCallCheck(this, SlimRepeater);\n\n      return _possibleConstructorReturn(this, (SlimRepeater.__proto__ || Object.getPrototypeOf(SlimRepeater)).apply(this, arguments));\n    }\n\n    _createClass(SlimRepeater, [{\n      key: '_bindChildren',\n      value: function _bindChildren(tree) {\n        var _this6 = this;\n\n        tree = Array.prototype.slice.call(tree);\n        var directChildren = Array.prototype.filter.call(tree, function (child) {\n          return child.parentNode.localName === 'slim-root-fragment';\n        });\n        directChildren.forEach(function (child, index) {\n          child.setAttribute('s:iterate', _this6.dataPath + ' : ' + index);\n          Slim.selectRecursive(child).forEach(function (e) {\n            Slim._$(e).repeater[_this6.dataProp] = _this6.dataSource[index];\n            if (e instanceof Slim) {\n              e[_this6.dataProp] = _this6.dataSource[index];\n            }\n          });\n        });\n      }\n    }, {\n      key: 'onRender',\n      value: function onRender() {\n        if (!this.boundParent) return;\n        var tree = Slim.selectRecursive(this);\n        this.boundParent && this.boundParent._bindChildren(tree);\n        this.boundParent._executeBindings();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this7 = this;\n\n        if (!this.boundParent) return;\n        Slim.qSelectAll(this, '*').forEach(function (e) {\n          Slim.unbind(_this7.boundParent, e);\n        });\n        if (!this.dataSource || !this.templateNode || !this.boundParent) {\n          return _get(SlimRepeater.prototype.__proto__ || Object.getPrototypeOf(SlimRepeater.prototype), 'render', this).call(this, '');\n        }\n        var newTemplate = Array(this.dataSource.length).fill(this.templateNode.outerHTML).join('');\n        this.innerHTML = '';\n        _get(SlimRepeater.prototype.__proto__ || Object.getPrototypeOf(SlimRepeater.prototype), 'render', this).call(this, newTemplate);\n      }\n    }, {\n      key: 'dataSource',\n      get: function get() {\n        return this._dataSource;\n      },\n      set: function set(v) {\n        if (this._dataSource !== v) {\n          this._dataSource = v;\n          this.render();\n        }\n      }\n    }, {\n      key: 'boundParent',\n      get: function get() {\n        return this[_$2].boundParent;\n      }\n    }]);\n\n    return SlimRepeater;\n  }(Slim);\n\n  Slim.tag('slim-repeat', SlimRepeater);\n\n  if (window) {\n    window['Slim'] = Slim;\n  }\n  if (true) {\n    module.exports.Slim = Slim;\n  }\n})(window, document, HTMLElement);\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(12);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzP2QxZWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("\t\tSlim.tag(\n\t\t\t'my-tag',\n\t\t\t`<div>Web Component version</div>\n\t\t\t<div>Citation:</div>\n\t\t\t<div>\n\t\t\t<span bind>{{Authors}}.</span>\n\t\t\t<span bind>{{Year}}.</span>\n\t\t\t<span bind>{{Dataset}}</span>\n\t\t\t<span style=\"font-style: italic;\" bind>{{Title}}.</span>\n\t\t\t<span bind>{{Archive}}</span>\n\t\t\t<span bind>{{Version}}</span>\n\t\t\t<span bind>Retrieved from {{PID}}</span>\n\t\t\t</div>`,\n\t\t\tclass MyTag extends Slim {\n\t\t\t\t// your code here\n\t\t\t\tonBeforeCreated() {\n\t\t\t\t\tvar element = document.getElementById('test');\n\t\t\t\t\tvar jsonld = element.innerHTML;\n\n\t\t\t\t\t// var promises = jsonld.promises;\n\t\t\t\t\t// var promise = promises.flatten(doc);\n\t\t\t\t\t// promise.then(function (flattened) { this.myMessage = flattened }, function (err) { this.myMessage = flattened });\n\n\t\t\t\t\tvar obj = JSON.parse(jsonld);\n\n\t\t\t\t\tthis.Authors = obj.publisher.name\n\t\t\t\t\tthis.Year = \"\"\n\t\t\t\t\tthis.Dataset = obj.name\n\t\t\t\t\tthis.Title = obj.description\n\t\t\t\t\tthis.Archive = \"\"\n\t\t\t\t\tthis.Version = \"\"\n\t\t\t\t\tthis.PID = obj.url\n\t\t\t\t}\n\t\t\t})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90YWcyLmpzP2Q2ZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixNQUFNO0FBQ3RCLGdCQUFnQixTQUFTO0FBQ3pCLG1DQUFtQyxTQUFTLE9BQU87QUFDbkQsZ0JBQWdCLFNBQVM7QUFDekIsZ0JBQWdCLFNBQVM7QUFDekIsK0JBQStCLEtBQUs7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsNkJBQTZCLGtCQUFrQiw2QkFBNkI7O0FBRXZIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHRcdFNsaW0udGFnKFxuXHRcdFx0J215LXRhZycsXG5cdFx0XHRgPGRpdj5XZWIgQ29tcG9uZW50IHZlcnNpb248L2Rpdj5cblx0XHRcdDxkaXY+Q2l0YXRpb246PC9kaXY+XG5cdFx0XHQ8ZGl2PlxuXHRcdFx0PHNwYW4gYmluZD57e0F1dGhvcnN9fS48L3NwYW4+XG5cdFx0XHQ8c3BhbiBiaW5kPnt7WWVhcn19Ljwvc3Bhbj5cblx0XHRcdDxzcGFuIGJpbmQ+e3tEYXRhc2V0fX08L3NwYW4+XG5cdFx0XHQ8c3BhbiBzdHlsZT1cImZvbnQtc3R5bGU6IGl0YWxpYztcIiBiaW5kPnt7VGl0bGV9fS48L3NwYW4+XG5cdFx0XHQ8c3BhbiBiaW5kPnt7QXJjaGl2ZX19PC9zcGFuPlxuXHRcdFx0PHNwYW4gYmluZD57e1ZlcnNpb259fTwvc3Bhbj5cblx0XHRcdDxzcGFuIGJpbmQ+UmV0cmlldmVkIGZyb20ge3tQSUR9fTwvc3Bhbj5cblx0XHRcdDwvZGl2PmAsXG5cdFx0XHRjbGFzcyBNeVRhZyBleHRlbmRzIFNsaW0ge1xuXHRcdFx0XHQvLyB5b3VyIGNvZGUgaGVyZVxuXHRcdFx0XHRvbkJlZm9yZUNyZWF0ZWQoKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdCcpO1xuXHRcdFx0XHRcdHZhciBqc29ubGQgPSBlbGVtZW50LmlubmVySFRNTDtcblxuXHRcdFx0XHRcdC8vIHZhciBwcm9taXNlcyA9IGpzb25sZC5wcm9taXNlcztcblx0XHRcdFx0XHQvLyB2YXIgcHJvbWlzZSA9IHByb21pc2VzLmZsYXR0ZW4oZG9jKTtcblx0XHRcdFx0XHQvLyBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZsYXR0ZW5lZCkgeyB0aGlzLm15TWVzc2FnZSA9IGZsYXR0ZW5lZCB9LCBmdW5jdGlvbiAoZXJyKSB7IHRoaXMubXlNZXNzYWdlID0gZmxhdHRlbmVkIH0pO1xuXG5cdFx0XHRcdFx0dmFyIG9iaiA9IEpTT04ucGFyc2UoanNvbmxkKTtcblxuXHRcdFx0XHRcdHRoaXMuQXV0aG9ycyA9IG9iai5wdWJsaXNoZXIubmFtZVxuXHRcdFx0XHRcdHRoaXMuWWVhciA9IFwiXCJcblx0XHRcdFx0XHR0aGlzLkRhdGFzZXQgPSBvYmoubmFtZVxuXHRcdFx0XHRcdHRoaXMuVGl0bGUgPSBvYmouZGVzY3JpcHRpb25cblx0XHRcdFx0XHR0aGlzLkFyY2hpdmUgPSBcIlwiXG5cdFx0XHRcdFx0dGhpcy5WZXJzaW9uID0gXCJcIlxuXHRcdFx0XHRcdHRoaXMuUElEID0gb2JqLnVybFxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi90YWcyLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ })
/******/ ]);