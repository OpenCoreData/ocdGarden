/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
__webpack_require__(2);
__webpack_require__(3);
module.exports = __webpack_require__(8);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function() {\n  'use strict';\n  // global for (1) existence means `WebComponentsReady` will file,\n  // (2) WebComponents.ready == true means event has fired.\n  window.WebComponents = window.WebComponents || {};\n  var name = 'webcomponents-loader.js';\n  // Feature detect which polyfill needs to be imported.\n  var polyfills = [];\n  if (!('import' in document.createElement('link'))) {\n    polyfills.push('hi');\n  }\n  if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||\n    (window.ShadyDOM && window.ShadyDOM.force)) {\n    polyfills.push('sd');\n  }\n  if (!window.customElements || window.customElements.forcePolyfill) {\n    polyfills.push('ce');\n  }\n  // NOTE: any browser that does not have template or ES6 features\n  // must load the full suite (called `lite` for legacy reasons) of polyfills.\n  if (!('content' in document.createElement('template')) || !window.Promise || !Array.from ||\n    // Edge has broken fragment cloning which means you cannot clone template.content\n    !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment)) {\n    polyfills = ['lite'];\n  }\n\n  if (polyfills.length) {\n    var script = document.querySelector('script[src*=\"' + name +'\"]');\n    var newScript = document.createElement('script');\n    // Load it from the right place.\n    var replacement = 'webcomponents-' + polyfills.join('-') + '.js';\n    var url = script.src.replace(name, replacement);\n    newScript.src = url;\n    // NOTE: this is required to ensure the polyfills are loaded before\n    // *native* html imports load on older Chrome versions. This *is* CSP\n    // compliant since CSP rules must have allowed this script to run.\n    // In all other cases, this can be async.\n    if (document.readyState === 'loading' && ('import' in document.createElement('link'))) {\n      document.write(newScript.outerHTML);\n    } else {\n      document.head.appendChild(newScript);\n    }\n  } else {\n    // Ensure `WebComponentsReady` is fired also when there are no polyfills loaded.\n    // however, we have to wait for the document to be in 'interactive' state,\n    // otherwise a rAF may fire before scripts in <body>\n\n    var fire = function() {\n      requestAnimationFrame(function() {\n        window.WebComponents.ready = true;\n        document.dispatchEvent(new CustomEvent('WebComponentsReady', {bubbles: true}));\n      });\n    };\n\n    if (document.readyState !== 'loading') {\n      fire();\n    } else {\n      document.addEventListener('readystatechange', function wait() {\n        fire();\n        document.removeEventListener('readystatechange', wait);\n      });\n    }\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWJjb21wb25lbnRzLWxvYWRlci5qcz8zMjczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsY0FBYztBQUNwRixPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgLy8gZ2xvYmFsIGZvciAoMSkgZXhpc3RlbmNlIG1lYW5zIGBXZWJDb21wb25lbnRzUmVhZHlgIHdpbGwgZmlsZSxcbiAgLy8gKDIpIFdlYkNvbXBvbmVudHMucmVhZHkgPT0gdHJ1ZSBtZWFucyBldmVudCBoYXMgZmlyZWQuXG4gIHdpbmRvdy5XZWJDb21wb25lbnRzID0gd2luZG93LldlYkNvbXBvbmVudHMgfHwge307XG4gIHZhciBuYW1lID0gJ3dlYmNvbXBvbmVudHMtbG9hZGVyLmpzJztcbiAgLy8gRmVhdHVyZSBkZXRlY3Qgd2hpY2ggcG9seWZpbGwgbmVlZHMgdG8gYmUgaW1wb3J0ZWQuXG4gIHZhciBwb2x5ZmlsbHMgPSBbXTtcbiAgaWYgKCEoJ2ltcG9ydCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpKSkge1xuICAgIHBvbHlmaWxscy5wdXNoKCdoaScpO1xuICB9XG4gIGlmICghKCdhdHRhY2hTaGFkb3cnIGluIEVsZW1lbnQucHJvdG90eXBlICYmICdnZXRSb290Tm9kZScgaW4gRWxlbWVudC5wcm90b3R5cGUpIHx8XG4gICAgKHdpbmRvdy5TaGFkeURPTSAmJiB3aW5kb3cuU2hhZHlET00uZm9yY2UpKSB7XG4gICAgcG9seWZpbGxzLnB1c2goJ3NkJyk7XG4gIH1cbiAgaWYgKCF3aW5kb3cuY3VzdG9tRWxlbWVudHMgfHwgd2luZG93LmN1c3RvbUVsZW1lbnRzLmZvcmNlUG9seWZpbGwpIHtcbiAgICBwb2x5ZmlsbHMucHVzaCgnY2UnKTtcbiAgfVxuICAvLyBOT1RFOiBhbnkgYnJvd3NlciB0aGF0IGRvZXMgbm90IGhhdmUgdGVtcGxhdGUgb3IgRVM2IGZlYXR1cmVzXG4gIC8vIG11c3QgbG9hZCB0aGUgZnVsbCBzdWl0ZSAoY2FsbGVkIGBsaXRlYCBmb3IgbGVnYWN5IHJlYXNvbnMpIG9mIHBvbHlmaWxscy5cbiAgaWYgKCEoJ2NvbnRlbnQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJykpIHx8ICF3aW5kb3cuUHJvbWlzZSB8fCAhQXJyYXkuZnJvbSB8fFxuICAgIC8vIEVkZ2UgaGFzIGJyb2tlbiBmcmFnbWVudCBjbG9uaW5nIHdoaWNoIG1lYW5zIHlvdSBjYW5ub3QgY2xvbmUgdGVtcGxhdGUuY29udGVudFxuICAgICEoZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmNsb25lTm9kZSgpIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkpIHtcbiAgICBwb2x5ZmlsbHMgPSBbJ2xpdGUnXTtcbiAgfVxuXG4gIGlmIChwb2x5ZmlsbHMubGVuZ3RoKSB7XG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmMqPVwiJyArIG5hbWUgKydcIl0nKTtcbiAgICB2YXIgbmV3U2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgLy8gTG9hZCBpdCBmcm9tIHRoZSByaWdodCBwbGFjZS5cbiAgICB2YXIgcmVwbGFjZW1lbnQgPSAnd2ViY29tcG9uZW50cy0nICsgcG9seWZpbGxzLmpvaW4oJy0nKSArICcuanMnO1xuICAgIHZhciB1cmwgPSBzY3JpcHQuc3JjLnJlcGxhY2UobmFtZSwgcmVwbGFjZW1lbnQpO1xuICAgIG5ld1NjcmlwdC5zcmMgPSB1cmw7XG4gICAgLy8gTk9URTogdGhpcyBpcyByZXF1aXJlZCB0byBlbnN1cmUgdGhlIHBvbHlmaWxscyBhcmUgbG9hZGVkIGJlZm9yZVxuICAgIC8vICpuYXRpdmUqIGh0bWwgaW1wb3J0cyBsb2FkIG9uIG9sZGVyIENocm9tZSB2ZXJzaW9ucy4gVGhpcyAqaXMqIENTUFxuICAgIC8vIGNvbXBsaWFudCBzaW5jZSBDU1AgcnVsZXMgbXVzdCBoYXZlIGFsbG93ZWQgdGhpcyBzY3JpcHQgdG8gcnVuLlxuICAgIC8vIEluIGFsbCBvdGhlciBjYXNlcywgdGhpcyBjYW4gYmUgYXN5bmMuXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJyAmJiAoJ2ltcG9ydCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpKSkge1xuICAgICAgZG9jdW1lbnQud3JpdGUobmV3U2NyaXB0Lm91dGVySFRNTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3U2NyaXB0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRW5zdXJlIGBXZWJDb21wb25lbnRzUmVhZHlgIGlzIGZpcmVkIGFsc28gd2hlbiB0aGVyZSBhcmUgbm8gcG9seWZpbGxzIGxvYWRlZC5cbiAgICAvLyBob3dldmVyLCB3ZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBkb2N1bWVudCB0byBiZSBpbiAnaW50ZXJhY3RpdmUnIHN0YXRlLFxuICAgIC8vIG90aGVyd2lzZSBhIHJBRiBtYXkgZmlyZSBiZWZvcmUgc2NyaXB0cyBpbiA8Ym9keT5cblxuICAgIHZhciBmaXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpbmRvdy5XZWJDb21wb25lbnRzLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1dlYkNvbXBvbmVudHNSZWFkeScsIHtidWJibGVzOiB0cnVlfSkpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgIGZpcmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgICAgIGZpcmUoKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIHdhaXQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93ZWJjb21wb25lbnRzLWxvYWRlci5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("(function(){\n'use strict';var h=new function(){};var aa=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function n(b){var a=aa.has(b);b=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(b);return!a&&b}function p(b){var a=b.isConnected;if(void 0!==a)return a;for(;b&&!(b.__CE_isImportDocument||b instanceof Document);)b=b.parentNode||(window.ShadowRoot&&b instanceof ShadowRoot?b.host:void 0);return!(!b||!(b.__CE_isImportDocument||b instanceof Document))}\nfunction q(b,a){for(;a&&a!==b&&!a.nextSibling;)a=a.parentNode;return a&&a!==b?a.nextSibling:null}\nfunction t(b,a,c){c=c?c:new Set;for(var d=b;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;a(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)t(d,a,c);d=q(b,e);continue}else if(\"template\"===f){d=q(b,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)t(e,a,c)}d=d.firstChild?d.firstChild:q(b,d)}}function u(b,a,c){b[a]=c};function v(){this.a=new Map;this.o=new Map;this.f=[];this.b=!1}function ba(b,a,c){b.a.set(a,c);b.o.set(c.constructor,c)}function w(b,a){b.b=!0;b.f.push(a)}function x(b,a){b.b&&t(a,function(a){return y(b,a)})}function y(b,a){if(b.b&&!a.__CE_patched){a.__CE_patched=!0;for(var c=0;c<b.f.length;c++)b.f[c](a)}}function z(b,a){var c=[];t(a,function(b){return c.push(b)});for(a=0;a<c.length;a++){var d=c[a];1===d.__CE_state?b.connectedCallback(d):A(b,d)}}\nfunction B(b,a){var c=[];t(a,function(b){return c.push(b)});for(a=0;a<c.length;a++){var d=c[a];1===d.__CE_state&&b.disconnectedCallback(d)}}\nfunction C(b,a,c){c=c?c:{};var d=c.w||new Set,e=c.s||function(a){return A(b,a)},f=[];t(a,function(a){if(\"link\"===a.localName&&\"import\"===a.getAttribute(\"rel\")){var c=a.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:a.addEventListener(\"load\",function(){var c=a.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);C(b,c,{w:f,s:e})}})}else f.push(a)},d);if(b.b)for(a=0;a<\nf.length;a++)y(b,f[a]);for(a=0;a<f.length;a++)e(f[a])}\nfunction A(b,a){if(void 0===a.__CE_state){var c=a.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=b.a.get(a.localName)){c.constructionStack.push(a);var d=c.constructor;try{try{if(new d!==a)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(m){throw a.__CE_state=2,m;}a.__CE_state=1;a.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\nf=a.getAttribute(e);null!==f&&b.attributeChangedCallback(a,e,null,f,null)}p(a)&&b.connectedCallback(a)}}}v.prototype.connectedCallback=function(b){var a=b.__CE_definition;a.connectedCallback&&a.connectedCallback.call(b)};v.prototype.disconnectedCallback=function(b){var a=b.__CE_definition;a.disconnectedCallback&&a.disconnectedCallback.call(b)};\nv.prototype.attributeChangedCallback=function(b,a,c,d,e){var f=b.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(a)&&f.attributeChangedCallback.call(b,a,c,d,e)};function D(b,a){this.c=b;this.a=a;this.b=void 0;C(this.c,this.a);\"loading\"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function E(b){b.b&&b.b.disconnect()}D.prototype.f=function(b){var a=this.a.readyState;\"interactive\"!==a&&\"complete\"!==a||E(this);for(a=0;a<b.length;a++)for(var c=b[a].addedNodes,d=0;d<c.length;d++)C(this.c,c[d])};function ca(){var b=this;this.b=this.a=void 0;this.f=new Promise(function(a){b.b=a;b.a&&a(b.a)})}function F(b){if(b.a)throw Error(\"Already resolved.\");b.a=void 0;b.b&&b.b(void 0)};function G(b){this.i=!1;this.c=b;this.m=new Map;this.j=function(b){return b()};this.g=!1;this.l=[];this.u=new D(b,document)}\nG.prototype.define=function(b,a){var c=this;if(!(a instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!n(b))throw new SyntaxError(\"The element name '\"+b+\"' is not valid.\");if(this.c.a.get(b))throw Error(\"A custom element with name '\"+b+\"' has already been defined.\");if(this.i)throw Error(\"A custom element is already being defined.\");this.i=!0;var d,e,f,m,l;try{var g=function(b){var a=k[b];if(void 0!==a&&!(a instanceof Function))throw Error(\"The '\"+b+\"' callback must be a function.\");\nreturn a},k=a.prototype;if(!(k instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");d=g(\"connectedCallback\");e=g(\"disconnectedCallback\");f=g(\"adoptedCallback\");m=g(\"attributeChangedCallback\");l=a.observedAttributes||[]}catch(r){return}finally{this.i=!1}a={localName:b,constructor:a,connectedCallback:d,disconnectedCallback:e,adoptedCallback:f,attributeChangedCallback:m,observedAttributes:l,constructionStack:[]};ba(this.c,b,a);this.l.push(a);this.g||\n(this.g=!0,this.j(function(){return da(c)}))};function da(b){if(!1!==b.g){b.g=!1;for(var a=b.l,c=[],d=new Map,e=0;e<a.length;e++)d.set(a[e].localName,[]);C(b.c,document,{s:function(a){if(void 0===a.__CE_state){var e=a.localName,f=d.get(e);f?f.push(a):b.c.a.get(e)&&c.push(a)}}});for(e=0;e<c.length;e++)A(b.c,c[e]);for(;0<a.length;){for(var f=a.shift(),e=f.localName,f=d.get(f.localName),m=0;m<f.length;m++)A(b.c,f[m]);(e=b.m.get(e))&&F(e)}}}G.prototype.get=function(b){if(b=this.c.a.get(b))return b.constructor};\nG.prototype.whenDefined=function(b){if(!n(b))return Promise.reject(new SyntaxError(\"'\"+b+\"' is not a valid custom element name.\"));var a=this.m.get(b);if(a)return a.f;a=new ca;this.m.set(b,a);this.c.a.get(b)&&!this.l.some(function(a){return a.localName===b})&&F(a);return a.f};G.prototype.v=function(b){E(this.u);var a=this.j;this.j=function(c){return b(function(){return a(c)})}};window.CustomElementRegistry=G;G.prototype.define=G.prototype.define;G.prototype.get=G.prototype.get;\nG.prototype.whenDefined=G.prototype.whenDefined;G.prototype.polyfillWrapFlushCallback=G.prototype.v;var H=window.Document.prototype.createElement,ea=window.Document.prototype.createElementNS,fa=window.Document.prototype.importNode,ga=window.Document.prototype.prepend,ha=window.Document.prototype.append,ia=window.DocumentFragment.prototype.prepend,ja=window.DocumentFragment.prototype.append,I=window.Node.prototype.cloneNode,J=window.Node.prototype.appendChild,K=window.Node.prototype.insertBefore,L=window.Node.prototype.removeChild,M=window.Node.prototype.replaceChild,N=Object.getOwnPropertyDescriptor(window.Node.prototype,\n\"textContent\"),O=window.Element.prototype.attachShadow,P=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),Q=window.Element.prototype.getAttribute,R=window.Element.prototype.setAttribute,S=window.Element.prototype.removeAttribute,T=window.Element.prototype.getAttributeNS,U=window.Element.prototype.setAttributeNS,ka=window.Element.prototype.removeAttributeNS,la=window.Element.prototype.insertAdjacentElement,ma=window.Element.prototype.prepend,na=window.Element.prototype.append,\nV=window.Element.prototype.before,oa=window.Element.prototype.after,pa=window.Element.prototype.replaceWith,qa=window.Element.prototype.remove,ra=window.HTMLElement,W=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),sa=window.HTMLElement.prototype.insertAdjacentElement;function ta(){var b=X;window.HTMLElement=function(){function a(){var a=this.constructor,d=b.o.get(a);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(!e.length)return e=H.call(document,d.localName),Object.setPrototypeOf(e,a.prototype),e.__CE_state=1,e.__CE_definition=d,y(b,e),e;var d=e.length-1,f=e[d];if(f===h)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\ne[d]=h;Object.setPrototypeOf(f,a.prototype);y(b,f);return f}a.prototype=ra.prototype;return a}()};function Y(b,a,c){function d(a){return function(d){for(var c=[],e=0;e<arguments.length;++e)c[e-0]=arguments[e];for(var e=[],f=[],k=0;k<c.length;k++){var r=c[k];r instanceof Element&&p(r)&&f.push(r);if(r instanceof DocumentFragment)for(r=r.firstChild;r;r=r.nextSibling)e.push(r);else e.push(r)}a.apply(this,c);for(c=0;c<f.length;c++)B(b,f[c]);if(p(this))for(c=0;c<e.length;c++)f=e[c],f instanceof Element&&z(b,f)}}c.h&&(a.prepend=d(c.h));c.append&&(a.append=d(c.append))};function ua(){var b=X;u(Document.prototype,\"createElement\",function(a){if(this.__CE_hasRegistry){var c=b.a.get(a);if(c)return new c.constructor}a=H.call(this,a);y(b,a);return a});u(Document.prototype,\"importNode\",function(a,c){a=fa.call(this,a,c);this.__CE_hasRegistry?C(b,a):x(b,a);return a});u(Document.prototype,\"createElementNS\",function(a,c){if(this.__CE_hasRegistry&&(null===a||\"http://www.w3.org/1999/xhtml\"===a)){var d=b.a.get(c);if(d)return new d.constructor}a=ea.call(this,a,c);y(b,a);return a});\nY(b,Document.prototype,{h:ga,append:ha})};function va(){var b=X;function a(a,d){Object.defineProperty(a,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(a){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,a);else{var c=void 0;if(this.firstChild){var e=this.childNodes,l=e.length;if(0<l&&p(this))for(var c=Array(l),g=0;g<l;g++)c[g]=e[g]}d.set.call(this,a);if(c)for(a=0;a<c.length;a++)B(b,c[a])}}})}u(Node.prototype,\"insertBefore\",function(a,d){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);\na=K.call(this,a,d);if(p(this))for(d=0;d<c.length;d++)z(b,c[d]);return a}c=p(a);d=K.call(this,a,d);c&&B(b,a);p(this)&&z(b,a);return d});u(Node.prototype,\"appendChild\",function(a){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=J.call(this,a);if(p(this))for(var e=0;e<c.length;e++)z(b,c[e]);return a}c=p(a);e=J.call(this,a);c&&B(b,a);p(this)&&z(b,a);return e});u(Node.prototype,\"cloneNode\",function(a){a=I.call(this,a);this.ownerDocument.__CE_hasRegistry?C(b,a):x(b,a);\nreturn a});u(Node.prototype,\"removeChild\",function(a){var c=p(a),e=L.call(this,a);c&&B(b,a);return e});u(Node.prototype,\"replaceChild\",function(a,d){if(a instanceof DocumentFragment){var e=Array.prototype.slice.apply(a.childNodes);a=M.call(this,a,d);if(p(this))for(B(b,d),d=0;d<e.length;d++)z(b,e[d]);return a}var e=p(a),c=M.call(this,a,d),m=p(this);m&&B(b,d);e&&B(b,a);m&&z(b,a);return c});N&&N.get?a(Node.prototype,N):w(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){for(var a=[],b=\n0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)L.call(this,this.firstChild);J.call(this,document.createTextNode(a))}})})};function wa(b){var a=Element.prototype;function c(a){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e-0]=arguments[e];for(var e=[],l=[],g=0;g<d.length;g++){var k=d[g];k instanceof Element&&p(k)&&l.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)e.push(k);else e.push(k)}a.apply(this,d);for(d=0;d<l.length;d++)B(b,l[d]);if(p(this))for(d=0;d<e.length;d++)l=e[d],l instanceof Element&&z(b,l)}}V&&(a.before=c(V));V&&(a.after=c(oa));pa&&u(a,\"replaceWith\",function(a){for(var d=\n[],c=0;c<arguments.length;++c)d[c-0]=arguments[c];for(var c=[],m=[],l=0;l<d.length;l++){var g=d[l];g instanceof Element&&p(g)&&m.push(g);if(g instanceof DocumentFragment)for(g=g.firstChild;g;g=g.nextSibling)c.push(g);else c.push(g)}l=p(this);pa.apply(this,d);for(d=0;d<m.length;d++)B(b,m[d]);if(l)for(B(b,this),d=0;d<c.length;d++)m=c[d],m instanceof Element&&z(b,m)});qa&&u(a,\"remove\",function(){var a=p(this);qa.call(this);a&&B(b,this)})};function xa(){var b=X;function a(a,c){Object.defineProperty(a,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(a){var d=this,e=void 0;p(this)&&(e=[],t(this,function(a){a!==d&&e.push(a)}));c.set.call(this,a);if(e)for(var f=0;f<e.length;f++){var k=e[f];1===k.__CE_state&&b.disconnectedCallback(k)}this.ownerDocument.__CE_hasRegistry?C(b,this):x(b,this);return a}})}function c(a,c){u(a,\"insertAdjacentElement\",function(a,d){var e=p(d);a=c.call(this,a,d);e&&B(b,d);p(a)&&z(b,d);\nreturn a})}O&&u(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=O.call(this,a)});P&&P.get?a(Element.prototype,P):W&&W.get?a(HTMLElement.prototype,W):w(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){return I.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,d=b?this.content:this,c=H.call(document,this.localName);for(c.innerHTML=a;0<d.childNodes.length;)L.call(d,d.childNodes[0]);for(a=b?c.content:c;0<a.childNodes.length;)J.call(d,\na.childNodes[0])}})});u(Element.prototype,\"setAttribute\",function(a,c){if(1!==this.__CE_state)return R.call(this,a,c);var d=Q.call(this,a);R.call(this,a,c);c=Q.call(this,a);b.attributeChangedCallback(this,a,d,c,null)});u(Element.prototype,\"setAttributeNS\",function(a,c,f){if(1!==this.__CE_state)return U.call(this,a,c,f);var d=T.call(this,a,c);U.call(this,a,c,f);f=T.call(this,a,c);b.attributeChangedCallback(this,c,d,f,a)});u(Element.prototype,\"removeAttribute\",function(a){if(1!==this.__CE_state)return S.call(this,\na);var c=Q.call(this,a);S.call(this,a);null!==c&&b.attributeChangedCallback(this,a,c,null,null)});u(Element.prototype,\"removeAttributeNS\",function(a,c){if(1!==this.__CE_state)return ka.call(this,a,c);var d=T.call(this,a,c);ka.call(this,a,c);var e=T.call(this,a,c);d!==e&&b.attributeChangedCallback(this,c,d,e,a)});sa?c(HTMLElement.prototype,sa):la?c(Element.prototype,la):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");Y(b,Element.prototype,{h:ma,append:na});wa(b)};/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nvar Z=window.customElements;if(!Z||Z.forcePolyfill||\"function\"!=typeof Z.define||\"function\"!=typeof Z.get){var X=new v;ta();ua();Y(X,DocumentFragment.prototype,{h:ia,append:ja});va();xa();document.__CE_hasRegistry=!0;var customElements=new G(X);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};\n}).call(self);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _CustomElement() {\n  return Reflect.construct(HTMLElement, [], this.__proto__.constructor);\n}\n\n;\nObject.setPrototypeOf(_CustomElement.prototype, HTMLElement.prototype);\nObject.setPrototypeOf(_CustomElement, HTMLElement);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function (window, document, HTMLElement) {\n\n  var __flags = {\n    isWCSupported: 'customElements' in window && 'import' in document.createElement('link') && 'content' in document.createElement('template'),\n    isIE11: !!window['MSInputMethodContext'] && !!document['documentMode'],\n    isChrome: undefined,\n    isEdge: undefined\n  };\n\n  try {\n    __flags.isChrome = /Chrome/.test(navigator.userAgent);\n    __flags.isEdge = /Edge/.test(navigator.userAgent);\n\n    if (__flags.isIE11 || __flags.isEdge) {\n      __flags.isChrome = false;\n      Object.defineProperty(Node.prototype, 'children', function () {\n        return this.childNodes;\n      });\n    }\n  } catch (err) {}\n\n  var _$2 = '_slim_internals_'; //Symbol('Slim')\n\n  var Internals = function Internals() {\n    _classCallCheck(this, Internals);\n\n    this.hasCustomTemplate = undefined;\n    this.boundParent = null;\n    this.repeater = {};\n    this.bindings = {};\n    this.reversed = {};\n    this.inbounds = {};\n    this.eventHandlers = {};\n    this.internetExploderClone = null;\n    this.rootElement = null;\n    this.createdCallbackInvoked = false;\n    this.sourceText = null;\n    this.excluded = false;\n    this.autoBoundAttributes = [];\n  };\n\n  var Slim = function (_CustomElement2) {\n    _inherits(Slim, _CustomElement2);\n\n    _createClass(Slim, null, [{\n      key: 'dashToCamel',\n      value: function dashToCamel(dash) {\n        return dash.indexOf('-') < 0 ? dash : dash.replace(/-[a-z]/g, function (m) {\n          return m[1].toUpperCase();\n        });\n      }\n    }, {\n      key: 'camelToDash',\n      value: function camelToDash(camel) {\n        return camel.replace(/([A-Z])/g, '-$1').toLowerCase();\n      }\n    }, {\n      key: 'lookup',\n      value: function lookup(target, expression, maybeRepeated) {\n        var chain = expression.split('.');\n        var o = void 0;\n        if (maybeRepeated && maybeRepeated[_$2].repeater[chain[0]]) {\n          o = maybeRepeated[_$2].repeater;\n        } else {\n          o = target;\n        }\n        var i = 0;\n        while (o && i < chain.length) {\n          o = o[chain[i++]];\n        }\n        return o;\n      }\n\n      // noinspection JSUnresolvedVariable\n\n    }, {\n      key: '_$',\n      value: function _$(target) {\n        target[_$2] = target[_$2] || new Internals();\n        return target[_$2];\n      }\n    }, {\n      key: 'polyFill',\n      value: function polyFill(url) {\n        if (!__flags.isWCSupported) {\n          var existingScript = document.querySelector('script[data-is-slim-polyfill=\"true\"]');\n          if (!existingScript) {\n            var script = document.createElement('script');\n            script.setAttribute('data-is-slim-polyfill', 'true');\n            script.src = url;\n            document.head.appendChild(script);\n          }\n        }\n      }\n    }, {\n      key: 'tag',\n      value: function tag(tagName, tplOrClazz, clazz) {\n        if (this.tagToClassDict.has(tagName)) {\n          throw new Error('Unable to define tag: ' + tagName + ' already defined');\n        }\n        if (clazz === undefined) {\n          clazz = tplOrClazz;\n        } else {\n          Slim.tagToTemplateDict.set(tagName, tplOrClazz);\n        }\n        this.tagToClassDict.set(tagName, clazz);\n        this.classToTagDict.set(clazz, tagName);\n        customElements.define(tagName, clazz);\n      }\n    }, {\n      key: 'tagOf',\n      value: function tagOf(clazz) {\n        return this.classToTagDict.get(clazz);\n      }\n    }, {\n      key: 'classOf',\n      value: function classOf(tag) {\n        return this.tagToClassDict.get(tag);\n      }\n    }, {\n      key: 'createUniqueIndex',\n      value: function createUniqueIndex() {\n        this[_$2].uniqueCounter++;\n        return this[_$2].uniqueCounter.toString(16);\n      }\n    }, {\n      key: 'plugin',\n      value: function plugin(phase, _plugin) {\n        if (!this.plugins[phase]) {\n          throw new Error('Cannot attach plugin: ' + phase + ' is not a supported phase');\n        }\n        this.plugins[phase].push(_plugin);\n      }\n    }, {\n      key: 'checkCreationBlocking',\n      value: function checkCreationBlocking(element) {\n        if (element.attributes) {\n          for (var i = 0, n = element.attributes.length; i < n; i++) {\n            var attribute = element.attributes[i];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = Slim[_$2].customDirectives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var _ref = _step.value;\n\n                var _ref2 = _slicedToArray(_ref, 2);\n\n                var test = _ref2[0];\n                var directive = _ref2[1];\n\n                var value = directive.isBlocking && test(attribute);\n                if (value) {\n                  return true;\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          }\n        }\n        return false;\n      }\n    }, {\n      key: 'customDirective',\n      value: function customDirective(testFn, fn, isBlocking) {\n        if (this[_$2].customDirectives.has(testFn)) {\n          throw new Error('Cannot register custom directive: ' + testFn + ' already registered');\n        }\n        fn.isBlocking = isBlocking;\n        this[_$2].customDirectives.set(testFn, fn);\n      }\n    }, {\n      key: 'executePlugins',\n      value: function executePlugins(phase, target) {\n        this.plugins[phase].forEach(function (fn) {\n          fn(target);\n        });\n      }\n    }, {\n      key: 'qSelectAll',\n      value: function qSelectAll(target, selector) {\n        return [].concat(_toConsumableArray(target.querySelectorAll(selector)));\n      }\n    }, {\n      key: 'unbind',\n      value: function unbind(source, target) {\n        var bindings = source[_$2].bindings;\n        Object.keys(bindings).forEach(function (key) {\n          var chain = bindings[key].chain.filter(function (binding) {\n            if (binding.target === target) {\n              binding.destroy();\n              return false;\n            }\n            return true;\n          });\n          bindings[key].chain = chain;\n        });\n      }\n    }, {\n      key: 'root',\n      value: function root(target) {\n        return target.__isSlim && target.useShadow ? target[_$2].rootElement : target;\n      }\n    }, {\n      key: 'selectRecursive',\n      value: function selectRecursive(target, force) {\n        var collection = [];\n        var search = function search(node, force) {\n          collection.push(node);\n          var allow = !node.__isSlim || node.__isSlim && !node.template || node.__isSlim && node === target || force;\n          if (allow) {\n            var children = [].concat(_toConsumableArray(Slim.root(node).children));\n            children.forEach(function (childNode) {\n              search(childNode, force);\n            });\n          }\n        };\n        search(target, force);\n        return collection;\n      }\n    }, {\n      key: 'removeChild',\n      value: function removeChild(target) {\n        if (typeof target.remove === 'function') {\n          target.remove();\n        }\n        if (target.parentNode) {\n          target.parentNode.removeChild(target);\n        }\n        if (this._$(target).internetExploderClone) {\n          this.removeChild(this._$(target).internetExploderClone);\n        }\n      }\n    }, {\n      key: 'moveChildren',\n      value: function moveChildren(source, target) {\n        while (source.firstChild) {\n          target.appendChild(source.firstChild);\n        }\n      }\n    }, {\n      key: 'wrapGetterSetter',\n      value: function wrapGetterSetter(element, expression) {\n        var pName = expression.split('.')[0];\n        var descriptor = Object.getOwnPropertyDescriptor(element, pName);\n        var oSetter = descriptor && descriptor.set;\n        if (oSetter && oSetter[_$2]) return pName;\n        if (typeof oSetter === 'undefined') {\n          oSetter = function oSetter() {};\n        }\n\n        var srcValue = element[pName];\n        this._$(element).bindings[pName] = element[_$2].bindings[pName] || {\n          chain: [],\n          value: srcValue\n        };\n        element[_$2].bindings[pName].value = srcValue;\n        var newSetter = function newSetter(v) {\n          oSetter(v);\n          this[_$2].bindings[pName].value = v;\n          this._executeBindings(pName);\n        };\n        newSetter[_$2] = true;\n        element.__defineGetter__(pName, function () {\n          return element[_$2].bindings[pName].value;\n        });\n        element.__defineSetter__(pName, newSetter);\n        return pName;\n      }\n    }, {\n      key: 'bindOwn',\n      value: function bindOwn(target, expression, executor) {\n        return Slim.bind(target, target, expression, executor);\n      }\n    }, {\n      key: 'bind',\n      value: function bind(source, target, expression, executor) {\n        Slim._$(source);\n        Slim._$(target);\n        if (target[_$2].excluded) return;\n        executor.source = source;\n        executor.target = target;\n        var pName = this.wrapGetterSetter(source, expression);\n        if (!source[_$2].reversed[pName]) {\n          source[_$2].bindings[pName].chain.push(executor);\n        }\n        target[_$2].inbounds[pName] = target[_$2].inbounds[pName] || [];\n        target[_$2].inbounds[pName].push(executor);\n        return executor;\n      }\n    }, {\n      key: 'update',\n      value: function update(target) {\n        var children = Slim.selectRecursive(target);\n\n        for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          props[_key - 1] = arguments[_key];\n        }\n\n        if (props.length === 0) {\n          return children.forEach(function (child) {\n            Slim.commit(child);\n          });\n        }\n        props.forEach(function (prop) {\n          children.forEach(function (child) {\n            Slim.commit(child, prop);\n          });\n        });\n      }\n    }, {\n      key: 'commit',\n      value: function commit(target, prop) {\n        var keys = void 0;\n        var $ = target[_$2];\n        var chain = [];\n        if (prop) {\n          if ($.inbounds[prop]) {\n            chain = chain.concat($.inbounds[prop] || []);\n          }\n          if ($.bindings[prop]) {\n            chain = chain.concat($.bindings[prop].chain);\n          }\n        } else {\n          Object.keys(target[_$2].inbounds).forEach(function (prop) {\n            if ($.inbounds[prop]) {\n              chain = chain.concat($.inbounds[prop] || []);\n            }\n            if ($.bindings[prop]) {\n              chain = chain.concat($.bindings[prop].chain);\n            }\n          });\n        }\n        chain.forEach(function (x) {\n          return x();\n        });\n      }\n\n      /*\n        Class instance\n        */\n\n    }, {\n      key: 'rxInject',\n      get: function get() {\n        return (/\\{(.+[^(\\((.+)\\))])\\}/\n        );\n      }\n    }, {\n      key: 'rxProp',\n      get: function get() {\n        return (/(.+[^(\\((.+)\\))])/\n        );\n      }\n    }, {\n      key: 'rxMethod',\n      get: function get() {\n        return (/(.+)(\\((.+)\\)){1}/\n        );\n      }\n    }]);\n\n    function Slim() {\n      _classCallCheck(this, Slim);\n\n      var _this = _possibleConstructorReturn(this, (Slim.__proto__ || Object.getPrototypeOf(Slim)).call(this));\n\n      _this.__isSlim = true;\n      Slim.debug('ctor', _this.localName);\n      if (Slim.checkCreationBlocking(_this)) {\n        return _possibleConstructorReturn(_this);\n      }\n      _this.createdCallback();\n      return _this;\n    }\n\n    // Native DOM Api V1\n\n    _createClass(Slim, [{\n      key: 'createdCallback',\n      value: function createdCallback() {\n        if (this[_$2] && this[_$2].createdCallbackInvoked) return;\n        this._initialize();\n        this[_$2].createdCallbackInvoked = true;\n        this.onBeforeCreated();\n        Slim.executePlugins('create', this);\n        this.render();\n        this.onCreated();\n      }\n\n      // Native DOM Api V2\n\n    }, {\n      key: 'connectedCallback',\n      value: function connectedCallback() {\n        this.createdCallback();\n        this.onAdded();\n        Slim.executePlugins('added', this);\n      }\n    }, {\n      key: 'disconnectedCallback',\n      value: function disconnectedCallback() {\n        this.onRemoved();\n        Slim.executePlugins('removed', this);\n      }\n    }, {\n      key: 'attributeChangedCallback',\n      value: function attributeChangedCallback(attr, oldValue, newValue) {\n        if (newValue !== oldValue && this[_$2].autoBoundAttributes[attr]) {\n          var prop = Slim.dashToCamel(attr);\n          this[prop] = newValue;\n        }\n      }\n\n      // Slim internal API\n\n    }, {\n      key: '_executeBindings',\n      value: function _executeBindings(prop) {\n        var _this2 = this;\n\n        Slim.debug('_executeBindings', this.localName);\n        var all = this[_$2].bindings;\n        if (prop) {\n          all = _defineProperty({}, prop, true);\n        }\n        Object.keys(all).forEach(function (pName) {\n          var o = _this2[_$2].bindings[pName];\n          o && o.chain.forEach(function (binding) {\n            return binding();\n          });\n        });\n      }\n    }, {\n      key: '_bindChildren',\n      value: function _bindChildren(children) {\n        Slim.debug('_bindChildren', this.localName);\n        if (!children) {\n          children = Slim.qSelectAll(this, '*');\n        }\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var child = _step2.value;\n\n            Slim._$(child);\n            if (child[_$2].boundParent === this) continue;\n            child[_$2].boundParent = child[_$2].boundParent || this;\n\n            // todo: child.localName === 'style' && this.useShadow -> processStyleNodeInShadowMode\n\n            if (child.attributes.length) {\n              var i = 0;\n              var n = child.attributes.length;\n              while (i < n) {\n                var source = this;\n                var attribute = child.attributes.item(i);\n                if (!child[_$2].excluded) {\n                  var _iteratorNormalCompletion3 = true;\n                  var _didIteratorError3 = false;\n                  var _iteratorError3 = undefined;\n\n                  try {\n                    for (var _iterator3 = Slim[_$2].customDirectives[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                      var _ref3 = _step3.value;\n\n                      var _ref4 = _slicedToArray(_ref3, 2);\n\n                      var check = _ref4[0];\n                      var directive = _ref4[1];\n\n                      var match = check(attribute);\n                      if (match) {\n                        directive(source, child, attribute, match);\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                      }\n                    } finally {\n                      if (_didIteratorError3) {\n                        throw _iteratorError3;\n                      }\n                    }\n                  }\n                }\n                i++;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n    }, {\n      key: '_resetBindings',\n      value: function _resetBindings() {\n        Slim.debug('_resetBindings', this.localName);\n        this[_$2].bindings = {};\n      }\n    }, {\n      key: '_render',\n      value: function _render(customTemplate) {\n        var _this3 = this;\n\n        Slim.debug('_render', this.localName);\n        Slim.executePlugins('beforeRender', this);\n        this[_$2].hasCustomTemplate = customTemplate;\n        this._resetBindings();\n        this[_$2].rootElement.innerHTML = '';[].concat(_toConsumableArray(this.childNodes)).forEach(function (childNode) {\n          if (childNode.localName === 'style') {\n            _this3[_$2].externalStyle = childNode;\n            childNode.remove();\n          }\n        });\n        var template = this[_$2].hasCustomTemplate || this.template;\n        if (template && typeof template === 'string') {\n          var frag = document.createElement('slim-root-fragment');\n          frag.innerHTML = template || '';\n          var scopedChildren = Slim.qSelectAll(frag, '*');\n          if (this[_$2].externalStyle) {\n            this._bindChildren([this[_$2].externalStyle]);\n          }\n          this._bindChildren(scopedChildren);\n          Slim.asap(function () {\n            Slim.moveChildren(frag, _this3[_$2].rootElement || _this3);\n            _this3[_$2].externalStyle && _this3[_$2].rootElement.appendChild(_this3[_$2].externalStyle);\n            _this3._executeBindings();\n            _this3.onRender();\n            Slim.executePlugins('afterRender', _this3);\n            _this3.dispatchEvent(new Event('afterRender'));\n          });\n        }\n      }\n    }, {\n      key: '_initialize',\n      value: function _initialize() {\n        var _this4 = this;\n\n        Slim.debug('_initialize', this.localName);\n        Slim._$(this);\n        this[_$2].uniqueIndex = Slim.createUniqueIndex();\n        if (this.useShadow) {\n          // this[_$].rootElement = this.attachShadow({mode:'open'})\n          this[_$2].rootElement = this.createShadowRoot();\n        } else {\n          this[_$2].rootElement = this;\n        }\n        // this.setAttribute('slim-uq', this[_$].uniqueIndex)\n        var observedAttributes = this.constructor.observedAttributes;\n        if (observedAttributes) {\n          observedAttributes.forEach(function (attr) {\n            var pName = Slim.dashToCamel(attr);\n            _this4[pName] = _this4.getAttribute(attr);\n          });\n        }\n      }\n\n      // Slim public / protected API\n\n    }, {\n      key: 'commit',\n      value: function commit() {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        Slim.commit.apply(Slim, [this].concat(args));\n      }\n    }, {\n      key: 'update',\n      value: function update() {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        Slim.update.apply(Slim, [this].concat(args));\n      }\n    }, {\n      key: 'render',\n      value: function render(tpl) {\n        this._render(tpl);\n      }\n    }, {\n      key: 'onRender',\n      value: function onRender() {}\n    }, {\n      key: 'onBeforeCreated',\n      value: function onBeforeCreated() {}\n    }, {\n      key: 'onCreated',\n      value: function onCreated() {}\n    }, {\n      key: 'onAdded',\n      value: function onAdded() {}\n    }, {\n      key: 'onRemoved',\n      value: function onRemoved() {}\n    }, {\n      key: 'find',\n      value: function find(selector) {\n        return this[_$2].rootElement.querySelector(selector);\n      }\n    }, {\n      key: 'findAll',\n      value: function findAll(selector) {\n        return Slim.qSelectAll(this[_$2].rootElement, selector);\n      }\n    }, {\n      key: 'callAttribute',\n      value: function callAttribute(attr, data) {\n        var fnName = this.getAttribute(attr);\n        if (fnName) {\n          return this[_$2].boundParent[fnName](data);\n        }\n      }\n    }, {\n      key: '_isInContext',\n      get: function get() {\n        var node = this;\n        while (node) {\n          node = node.parentNode;\n          if (!node) {\n            return false;\n          }\n          if (node instanceof Document) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: 'useShadow',\n      get: function get() {\n        return false;\n      }\n    }, {\n      key: 'template',\n      get: function get() {\n        return Slim.tagToTemplateDict.get(Slim.tagOf(this.constructor));\n      }\n    }]);\n\n    return Slim;\n  }(_CustomElement);\n\n  Slim.uniqueIndex = 0;\n  Slim.tagToClassDict = new Map();\n  Slim.classToTagDict = new Map();\n  Slim.tagToTemplateDict = new Map();\n  Slim.plugins = {\n    'create': [],\n    'added': [],\n    'beforeRender': [],\n    'afterRender': [],\n    'removed': []\n  };\n\n  Slim.debug = function () {};\n\n  Slim.asap = window && window.requestAnimationFrame ? function (cb) {\n    return window.requestAnimationFrame(cb);\n  } : typeof setImmediate !== 'undefined' ? setImmediate : function (cb) {\n    return setTimeout(cb, 0);\n  };\n\n  Slim[_$2] = {\n    customDirectives: new Map(),\n    uniqueCounter: 0,\n    supportedNativeEvents: ['click', 'mouseover', 'mouseout', 'mousemove', 'mouseenter', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'wheel', 'mouseleave', 'select', 'pointerlockchange', 'pointerlockerror', 'focus', 'blur', 'input', 'error', 'invalid', 'animationstart', 'animationend', 'animationiteration', 'reset', 'submit', 'resize', 'scroll', 'keydown', 'keypress', 'keyup', 'change']\n  };\n\n  Slim.customDirective(function (attr) {\n    return (/^s:iterate$/.test(attr.nodeName)\n    );\n  }, function () {}, true);\n\n  // supported events (i.e. click, mouseover, change...)\n  Slim.customDirective(function (attr) {\n    return Slim[_$2].supportedNativeEvents.indexOf(attr.nodeName) >= 0;\n  }, function (source, target, attribute) {\n    var eventName = attribute.nodeName;\n    var delegate = attribute.value;\n    Slim._$(target).eventHandlers = target[_$2].eventHandlers || {};\n    var allHandlers = target[_$2].eventHandlers;\n    allHandlers[eventName] = allHandlers[eventName] || [];\n    var handler = function handler(e) {\n      try {\n        source[delegate].call(source, e);\n      } catch (err) {\n        err.message = 'Could not respond to event \"' + eventName + '\" on ' + target.localName + ' -> \"' + delegate + '\" on ' + source.localName + ' ... ' + err.message;\n        console.warn(err);\n      }\n    };\n    allHandlers[eventName].push(handler);\n    target.addEventListener(eventName, handler);\n    handler = null;\n  });\n\n  Slim.customDirective(function (attr) {\n    return (/^s:if$/.exec(attr.nodeName)\n    );\n  }, function (source, target, attribute) {\n    var expression = attribute.value;\n    var path = expression;\n    var isNegative = false;\n    if (path.charAt(0) === '!') {\n      path = path.slice(1);\n      isNegative = true;\n    }\n    var anchor = document.createComment('if:' + expression);\n    target.parentNode.insertBefore(anchor, target);\n    var fn = function fn() {\n      var value = Slim.lookup(source, path, target);\n      if (isNegative) {\n        value = !value;\n      }\n      if (value) {\n        anchor.parentNode.insertBefore(target, anchor.nextSibling);\n      } else {\n        Slim.removeChild(target);\n      }\n    };\n    Slim.bind(source, target, path, fn);\n  }, true);\n\n  // bind (text nodes)\n  Slim.customDirective(function (attr) {\n    return (/^bind$/.test(attr.nodeName)\n    );\n  }, function (source, target) {\n    Slim._$(target);\n    target[_$2].sourceText = target.innerText;\n    var updatedText = '';\n    var matches = target.innerText.match(/\\{\\{([^\\}\\}]+)+\\}\\}/g);\n    var aggProps = {};\n    var textBinds = {};\n    if (matches) {\n      matches.forEach(function (expression) {\n        var oldValue = void 0;\n        var rxM = /\\{\\{(.+)(\\((.+)\\)){1}\\}\\}/.exec(expression);\n        if (rxM) {\n          var fnName = rxM[1];\n          var pNames = rxM[3].split(' ').join('').split(',');\n          pNames.map(function (path) {\n            return path.split('.')[0];\n          }).forEach(function (p) {\n            return aggProps[p] = true;\n          });\n          textBinds[expression] = function (target) {\n            var args = pNames.map(function (path) {\n              return Slim.lookup(source, path, target);\n            });\n            var value = source[fnName].apply(source, args);\n            if (oldValue === value) return;\n            updatedText = updatedText.split(expression).join(value || '');\n          };\n          return;\n        }\n        var rxP = /\\{\\{(.+[^(\\((.+)\\))])\\}\\}/.exec(expression);\n        if (rxP) {\n          var path = rxP[1];\n          aggProps[path] = true;\n          textBinds[expression] = function (target) {\n            var value = Slim.lookup(source, path, target);\n            if (oldValue === value) return;\n            updatedText = updatedText.split(expression).join(value || '');\n          };\n        }\n      });\n      var chainExecutor = function chainExecutor() {\n        updatedText = target[_$2].sourceText;\n        Object.keys(textBinds).forEach(function (expression) {\n          textBinds[expression](target);\n        });\n        target.innerText = updatedText;\n      };\n      Object.keys(aggProps).forEach(function (prop) {\n        Slim.bind(source, target, prop, chainExecutor);\n      });\n    }\n  });\n\n  Slim.customDirective(function (attr) {\n    return (/^s:id$/.test(attr.nodeName)\n    );\n  }, function (source, target, attribute) {\n    Slim._$(target).boundParent[attribute.value] = target;\n  });\n\n  // bind:property\n  Slim.customDirective(function (attr) {\n    return (/^(bind):(\\S+)/.exec(attr.nodeName)\n    );\n  }, function (source, target, attribute, match) {\n    var tAttr = match[2];\n    var tProp = Slim.dashToCamel(tAttr);\n    var expression = attribute.value;\n    var oldValue = void 0;\n    var rxM = Slim.rxMethod.exec(expression);\n    if (rxM) {\n      var pNames = rxM[3].split(' ').join('').split(',');\n      pNames.forEach(function (pName) {\n        Slim.bind(source, target, pName, function () {\n          var fn = Slim.lookup(source, rxM[1], target);\n          var args = pNames.map(function (prop) {\n            return Slim.lookup(source, prop, target);\n          });\n          var value = fn.apply(source, args);\n          if (oldValue === value) return;\n          target[tProp] = value;\n          target.setAttribute(tAttr, value);\n        });\n      });\n      return;\n    }\n    var rxP = Slim.rxProp.exec(expression);\n    if (rxP) {\n      var prop = rxP[1];\n      Slim.bind(source, target, prop, function () {\n        var value = Slim.lookup(source, expression, target);\n        if (oldValue === value) return;\n        target.setAttribute(tAttr, value);\n        target[tProp] = value;\n      });\n    }\n  });\n\n  __flags.isChrome && Slim.customDirective(function (attr) {\n    return (/^s:repeat$/.test(attr.nodeName)\n    );\n  }, function (source, templateNode, attribute) {\n    var path = attribute.value;\n    var tProp = 'data';\n    if (path.indexOf(' as')) {\n      tProp = path.split(' as ')[1] || tProp;\n      path = path.split(' as ')[0];\n    }\n\n    var clones = [];\n    var hook = document.createComment(templateNode.localName + ' s:repeat=\"' + attribute.value + '\"');\n    var templateHTML = void 0;\n    Slim._$(hook);\n    Slim.selectRecursive(templateNode, true).forEach(function (e) {\n      return Slim._$(e).excluded = true;\n    });\n    templateNode.parentElement.insertBefore(hook, templateNode);\n    templateNode.remove();\n    Slim.unbind(source, templateNode);\n    Slim.asap(function () {\n      templateNode.setAttribute('s:iterate', '');\n      templateNode.removeAttribute('s:repeat');\n      templateHTML = templateNode.outerHTML;\n      templateNode.innerHTML = '';\n    });\n    var oldDataSource = [];\n    Slim.bind(source, hook, path, function () {\n      var dataSource = Slim.lookup(source, path) || [];\n      var offset = 0;\n      var restOfData = [];\n      // get the diff\n      var diff = Array(dataSource.length);\n      dataSource.forEach(function (d, i) {\n        if (oldDataSource[i] !== d) {\n          diff[i] = true;\n        }\n      });\n      oldDataSource = dataSource.concat();\n      var indices = Object.keys(diff);\n      if (dataSource.length < clones.length) {\n        var disposables = clones.slice(dataSource.length);\n        clones = clones.slice(0, dataSource.length);\n        disposables.forEach(function (clone) {\n          return clone.remove();\n        });\n        // unbind disposables?\n        indices.forEach(function (index) {\n          var clone = clones[index];[clone].concat(Slim.qSelectAll(clone, '*')).forEach(function (t) {\n            t[_$2].repeater[tProp] = dataSource[index];\n            Slim.commit(t, tProp);\n          });\n        });\n      } else {\n        // recycle\n        clones.length && indices.forEach(function (index) {\n          var clone = clones[index];\n          if (!clone) return;\n          [clone].concat(Slim.qSelectAll(clone, '*')).forEach(function (t) {\n            t[_$2].repeater[tProp] = dataSource[index];\n            Slim.commit(t, tProp);\n          });\n        });\n        restOfData = dataSource.slice(clones.length);\n        offset = clones.length;\n      }\n      if (!restOfData.length) return;\n      // new clones\n      var range = document.createRange();\n      range.setStartBefore(hook);\n      var html = Array(restOfData.length).fill(templateHTML).join('');\n      var frag = range.createContextualFragment(html);\n      var all = [];\n      var i = 0;\n      while (i < frag.children.length) {\n        var e = frag.children.item(i);\n        clones.push(e);\n        all.push(e);\n        Slim._$(e).repeater[tProp] = dataSource[i + offset];\n        var subTree = Slim.qSelectAll(e, '*');\n        subTree.forEach(function (t) {\n          all.push(t);\n          Slim._$(t).repeater[tProp] = dataSource[i + offset];\n          Slim.commit(t, tProp);\n        });\n        i++;\n      }\n      source._bindChildren(all);\n      all.forEach(function (t) {\n        if (t.__isSlim) {\n          t.createdCallback();\n          Slim.asap(function () {\n            Slim.commit(t, tProp);\n            t[tProp] = t[_$2].repeater[tProp];\n          });\n        } else {\n          Slim.commit(t, tProp);\n          t[tProp] = t[_$2].repeater[tProp];\n        }\n      });\n      hook.parentElement.insertBefore(frag, hook);\n    });\n    source[_$2].reversed[tProp] = true;\n  }, true);\n\n  !__flags.isChrome && Slim.customDirective(function (attr) {\n    return (/^s:repeat$/.test(attr.nodeName)\n    );\n  }, function (source, templateNode, attribute) {\n    var path = attribute.nodeValue;\n    var tProp = 'data';\n    if (path.indexOf(' as')) {\n      tProp = path.split(' as ')[1] || tProp;\n      path = path.split(' as ')[0];\n    }\n\n    var repeater = document.createElement('slim-repeat');\n    repeater[_$2].boundParent = source;\n    repeater.dataProp = tProp;\n    repeater.dataPath = attribute.nodeValue;\n    repeater.templateNode = templateNode.cloneNode(true);\n    repeater.templateNode.removeAttribute('s:repeat');\n    templateNode.parentNode.insertBefore(repeater, templateNode);\n    Slim.removeChild(templateNode);\n    Slim.bind(source, repeater, path, function () {\n      var dataSource = Slim.lookup(source, path);\n      repeater.dataSource = dataSource || [];\n    });\n\n    // source._executeBindings()\n  }, true);\n\n  var SlimRepeater = function (_Slim) {\n    _inherits(SlimRepeater, _Slim);\n\n    function SlimRepeater() {\n      _classCallCheck(this, SlimRepeater);\n\n      return _possibleConstructorReturn(this, (SlimRepeater.__proto__ || Object.getPrototypeOf(SlimRepeater)).apply(this, arguments));\n    }\n\n    _createClass(SlimRepeater, [{\n      key: '_bindChildren',\n      value: function _bindChildren(tree) {\n        var _this6 = this;\n\n        tree = Array.prototype.slice.call(tree);\n        var directChildren = Array.prototype.filter.call(tree, function (child) {\n          return child.parentNode.localName === 'slim-root-fragment';\n        });\n        directChildren.forEach(function (child, index) {\n          child.setAttribute('s:iterate', _this6.dataPath + ' : ' + index);\n          Slim.selectRecursive(child).forEach(function (e) {\n            Slim._$(e).repeater[_this6.dataProp] = _this6.dataSource[index];\n            if (e instanceof Slim) {\n              e[_this6.dataProp] = _this6.dataSource[index];\n            }\n          });\n        });\n      }\n    }, {\n      key: 'onRender',\n      value: function onRender() {\n        if (!this.boundParent) return;\n        var tree = Slim.selectRecursive(this);\n        this.boundParent && this.boundParent._bindChildren(tree);\n        this.boundParent._executeBindings();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this7 = this;\n\n        if (!this.boundParent) return;\n        Slim.qSelectAll(this, '*').forEach(function (e) {\n          Slim.unbind(_this7.boundParent, e);\n        });\n        if (!this.dataSource || !this.templateNode || !this.boundParent) {\n          return _get(SlimRepeater.prototype.__proto__ || Object.getPrototypeOf(SlimRepeater.prototype), 'render', this).call(this, '');\n        }\n        var newTemplate = Array(this.dataSource.length).fill(this.templateNode.outerHTML).join('');\n        this.innerHTML = '';\n        _get(SlimRepeater.prototype.__proto__ || Object.getPrototypeOf(SlimRepeater.prototype), 'render', this).call(this, newTemplate);\n      }\n    }, {\n      key: 'dataSource',\n      get: function get() {\n        return this._dataSource;\n      },\n      set: function set(v) {\n        if (this._dataSource !== v) {\n          this._dataSource = v;\n          this.render();\n        }\n      }\n    }, {\n      key: 'boundParent',\n      get: function get() {\n        return this[_$2].boundParent;\n      }\n    }]);\n\n    return SlimRepeater;\n  }(Slim);\n\n  Slim.tag('slim-repeat', SlimRepeater);\n\n  if (window) {\n    window['Slim'] = Slim;\n  }\n  if (true) {\n    module.exports.Slim = Slim;\n  }\n})(window, document, HTMLElement);\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4).setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(5);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzP2QxZWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(7)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzPzZiMzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDLHNCQUFzQixFQUFFO0FBQ2xFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzBmODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("\t\tSlim.tag(\n\t\t\t'my-tag',\n\t\t\t`<div>Web Component version</div>\n\t\t\t<div>Citation:</div>\n\t\t\t<div>\n\t\t\t<span bind>{{Authors}}.</span>\n\t\t\t<span bind>{{Year}}.</span>\n\t\t\t<span bind>{{Dataset}}</span>\n\t\t\t<span style=\"font-style: italic;\" bind>{{Title}}.</span>\n\t\t\t<span bind>{{Archive}}</span>\n\t\t\t<span bind>{{Version}}</span>\n\t\t\t<span bind>Retrieved from {{PID}}</span>\n\t\t\t</div>`,\n\t\t\tclass MyTag extends Slim {\n\t\t\t\t// your code here\n\t\t\t\tonBeforeCreated() {\n\t\t\t\t\tvar element = document.getElementById('test');\n\t\t\t\t\tvar jsonld = element.innerHTML;\n\n\t\t\t\t\t// var promises = jsonld.promises;\n\t\t\t\t\t// var promise = promises.flatten(doc);\n\t\t\t\t\t// promise.then(function (flattened) { this.myMessage = flattened }, function (err) { this.myMessage = flattened });\n\n\t\t\t\t\tvar obj = JSON.parse(jsonld);\n\n\t\t\t\t\tthis.Authors = obj.publisher.name\n\t\t\t\t\tthis.Year = \"\"\n\t\t\t\t\tthis.Dataset = obj.name\n\t\t\t\t\tthis.Title = obj.description\n\t\t\t\t\tthis.Archive = \"\"\n\t\t\t\t\tthis.Version = \"\"\n\t\t\t\t\tthis.PID = obj.url\n\t\t\t\t}\n\t\t\t})\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90YWcyLmpzP2Q2ZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCLGdCQUFnQixNQUFNO0FBQ3RCLGdCQUFnQixTQUFTO0FBQ3pCLG1DQUFtQyxTQUFTLE9BQU87QUFDbkQsZ0JBQWdCLFNBQVM7QUFDekIsZ0JBQWdCLFNBQVM7QUFDekIsK0JBQStCLEtBQUs7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsNkJBQTZCLGtCQUFrQiw2QkFBNkI7O0FBRXZIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcdFx0U2xpbS50YWcoXG5cdFx0XHQnbXktdGFnJyxcblx0XHRcdGA8ZGl2PldlYiBDb21wb25lbnQgdmVyc2lvbjwvZGl2PlxuXHRcdFx0PGRpdj5DaXRhdGlvbjo8L2Rpdj5cblx0XHRcdDxkaXY+XG5cdFx0XHQ8c3BhbiBiaW5kPnt7QXV0aG9yc319Ljwvc3Bhbj5cblx0XHRcdDxzcGFuIGJpbmQ+e3tZZWFyfX0uPC9zcGFuPlxuXHRcdFx0PHNwYW4gYmluZD57e0RhdGFzZXR9fTwvc3Bhbj5cblx0XHRcdDxzcGFuIHN0eWxlPVwiZm9udC1zdHlsZTogaXRhbGljO1wiIGJpbmQ+e3tUaXRsZX19Ljwvc3Bhbj5cblx0XHRcdDxzcGFuIGJpbmQ+e3tBcmNoaXZlfX08L3NwYW4+XG5cdFx0XHQ8c3BhbiBiaW5kPnt7VmVyc2lvbn19PC9zcGFuPlxuXHRcdFx0PHNwYW4gYmluZD5SZXRyaWV2ZWQgZnJvbSB7e1BJRH19PC9zcGFuPlxuXHRcdFx0PC9kaXY+YCxcblx0XHRcdGNsYXNzIE15VGFnIGV4dGVuZHMgU2xpbSB7XG5cdFx0XHRcdC8vIHlvdXIgY29kZSBoZXJlXG5cdFx0XHRcdG9uQmVmb3JlQ3JlYXRlZCgpIHtcblx0XHRcdFx0XHR2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXN0Jyk7XG5cdFx0XHRcdFx0dmFyIGpzb25sZCA9IGVsZW1lbnQuaW5uZXJIVE1MO1xuXG5cdFx0XHRcdFx0Ly8gdmFyIHByb21pc2VzID0ganNvbmxkLnByb21pc2VzO1xuXHRcdFx0XHRcdC8vIHZhciBwcm9taXNlID0gcHJvbWlzZXMuZmxhdHRlbihkb2MpO1xuXHRcdFx0XHRcdC8vIHByb21pc2UudGhlbihmdW5jdGlvbiAoZmxhdHRlbmVkKSB7IHRoaXMubXlNZXNzYWdlID0gZmxhdHRlbmVkIH0sIGZ1bmN0aW9uIChlcnIpIHsgdGhpcy5teU1lc3NhZ2UgPSBmbGF0dGVuZWQgfSk7XG5cblx0XHRcdFx0XHR2YXIgb2JqID0gSlNPTi5wYXJzZShqc29ubGQpO1xuXG5cdFx0XHRcdFx0dGhpcy5BdXRob3JzID0gb2JqLnB1Ymxpc2hlci5uYW1lXG5cdFx0XHRcdFx0dGhpcy5ZZWFyID0gXCJcIlxuXHRcdFx0XHRcdHRoaXMuRGF0YXNldCA9IG9iai5uYW1lXG5cdFx0XHRcdFx0dGhpcy5UaXRsZSA9IG9iai5kZXNjcmlwdGlvblxuXHRcdFx0XHRcdHRoaXMuQXJjaGl2ZSA9IFwiXCJcblx0XHRcdFx0XHR0aGlzLlZlcnNpb24gPSBcIlwiXG5cdFx0XHRcdFx0dGhpcy5QSUQgPSBvYmoudXJsXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3RhZzIuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })
/******/ ]);